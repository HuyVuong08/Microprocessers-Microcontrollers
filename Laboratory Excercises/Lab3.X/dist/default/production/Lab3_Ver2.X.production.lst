

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Mon Sep 30 09:41:11 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F8722
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    58                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    63                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    64                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    65  0000                     
    66                           ; Version 2.10
    67                           ; Generated 31/07/2019 GMT
    68                           ; 
    69                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    70                           ; All rights reserved.
    71                           ; 
    72                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    73                           ; 
    74                           ; Redistribution and use in source and binary forms, with or without modification, are
    75                           ; permitted provided that the following conditions are met:
    76                           ; 
    77                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    78                           ;        conditions and the following disclaimer.
    79                           ; 
    80                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    81                           ;        of conditions and the following disclaimer in the documentation and/or other
    82                           ;        materials provided with the distribution.
    83                           ; 
    84                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    85                           ;        software without specific prior written permission.
    86                           ; 
    87                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    88                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    89                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    90                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    91                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    92                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    93                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    94                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    95                           ; 
    96                           ; 
    97                           ; Code-generator required, PIC18F8722 Definitions
    98                           ; 
    99                           ; SFR Addresses
   100  0000                     
   101                           	psect	idataCOMRAM
   102  00251C                     __pidataCOMRAM:
   103                           	opt callstack 0
   104                           
   105                           ;initializer for _firstTime
   106  00251C  0001               	dw	1
   107                           
   108                           ;initializer for _checkSw
   109  00251E  0001               	dw	1
   110                           
   111                           ;initializer for _checkSc
   112  002520  0001               	dw	1
   113                           
   114                           ;initializer for _checkMin
   115  002522  0001               	dw	1
   116                           
   117                           ;initializer for _checkHr
   118  002524  0001               	dw	1
   119                           
   120                           ;initializer for _checkClock
   121  002526  0001               	dw	1
   122                           
   123                           ;initializer for _stopWatch_flag
   124  002528  01                 	db	1
   125                           
   126                           	psect	idataBANK0
   127  002548                     __pidataBANK0:
   128                           	opt callstack 0
   129                           
   130                           ;initializer for _checkBegin
   131  002548  0001               	dw	1
   132                           
   133                           	psect	nvCOMRAM
   134  000058                     __pnvCOMRAM:
   135                           	opt callstack 0
   136  000058                     _timer1ReloadVal:
   137                           	opt callstack 0
   138  000058                     	ds	2
   139  0000                     _TMR1	set	4046
   140  0000                     _INTCONbits	set	4082
   141  0000                     _PORTAbits	set	3968
   142  0000                     _PORTBbits	set	3969
   143  0000                     _LATCbits	set	3979
   144  0000                     _LATAbits	set	3977
   145  0000                     _TRISCbits	set	3988
   146  0000                     _LATFbits	set	3982
   147  0000                     _TRISFbits	set	3991
   148  0000                     _OSCTUNE	set	3995
   149  0000                     _OSCCON	set	4051
   150  0000                     _INTCON2bits	set	4081
   151  0000                     _TRISBbits	set	3987
   152  0000                     _TRISAbits	set	3986
   153  0000                     _TRISE	set	3990
   154  0000                     _LATE	set	3981
   155  0000                     _TRISD	set	3989
   156  0000                     _LATD	set	3980
   157  0000                     _TRISC	set	3988
   158  0000                     _LATC	set	3979
   159  0000                     _TRISB	set	3987
   160  0000                     _LATB	set	3978
   161  0000                     _TRISA	set	3986
   162  0000                     _LATA	set	3977
   163  0000                     _T1CONbits	set	4045
   164  0000                     _TMR1L	set	4046
   165  0000                     _TMR1H	set	4047
   166  0000                     _T1CON	set	4045
   167  0000                     _PIR1bits	set	3998
   168  0000                     _PIE1bits	set	3997
   169  0000                     _IPR1bits	set	3999
   170  0000                     _ADCON1	set	4033
   171  0000                     _RCONbits	set	4048
   172                           
   173                           	psect	smallconst
   174  001000                     __psmallconst:
   175                           	opt callstack 0
   176  001000  00                 	db	0
   177  001001                     STR_27:
   178  001001  20                 	db	32
   179  001002  20                 	db	32
   180  001003  20                 	db	32
   181  001004  20                 	db	32
   182  001005  20                 	db	32
   183  001006  53                 	db	83	;'S'
   184  001007  54                 	db	84	;'T'
   185  001008  4F                 	db	79	;'O'
   186  001009  50                 	db	80	;'P'
   187  00100A  57                 	db	87	;'W'
   188  00100B  41                 	db	65	;'A'
   189  00100C  54                 	db	84	;'T'
   190  00100D  43                 	db	67	;'C'
   191  00100E  48                 	db	72	;'H'
   192  00100F  20                 	db	32
   193  001010  20                 	db	32
   194  001011  20                 	db	32
   195  001012  20                 	db	32
   196  001013  20                 	db	32
   197  001014  20                 	db	32
   198  001015  00                 	db	0
   199  001016                     STR_22:
   200  001016  20                 	db	32
   201  001017  20                 	db	32
   202  001018  20                 	db	32
   203  001019  20                 	db	32
   204  00101A  20                 	db	32
   205  00101B  53                 	db	83	;'S'
   206  00101C  45                 	db	69	;'E'
   207  00101D  43                 	db	67	;'C'
   208  00101E  4F                 	db	79	;'O'
   209  00101F  4E                 	db	78	;'N'
   210  001020  44                 	db	68	;'D'
   211  001021  20                 	db	32
   212  001022  20                 	db	32
   213  001023  20                 	db	32
   214  001024  20                 	db	32
   215  001025  20                 	db	32
   216  001026  20                 	db	32
   217  001027  00                 	db	0
   218  001028                     STR_16:
   219  001028  20                 	db	32
   220  001029  20                 	db	32
   221  00102A  20                 	db	32
   222  00102B  20                 	db	32
   223  00102C  20                 	db	32
   224  00102D  4D                 	db	77	;'M'
   225  00102E  49                 	db	73	;'I'
   226  00102F  4E                 	db	78	;'N'
   227  001030  55                 	db	85	;'U'
   228  001031  54                 	db	84	;'T'
   229  001032  45                 	db	69	;'E'
   230  001033  20                 	db	32
   231  001034  20                 	db	32
   232  001035  20                 	db	32
   233  001036  20                 	db	32
   234  001037  20                 	db	32
   235  001038  20                 	db	32
   236  001039  00                 	db	0
   237  00103A                     STR_30:
   238  00103A  20                 	db	32
   239  00103B  50                 	db	80	;'P'
   240  00103C  49                 	db	73	;'I'
   241  00103D  43                 	db	67	;'C'
   242  00103E  31                 	db	49	;'1'
   243  00103F  38                 	db	56	;'8'
   244  001040  20                 	db	32
   245  001041  45                 	db	69	;'E'
   246  001042  78                 	db	120	;'x'
   247  001043  70                 	db	112	;'p'
   248  001044  6C                 	db	108	;'l'
   249  001045  6F                 	db	111	;'o'
   250  001046  72                 	db	114	;'r'
   251  001047  65                 	db	101	;'e'
   252  001048  72                 	db	114	;'r'
   253  001049  20                 	db	32
   254  00104A  00                 	db	0
   255  00104B                     STR_29:
   256  00104B  4D                 	db	77	;'M'
   257  00104C  69                 	db	105	;'i'
   258  00104D  63                 	db	99	;'c'
   259  00104E  72                 	db	114	;'r'
   260  00104F  6F                 	db	111	;'o'
   261  001050  63                 	db	99	;'c'
   262  001051  68                 	db	104	;'h'
   263  001052  69                 	db	105	;'i'
   264  001053  70                 	db	112	;'p'
   265  001054  20                 	db	32
   266  001055  50                 	db	80	;'P'
   267  001056  49                 	db	73	;'I'
   268  001057  43                 	db	67	;'C'
   269  001058  44                 	db	68	;'D'
   270  001059  45                 	db	69	;'E'
   271  00105A  4D                 	db	77	;'M'
   272  00105B  00                 	db	0
   273  00105C                     STR_26:
   274  00105C  52                 	db	82	;'R'
   275  00105D  42                 	db	66	;'B'
   276  00105E  30                 	db	48	;'0'
   277  00105F  3D                 	db	61	;'='
   278  001060  43                 	db	67	;'C'
   279  001061  74                 	db	116	;'t'
   280  001062  72                 	db	114	;'r'
   281  001063  20                 	db	32
   282  001064  52                 	db	82	;'R'
   283  001065  41                 	db	65	;'A'
   284  001066  35                 	db	53	;'5'
   285  001067  3D                 	db	61	;'='
   286  001068  4E                 	db	78	;'N'
   287  001069  65                 	db	101	;'e'
   288  00106A  78                 	db	120	;'x'
   289  00106B  74                 	db	116	;'t'
   290  00106C  00                 	db	0
   291  00106D                     STR_3:
   292  00106D  20                 	db	32
   293  00106E  20                 	db	32
   294  00106F  20                 	db	32
   295  001070  20                 	db	32
   296  001071  20                 	db	32
   297  001072  43                 	db	67	;'C'
   298  001073  4C                 	db	76	;'L'
   299  001074  4F                 	db	79	;'O'
   300  001075  43                 	db	67	;'C'
   301  001076  4B                 	db	75	;'K'
   302  001077  20                 	db	32
   303  001078  20                 	db	32
   304  001079  20                 	db	32
   305  00107A  20                 	db	32
   306  00107B  20                 	db	32
   307  00107C  20                 	db	32
   308  00107D  00                 	db	0
   309  00107E                     STR_5:
   310  00107E  20                 	db	32
   311  00107F  20                 	db	32
   312  001080  20                 	db	32
   313  001081  20                 	db	32
   314  001082  20                 	db	32
   315  001083  20                 	db	32
   316  001084  20                 	db	32
   317  001085  20                 	db	32
   318  001086  52                 	db	82	;'R'
   319  001087  41                 	db	65	;'A'
   320  001088  35                 	db	53	;'5'
   321  001089  3D                 	db	61	;'='
   322  00108A  4E                 	db	78	;'N'
   323  00108B  65                 	db	101	;'e'
   324  00108C  78                 	db	120	;'x'
   325  00108D  74                 	db	116	;'t'
   326  00108E  00                 	db	0
   327  00108F                     STR_4:
   328  00108F  52                 	db	82	;'R'
   329  001090  42                 	db	66	;'B'
   330  001091  30                 	db	48	;'0'
   331  001092  3D                 	db	61	;'='
   332  001093  4E                 	db	78	;'N'
   333  001094  6F                 	db	111	;'o'
   334  001095  77                 	db	119	;'w'
   335  001096  20                 	db	32
   336  001097  52                 	db	82	;'R'
   337  001098  41                 	db	65	;'A'
   338  001099  35                 	db	53	;'5'
   339  00109A  3D                 	db	61	;'='
   340  00109B  4E                 	db	78	;'N'
   341  00109C  65                 	db	101	;'e'
   342  00109D  78                 	db	120	;'x'
   343  00109E  74                 	db	116	;'t'
   344  00109F  00                 	db	0
   345  0010A0                     STR_10:
   346  0010A0  20                 	db	32
   347  0010A1  20                 	db	32
   348  0010A2  20                 	db	32
   349  0010A3  20                 	db	32
   350  0010A4  20                 	db	32
   351  0010A5  48                 	db	72	;'H'
   352  0010A6  4F                 	db	79	;'O'
   353  0010A7  55                 	db	85	;'U'
   354  0010A8  52                 	db	82	;'R'
   355  0010A9  20                 	db	32
   356  0010AA  20                 	db	32
   357  0010AB  20                 	db	32
   358  0010AC  20                 	db	32
   359  0010AD  20                 	db	32
   360  0010AE  20                 	db	32
   361  0010AF  00                 	db	0
   362  0000                     
   363                           ; #config settings
   364  0010B0  00                 	db	0	; dummy byte at the end
   365  0000                     
   366                           	psect	cinit
   367  00227E                     __pcinit:
   368                           	opt callstack 0
   369  00227E                     start_initialization:
   370                           	opt callstack 0
   371  00227E                     __initialization:
   372                           	opt callstack 0
   373                           
   374                           ; Initialize objects allocated to BANK0 (2 bytes)
   375                           ; load TBLPTR registers with __pidataBANK0
   376  00227E  0E48               	movlw	low __pidataBANK0
   377  002280  6EF6               	movwf	tblptrl,c
   378  002282  0E25               	movlw	high __pidataBANK0
   379  002284  6EF7               	movwf	tblptrh,c
   380  002286  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   381  002288  6EF8               	movwf	tblptru,c
   382  00228A  0009               	tblrd		*+	;fetch initializer
   383  00228C  CFF5 F068          	movff	tablat,__pdataBANK0
   384  002290  0009               	tblrd		*+	;fetch initializer
   385  002292  CFF5 F069          	movff	tablat,__pdataBANK0+1
   386                           
   387                           ; Initialize objects allocated to COMRAM (13 bytes)
   388                           ; load TBLPTR registers with __pidataCOMRAM
   389  002296  0E1C               	movlw	low __pidataCOMRAM
   390  002298  6EF6               	movwf	tblptrl,c
   391  00229A  0E25               	movlw	high __pidataCOMRAM
   392  00229C  6EF7               	movwf	tblptrh,c
   393  00229E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   394  0022A0  6EF8               	movwf	tblptru,c
   395  0022A2  EE00  F040         	lfsr	0,__pdataCOMRAM
   396  0022A6  EE10 F00D          	lfsr	1,13
   397  0022AA                     copy_data0:
   398  0022AA  0009               	tblrd		*+
   399  0022AC  CFF5 FFEE          	movff	tablat,postinc0
   400  0022B0  50E5               	movf	postdec1,w,c
   401  0022B2  50E1               	movf	fsr1l,w,c
   402  0022B4  E1FA               	bnz	copy_data0
   403                           
   404                           ; Clear objects allocated to BANK0 (2 bytes)
   405  0022B6  0100               	movlb	0
   406  0022B8  6B67               	clrf	(__pbssBANK0+1)& (0+255),b
   407  0022BA  6B66               	clrf	__pbssBANK0& (0+255),b
   408                           
   409                           ; Clear objects allocated to COMRAM (63 bytes)
   410  0022BC  EE00  F001         	lfsr	0,__pbssCOMRAM
   411  0022C0  0E3F               	movlw	63
   412  0022C2                     clear_0:
   413  0022C2  6AEE               	clrf	postinc0,c
   414  0022C4  06E8               	decf	wreg,f,c
   415  0022C6  E1FD               	bnz	clear_0
   416  0022C8                     end_of_initialization:
   417                           	opt callstack 0
   418  0022C8                     __end_of__initialization:
   419                           	opt callstack 0
   420  0022C8  905A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   421  0022CA  925A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   422  0022CC  0100               	movlb	0
   423  0022CE  EF54  F012         	goto	_main	;jump to C main() function
   424                           
   425                           	psect	bssCOMRAM
   426  000001                     __pbssCOMRAM:
   427                           	opt callstack 0
   428  000001                     SECOND@blinkflag:
   429                           	opt callstack 0
   430  000001                     	ds	2
   431  000003                     SECOND@count:
   432                           	opt callstack 0
   433  000003                     	ds	2
   434  000005                     MINUTE@blinkflag:
   435                           	opt callstack 0
   436  000005                     	ds	2
   437  000007                     MINUTE@count:
   438                           	opt callstack 0
   439  000007                     	ds	2
   440  000009                     _blinkflag:
   441                           	opt callstack 0
   442  000009                     	ds	2
   443  00000B                     _count:
   444                           	opt callstack 0
   445  00000B                     	ds	2
   446  00000D                     _state:
   447                           	opt callstack 0
   448  00000D                     	ds	2
   449  00000F                     _beginFlag:
   450                           	opt callstack 0
   451  00000F                     	ds	2
   452  000011                     _stopWatch_state:
   453                           	opt callstack 0
   454  000011                     	ds	2
   455  000013                     _clock_state:
   456                           	opt callstack 0
   457  000013                     	ds	2
   458  000015                     _access_state:
   459                           	opt callstack 0
   460  000015                     	ds	2
   461  000017                     _sw_minute:
   462                           	opt callstack 0
   463  000017                     	ds	2
   464  000019                     _sw_second:
   465                           	opt callstack 0
   466  000019                     	ds	2
   467  00001B                     _sw_10ms:
   468                           	opt callstack 0
   469  00001B                     	ds	2
   470  00001D                     _count10ms:
   471                           	opt callstack 0
   472  00001D                     	ds	2
   473  00001F                     _second:
   474                           	opt callstack 0
   475  00001F                     	ds	2
   476  000021                     _minute:
   477                           	opt callstack 0
   478  000021                     	ds	2
   479  000023                     _hour:
   480                           	opt callstack 0
   481  000023                     	ds	2
   482  000025                     _countMode:
   483                           	opt callstack 0
   484  000025                     	ds	2
   485  000027                     _countpTime:
   486                           	opt callstack 0
   487  000027                     	ds	2
   488  000029                     _pRB0:
   489                           	opt callstack 0
   490  000029                     	ds	2
   491  00002B                     _thirdReadRB0:
   492                           	opt callstack 0
   493  00002B                     	ds	2
   494  00002D                     _secondReadRB0:
   495                           	opt callstack 0
   496  00002D                     	ds	2
   497  00002F                     _firstReadRB0:
   498                           	opt callstack 0
   499  00002F                     	ds	2
   500  000031                     _thirdReadRA5:
   501                           	opt callstack 0
   502  000031                     	ds	2
   503  000033                     _secondReadRA5:
   504                           	opt callstack 0
   505  000033                     	ds	2
   506  000035                     _firstReadRA5:
   507                           	opt callstack 0
   508  000035                     	ds	2
   509  000037                     _swflag:
   510                           	opt callstack 0
   511  000037                     	ds	1
   512  000038                     _timerflag:
   513                           	opt callstack 0
   514  000038                     	ds	1
   515  000039                     _buttonStateRB0:
   516                           	opt callstack 0
   517  000039                     	ds	1
   518  00003A                     _buttonStateRA5:
   519                           	opt callstack 0
   520  00003A                     	ds	1
   521  00003B                     _normalFlag:
   522                           	opt callstack 0
   523  00003B                     	ds	1
   524  00003C                     _fastMode:
   525                           	opt callstack 0
   526  00003C                     	ds	1
   527  00003D                     _secondSWFlag:
   528                           	opt callstack 0
   529  00003D                     	ds	1
   530  00003E                     _secondFlag:
   531                           	opt callstack 0
   532  00003E                     	ds	1
   533  00003F                     _FastIncreaseFlag:
   534                           	opt callstack 0
   535  00003F                     	ds	1
   536                           
   537                           	psect	dataCOMRAM
   538  000040                     __pdataCOMRAM:
   539                           	opt callstack 0
   540  000040                     _firstTime:
   541                           	opt callstack 0
   542  000040                     	ds	2
   543  000042                     _checkSw:
   544                           	opt callstack 0
   545  000042                     	ds	2
   546  000044                     _checkSc:
   547                           	opt callstack 0
   548  000044                     	ds	2
   549  000046                     _checkMin:
   550                           	opt callstack 0
   551  000046                     	ds	2
   552  000048                     _checkHr:
   553                           	opt callstack 0
   554  000048                     	ds	2
   555  00004A                     _checkClock:
   556                           	opt callstack 0
   557  00004A                     	ds	2
   558  00004C                     _stopWatch_flag:
   559                           	opt callstack 0
   560  00004C                     	ds	1
   561                           
   562                           	psect	bssBANK0
   563  000066                     __pbssBANK0:
   564                           	opt callstack 0
   565  000066                     _sw_preVal:
   566                           	opt callstack 0
   567  000066                     	ds	2
   568                           
   569                           	psect	dataBANK0
   570  000068                     __pdataBANK0:
   571                           	opt callstack 0
   572  000068                     _checkBegin:
   573                           	opt callstack 0
   574  000068                     	ds	2
   575                           
   576                           	psect	cstackBANK0
   577  000060                     __pcstackBANK0:
   578                           	opt callstack 0
   579  000060                     LCDPutInst@ch:
   580                           	opt callstack 0
   581  000060                     ___awdiv@counter:
   582                           	opt callstack 0
   583  000060                     LCDPutStr@ptr:
   584                           	opt callstack 0
   585                           
   586                           ; 2 bytes @ 0x0
   587  000060                     	ds	1
   588  000061                     ___awdiv@sign:
   589                           	opt callstack 0
   590                           
   591                           ; 1 bytes @ 0x1
   592  000061                     	ds	1
   593  000062                     ___awdiv@quotient:
   594                           	opt callstack 0
   595                           
   596                           ; 2 bytes @ 0x2
   597  000062                     	ds	2
   598  000064                     ??_FSM:
   599                           
   600                           ; 1 bytes @ 0x4
   601  000064                     	ds	2
   602                           
   603                           	psect	cstackCOMRAM
   604  00004D                     __pcstackCOMRAM:
   605                           	opt callstack 0
   606  00004D                     ?i2_readButtonRB0:
   607                           	opt callstack 0
   608                           
   609                           ; 2 bytes @ 0x0
   610  00004D                     	ds	2
   611  00004F                     ??i2_readButtonRB0:
   612                           
   613                           ; 1 bytes @ 0x2
   614  00004F                     	ds	1
   615  000050                     ??i2_buttonFSMRB0:
   616                           
   617                           ; 1 bytes @ 0x3
   618  000050                     	ds	2
   619  000052                     ??_BEGIN_delay:
   620  000052                     ?_readButtonRB0:
   621                           	opt callstack 0
   622  000052                     ?_readButtonRA5:
   623                           	opt callstack 0
   624  000052                     ?___awdiv:
   625                           	opt callstack 0
   626  000052                     ?___awmod:
   627                           	opt callstack 0
   628  000052                     SendByteBBSPI@output:
   629                           	opt callstack 0
   630  000052                     ___awdiv@dividend:
   631                           	opt callstack 0
   632  000052                     ___awmod@dividend:
   633                           	opt callstack 0
   634                           
   635                           ; 2 bytes @ 0x5
   636  000052                     	ds	1
   637  000053                     SendByteBBSPI@bitcount:
   638                           	opt callstack 0
   639  000053                     BEGIN_delay@i:
   640                           	opt callstack 0
   641                           
   642                           ; 1 bytes @ 0x6
   643  000053                     	ds	1
   644  000054                     ??_readButtonRB0:
   645  000054                     ??_readButtonRA5:
   646  000054                     SendByteBBSPI@input:
   647                           	opt callstack 0
   648  000054                     ___awdiv@divisor:
   649                           	opt callstack 0
   650  000054                     ___awmod@divisor:
   651                           	opt callstack 0
   652                           
   653                           ; 2 bytes @ 0x7
   654  000054                     	ds	1
   655  000055                     ??_buttonFSMRB0:
   656  000055                     ??_buttonFSMRA5:
   657  000055                     Port_BBSPIInit@port_dir:
   658                           	opt callstack 0
   659  000055                     WritePort_BBSPI@a:
   660                           	opt callstack 0
   661                           
   662                           ; 1 bytes @ 0x8
   663  000055                     	ds	1
   664  000056                     WritePort_BBSPI@port_add:
   665                           	opt callstack 0
   666  000056                     ___awmod@counter:
   667                           	opt callstack 0
   668                           
   669                           ; 1 bytes @ 0x9
   670  000056                     	ds	1
   671  000057                     ??_LCDPutInst:
   672  000057                     LCDPutChar@ch:
   673                           	opt callstack 0
   674  000057                     ___awmod@sign:
   675                           	opt callstack 0
   676                           
   677                           ; 1 bytes @ 0xA
   678  000057                     	ds	1
   679  000058                     
   680                           ; 1 bytes @ 0xB
   681 ;;
   682 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   683 ;;
   684 ;; *************** function _main *****************
   685 ;; Defined at:
   686 ;;		line 74 in file "main.c"
   687 ;; Parameters:    Size  Location     Type
   688 ;;		None
   689 ;; Auto vars:     Size  Location     Type
   690 ;;		None
   691 ;; Return value:  Size  Location     Type
   692 ;;                  1    wreg      void 
   693 ;; Registers used:
   694 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   695 ;; Tracked objects:
   696 ;;		On entry : 0/0
   697 ;;		On exit  : 0/0
   698 ;;		Unchanged: 0/0
   699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   703 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   704 ;;Total ram usage:        0 bytes
   705 ;; Hardware stack levels required when called:   12
   706 ;; This function calls:
   707 ;;		_FSM
   708 ;;		_SYSTEM_Initialize
   709 ;;		_buttonFSMRA5
   710 ;;		_buttonFSMRB0
   711 ;; This function is called by:
   712 ;;		Startup code after reset
   713 ;; This function uses a non-reentrant model
   714 ;;
   715                           
   716                           	psect	text0
   717  0024A8                     __ptext0:
   718                           	opt callstack 0
   719  0024A8                     _main:
   720                           	opt callstack 19
   721  0024A8                     
   722                           ;main.c: 75:     SYSTEM_Initialize();
   723  0024A8  EC7C  F012         	call	_SYSTEM_Initialize	;wreg free
   724  0024AC                     
   725                           ;main.c: 77:     (INTCONbits.GIE = 1);
   726  0024AC  8EF2               	bsf	242,7,c	;volatile
   727  0024AE                     
   728                           ;main.c: 79:     (INTCONbits.PEIE = 1);
   729  0024AE  8CF2               	bsf	242,6,c	;volatile
   730  0024B0                     l4089:
   731                           
   732                           ;main.c: 83:         FSM();
   733  0024B0  EC69  F00E         	call	_FSM	;wreg free
   734  0024B4                     
   735                           ;main.c: 84:         buttonFSMRA5();
   736  0024B4  EC88  F00D         	call	_buttonFSMRA5	;wreg free
   737  0024B8                     
   738                           ;main.c: 85:         buttonFSMRB0();
   739  0024B8  ECAB  F00E         	call	_buttonFSMRB0	;wreg free
   740  0024BC  EF58  F012         	goto	l4089
   741  0024C0  EF07  F000         	goto	start
   742  0024C4                     __end_of_main:
   743                           	opt callstack 0
   744                           
   745 ;; *************** function _buttonFSMRB0 *****************
   746 ;; Defined at:
   747 ;;		line 38 in file "main.c"
   748 ;; Parameters:    Size  Location     Type
   749 ;;		None
   750 ;; Auto vars:     Size  Location     Type
   751 ;;		None
   752 ;; Return value:  Size  Location     Type
   753 ;;                  1    wreg      void 
   754 ;; Registers used:
   755 ;;		wreg, status,2, status,0, cstack
   756 ;; Tracked objects:
   757 ;;		On entry : 0/0
   758 ;;		On exit  : 0/0
   759 ;;		Unchanged: 0/0
   760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   762 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   763 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   764 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   765 ;;Total ram usage:        2 bytes
   766 ;; Hardware stack levels used:    1
   767 ;; Hardware stack levels required when called:    5
   768 ;; This function calls:
   769 ;;		_readButtonRB0
   770 ;; This function is called by:
   771 ;;		_main
   772 ;; This function uses a non-reentrant model
   773 ;;
   774                           
   775                           	psect	text1
   776  001D56                     __ptext1:
   777                           	opt callstack 0
   778  001D56                     _buttonFSMRB0:
   779                           	opt callstack 25
   780  001D56                     
   781                           ;main.c: 39:     switch(buttonStateRB0){
   782  001D56  EFD3  F00E         	goto	l3501
   783  001D5A                     l3489:
   784                           
   785                           ;main.c: 41:             if (readButtonRB0()) {
   786  001D5A  EC16  F010         	call	_readButtonRB0	;wreg free
   787  001D5E  5052               	movf	?_readButtonRB0^0,w,c
   788  001D60  1053               	iorwf	(?_readButtonRB0+1)^0,w,c
   789  001D62  B4D8               	btfsc	status,2,c
   790  001D64  EFB6  F00E         	goto	u1501
   791  001D68  EFB8  F00E         	goto	u1500
   792  001D6C                     u1501:
   793  001D6C  EFE8  F00E         	goto	l1246
   794  001D70                     u1500:
   795  001D70                     
   796                           ;main.c: 42:                 buttonStateRB0 = 1;
   797  001D70  0E01               	movlw	1
   798  001D72  6E39               	movwf	_buttonStateRB0^0,c
   799  001D74                     
   800                           ;main.c: 43:                 stopWatch_state = 1 - stopWatch_state;
   801  001D74  5011               	movf	_stopWatch_state^0,w,c
   802  001D76  0801               	sublw	1
   803  001D78  6E11               	movwf	_stopWatch_state^0,c
   804  001D7A  5012               	movf	(_stopWatch_state+1)^0,w,c
   805  001D7C  A0D8               	btfss	status,0,c
   806  001D7E  2AE8               	incf	wreg,f,c
   807  001D80  0800               	sublw	0
   808  001D82  6E12               	movwf	(_stopWatch_state+1)^0,c
   809  001D84  EFE8  F00E         	goto	l1246
   810  001D88                     l3495:
   811                           
   812                           ;main.c: 47:             if(!readButtonRB0()){
   813  001D88  EC16  F010         	call	_readButtonRB0	;wreg free
   814  001D8C  5052               	movf	?_readButtonRB0^0,w,c
   815  001D8E  1053               	iorwf	(?_readButtonRB0+1)^0,w,c
   816  001D90  A4D8               	btfss	status,2,c
   817  001D92  EFCD  F00E         	goto	u1511
   818  001D96  EFCF  F00E         	goto	u1510
   819  001D9A                     u1511:
   820  001D9A  EFE8  F00E         	goto	l1246
   821  001D9E                     u1510:
   822  001D9E                     
   823                           ;main.c: 48:                 buttonStateRB0 = 0;
   824  001D9E  0E00               	movlw	0
   825  001DA0  6E39               	movwf	_buttonStateRB0^0,c
   826  001DA2  EFE8  F00E         	goto	l1246
   827  001DA6                     l3501:
   828  001DA6  5039               	movf	_buttonStateRB0^0,w,c
   829  001DA8  6E55               	movwf	??_buttonFSMRB0^0,c
   830  001DAA  6A56               	clrf	(??_buttonFSMRB0+1)^0,c
   831                           
   832                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   833                           ; Switch size 1, requested type "simple"
   834                           ; Number of cases is 1, Range of values is 0 to 0
   835                           ; switch strategies available:
   836                           ; Name         Instructions Cycles
   837                           ; simple_byte            4     3 (average)
   838                           ;	Chosen strategy is simple_byte
   839  001DAC  5056               	movf	(??_buttonFSMRB0+1)^0,w,c
   840  001DAE  0A00               	xorlw	0	; case 0
   841  001DB0  B4D8               	btfsc	status,2,c
   842  001DB2  EFDD  F00E         	goto	l4175
   843  001DB6  EFE8  F00E         	goto	l1246
   844  001DBA                     l4175:
   845                           
   846                           ; Switch size 1, requested type "simple"
   847                           ; Number of cases is 2, Range of values is 0 to 1
   848                           ; switch strategies available:
   849                           ; Name         Instructions Cycles
   850                           ; simple_byte            7     4 (average)
   851                           ;	Chosen strategy is simple_byte
   852  001DBA  5055               	movf	??_buttonFSMRB0^0,w,c
   853  001DBC  0A00               	xorlw	0	; case 0
   854  001DBE  B4D8               	btfsc	status,2,c
   855  001DC0  EFAD  F00E         	goto	l3489
   856  001DC4  0A01               	xorlw	1	; case 1
   857  001DC6  B4D8               	btfsc	status,2,c
   858  001DC8  EFC4  F00E         	goto	l3495
   859  001DCC  EFE8  F00E         	goto	l1246
   860  001DD0                     l1246:
   861  001DD0  0012               	return		;funcret
   862  001DD2                     __end_of_buttonFSMRB0:
   863                           	opt callstack 0
   864                           
   865 ;; *************** function _readButtonRB0 *****************
   866 ;; Defined at:
   867 ;;		line 10 in file "Button.c"
   868 ;; Parameters:    Size  Location     Type
   869 ;;		None
   870 ;; Auto vars:     Size  Location     Type
   871 ;;		None
   872 ;; Return value:  Size  Location     Type
   873 ;;                  2    5[COMRAM] int 
   874 ;; Registers used:
   875 ;;		wreg, status,2, status,0
   876 ;; Tracked objects:
   877 ;;		On entry : 0/0
   878 ;;		On exit  : 0/0
   879 ;;		Unchanged: 0/0
   880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   881 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   883 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   884 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   885 ;;Total ram usage:        3 bytes
   886 ;; Hardware stack levels used:    1
   887 ;; Hardware stack levels required when called:    4
   888 ;; This function calls:
   889 ;;		Nothing
   890 ;; This function is called by:
   891 ;;		_buttonFSMRB0
   892 ;; This function uses a non-reentrant model
   893 ;;
   894                           
   895                           	psect	text2
   896  00202C                     __ptext2:
   897                           	opt callstack 0
   898  00202C                     _readButtonRB0:
   899                           	opt callstack 25
   900  00202C                     
   901                           ;Button.c: 11:     firstReadRB0 = secondReadRB0;
   902  00202C  C02D  F02F         	movff	_secondReadRB0,_firstReadRB0
   903  002030  C02E  F030         	movff	_secondReadRB0+1,_firstReadRB0+1
   904                           
   905                           ;Button.c: 12:     secondReadRB0 = thirdReadRB0;
   906  002034  C02B  F02D         	movff	_thirdReadRB0,_secondReadRB0
   907  002038  C02C  F02E         	movff	_thirdReadRB0+1,_secondReadRB0+1
   908  00203C                     
   909                           ;Button.c: 13:     thirdReadRB0 = PORTBbits.RB0;
   910  00203C  B081               	btfsc	129,0,c	;volatile
   911  00203E  EF23  F010         	goto	u1271
   912  002042  EF27  F010         	goto	u1270
   913  002046                     u1271:
   914  002046  6A54               	clrf	??_readButtonRB0^0,c
   915  002048  2A54               	incf	??_readButtonRB0^0,f,c
   916  00204A  EF28  F010         	goto	u1278
   917  00204E                     u1270:
   918  00204E  6A54               	clrf	??_readButtonRB0^0,c
   919  002050                     u1278:
   920  002050  5054               	movf	??_readButtonRB0^0,w,c
   921  002052  6E2B               	movwf	_thirdReadRB0^0,c
   922  002054  6A2C               	clrf	(_thirdReadRB0+1)^0,c
   923  002056                     
   924                           ;Button.c: 14:     if (firstReadRB0 == thirdReadRB0 )
   925  002056  502B               	movf	_thirdReadRB0^0,w,c
   926  002058  182F               	xorwf	_firstReadRB0^0,w,c
   927  00205A  E107               	bnz	u1281
   928  00205C  502C               	movf	(_thirdReadRB0+1)^0,w,c
   929  00205E  1830               	xorwf	(_firstReadRB0+1)^0,w,c
   930  002060  A4D8               	btfss	status,2,c
   931  002062  EF35  F010         	goto	u1281
   932  002066  EF37  F010         	goto	u1280
   933  00206A                     u1281:
   934  00206A  EF46  F010         	goto	l3307
   935  00206E                     u1280:
   936  00206E                     
   937                           ;Button.c: 15:         if (firstReadRB0 == 0) return 1;
   938  00206E  502F               	movf	_firstReadRB0^0,w,c
   939  002070  1030               	iorwf	(_firstReadRB0+1)^0,w,c
   940  002072  A4D8               	btfss	status,2,c
   941  002074  EF3E  F010         	goto	u1291
   942  002078  EF40  F010         	goto	u1290
   943  00207C                     u1291:
   944  00207C  EF46  F010         	goto	l3307
   945  002080                     u1290:
   946  002080  0E00               	movlw	0
   947  002082  6E53               	movwf	(?_readButtonRB0+1)^0,c
   948  002084  0E01               	movlw	1
   949  002086  6E52               	movwf	?_readButtonRB0^0,c
   950  002088  EF4A  F010         	goto	l575
   951  00208C                     l3307:
   952                           
   953                           ;Button.c: 16:     return 0;
   954  00208C  0E00               	movlw	0
   955  00208E  6E53               	movwf	(?_readButtonRB0+1)^0,c
   956  002090  0E00               	movlw	0
   957  002092  6E52               	movwf	?_readButtonRB0^0,c
   958  002094                     l575:
   959  002094  0012               	return		;funcret
   960  002096                     __end_of_readButtonRB0:
   961                           	opt callstack 0
   962                           
   963 ;; *************** function _buttonFSMRA5 *****************
   964 ;; Defined at:
   965 ;;		line 18 in file "main.c"
   966 ;; Parameters:    Size  Location     Type
   967 ;;		None
   968 ;; Auto vars:     Size  Location     Type
   969 ;;		None
   970 ;; Return value:  Size  Location     Type
   971 ;;                  1    wreg      void 
   972 ;; Registers used:
   973 ;;		wreg, status,2, status,0, cstack
   974 ;; Tracked objects:
   975 ;;		On entry : 0/0
   976 ;;		On exit  : 0/0
   977 ;;		Unchanged: 0/0
   978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   980 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   981 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   982 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   983 ;;Total ram usage:        2 bytes
   984 ;; Hardware stack levels used:    1
   985 ;; Hardware stack levels required when called:    5
   986 ;; This function calls:
   987 ;;		_readButtonRA5
   988 ;; This function is called by:
   989 ;;		_main
   990 ;; This function uses a non-reentrant model
   991 ;;
   992                           
   993                           	psect	text3
   994  001B10                     __ptext3:
   995                           	opt callstack 0
   996  001B10                     _buttonFSMRA5:
   997                           	opt callstack 25
   998  001B10                     
   999                           ;main.c: 19:     switch(buttonStateRA5){
  1000  001B10  EFBF  F00D         	goto	l3527
  1001  001B14                     l3509:
  1002                           
  1003                           ;main.c: 21:             if (readButtonRA5()) {
  1004  001B14  EC4B  F010         	call	_readButtonRA5	;wreg free
  1005  001B18  5052               	movf	?_readButtonRA5^0,w,c
  1006  001B1A  1053               	iorwf	(?_readButtonRA5+1)^0,w,c
  1007  001B1C  B4D8               	btfsc	status,2,c
  1008  001B1E  EF93  F00D         	goto	u1521
  1009  001B22  EF95  F00D         	goto	u1520
  1010  001B26                     u1521:
  1011  001B26  EFD4  F00D         	goto	l1236
  1012  001B2A                     u1520:
  1013  001B2A                     
  1014                           ;main.c: 22:                 buttonStateRA5 = 1;
  1015  001B2A  0E01               	movlw	1
  1016  001B2C  6E3A               	movwf	_buttonStateRA5^0,c
  1017                           
  1018                           ;main.c: 23:                 access_state = 0;
  1019  001B2E  0E00               	movlw	0
  1020  001B30  6E16               	movwf	(_access_state+1)^0,c
  1021  001B32  0E00               	movlw	0
  1022  001B34  6E15               	movwf	_access_state^0,c
  1023  001B36                     
  1024                           ;main.c: 24:                 LATD = state;
  1025  001B36  C00D  FF8C         	movff	_state,3980	;volatile
  1026  001B3A                     
  1027                           ;main.c: 25:                 state++;
  1028  001B3A  4A0D               	infsnz	_state^0,f,c
  1029  001B3C  2A0E               	incf	(_state+1)^0,f,c
  1030  001B3E                     
  1031                           ;main.c: 26:                 if (state > 5) state = 1;
  1032  001B3E  500E               	movf	(_state+1)^0,w,c
  1033  001B40  E109               	bnz	u1530
  1034  001B42  0E06               	movlw	6
  1035  001B44  5C0D               	subwf	_state^0,w,c
  1036  001B46  A0D8               	btfss	status,0,c
  1037  001B48  EFA8  F00D         	goto	u1531
  1038  001B4C  EFAA  F00D         	goto	u1530
  1039  001B50                     u1531:
  1040  001B50  EFD4  F00D         	goto	l1236
  1041  001B54                     u1530:
  1042  001B54  0E00               	movlw	0
  1043  001B56  6E0E               	movwf	(_state+1)^0,c
  1044  001B58  0E01               	movlw	1
  1045  001B5A  6E0D               	movwf	_state^0,c
  1046  001B5C  EFD4  F00D         	goto	l1236
  1047  001B60                     l3521:
  1048                           
  1049                           ;main.c: 30:             if(!readButtonRA5()){
  1050  001B60  EC4B  F010         	call	_readButtonRA5	;wreg free
  1051  001B64  5052               	movf	?_readButtonRA5^0,w,c
  1052  001B66  1053               	iorwf	(?_readButtonRA5+1)^0,w,c
  1053  001B68  A4D8               	btfss	status,2,c
  1054  001B6A  EFB9  F00D         	goto	u1541
  1055  001B6E  EFBB  F00D         	goto	u1540
  1056  001B72                     u1541:
  1057  001B72  EFD4  F00D         	goto	l1236
  1058  001B76                     u1540:
  1059  001B76                     
  1060                           ;main.c: 31:                 buttonStateRA5 = 0;
  1061  001B76  0E00               	movlw	0
  1062  001B78  6E3A               	movwf	_buttonStateRA5^0,c
  1063  001B7A  EFD4  F00D         	goto	l1236
  1064  001B7E                     l3527:
  1065  001B7E  503A               	movf	_buttonStateRA5^0,w,c
  1066  001B80  6E55               	movwf	??_buttonFSMRA5^0,c
  1067  001B82  6A56               	clrf	(??_buttonFSMRA5+1)^0,c
  1068                           
  1069                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1070                           ; Switch size 1, requested type "simple"
  1071                           ; Number of cases is 1, Range of values is 0 to 0
  1072                           ; switch strategies available:
  1073                           ; Name         Instructions Cycles
  1074                           ; simple_byte            4     3 (average)
  1075                           ;	Chosen strategy is simple_byte
  1076  001B84  5056               	movf	(??_buttonFSMRA5+1)^0,w,c
  1077  001B86  0A00               	xorlw	0	; case 0
  1078  001B88  B4D8               	btfsc	status,2,c
  1079  001B8A  EFC9  F00D         	goto	l4177
  1080  001B8E  EFD4  F00D         	goto	l1236
  1081  001B92                     l4177:
  1082                           
  1083                           ; Switch size 1, requested type "simple"
  1084                           ; Number of cases is 2, Range of values is 0 to 1
  1085                           ; switch strategies available:
  1086                           ; Name         Instructions Cycles
  1087                           ; simple_byte            7     4 (average)
  1088                           ;	Chosen strategy is simple_byte
  1089  001B92  5055               	movf	??_buttonFSMRA5^0,w,c
  1090  001B94  0A00               	xorlw	0	; case 0
  1091  001B96  B4D8               	btfsc	status,2,c
  1092  001B98  EF8A  F00D         	goto	l3509
  1093  001B9C  0A01               	xorlw	1	; case 1
  1094  001B9E  B4D8               	btfsc	status,2,c
  1095  001BA0  EFB0  F00D         	goto	l3521
  1096  001BA4  EFD4  F00D         	goto	l1236
  1097  001BA8                     l1236:
  1098  001BA8  0012               	return		;funcret
  1099  001BAA                     __end_of_buttonFSMRA5:
  1100                           	opt callstack 0
  1101                           
  1102 ;; *************** function _readButtonRA5 *****************
  1103 ;; Defined at:
  1104 ;;		line 18 in file "Button.c"
  1105 ;; Parameters:    Size  Location     Type
  1106 ;;		None
  1107 ;; Auto vars:     Size  Location     Type
  1108 ;;		None
  1109 ;; Return value:  Size  Location     Type
  1110 ;;                  2    5[COMRAM] int 
  1111 ;; Registers used:
  1112 ;;		wreg, status,2, status,0
  1113 ;; Tracked objects:
  1114 ;;		On entry : 0/0
  1115 ;;		On exit  : 0/0
  1116 ;;		Unchanged: 0/0
  1117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1118 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1119 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1120 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1121 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1122 ;;Total ram usage:        3 bytes
  1123 ;; Hardware stack levels used:    1
  1124 ;; Hardware stack levels required when called:    4
  1125 ;; This function calls:
  1126 ;;		Nothing
  1127 ;; This function is called by:
  1128 ;;		_buttonFSMRA5
  1129 ;; This function uses a non-reentrant model
  1130 ;;
  1131                           
  1132                           	psect	text4
  1133  002096                     __ptext4:
  1134                           	opt callstack 0
  1135  002096                     _readButtonRA5:
  1136                           	opt callstack 25
  1137  002096                     
  1138                           ;Button.c: 19:     firstReadRA5 = secondReadRA5;
  1139  002096  C033  F035         	movff	_secondReadRA5,_firstReadRA5
  1140  00209A  C034  F036         	movff	_secondReadRA5+1,_firstReadRA5+1
  1141                           
  1142                           ;Button.c: 20:     secondReadRA5 = thirdReadRA5;
  1143  00209E  C031  F033         	movff	_thirdReadRA5,_secondReadRA5
  1144  0020A2  C032  F034         	movff	_thirdReadRA5+1,_secondReadRA5+1
  1145  0020A6                     
  1146                           ;Button.c: 21:     thirdReadRA5 = PORTAbits.RA5;
  1147  0020A6  BA80               	btfsc	128,5,c	;volatile
  1148  0020A8  EF58  F010         	goto	u1301
  1149  0020AC  EF5C  F010         	goto	u1300
  1150  0020B0                     u1301:
  1151  0020B0  6A54               	clrf	??_readButtonRA5^0,c
  1152  0020B2  2A54               	incf	??_readButtonRA5^0,f,c
  1153  0020B4  EF5D  F010         	goto	u1308
  1154  0020B8                     u1300:
  1155  0020B8  6A54               	clrf	??_readButtonRA5^0,c
  1156  0020BA                     u1308:
  1157  0020BA  5054               	movf	??_readButtonRA5^0,w,c
  1158  0020BC  6E31               	movwf	_thirdReadRA5^0,c
  1159  0020BE  6A32               	clrf	(_thirdReadRA5+1)^0,c
  1160  0020C0                     
  1161                           ;Button.c: 22:     if (firstReadRA5 == thirdReadRA5)
  1162  0020C0  5031               	movf	_thirdReadRA5^0,w,c
  1163  0020C2  1835               	xorwf	_firstReadRA5^0,w,c
  1164  0020C4  E107               	bnz	u1311
  1165  0020C6  5032               	movf	(_thirdReadRA5+1)^0,w,c
  1166  0020C8  1836               	xorwf	(_firstReadRA5+1)^0,w,c
  1167  0020CA  A4D8               	btfss	status,2,c
  1168  0020CC  EF6A  F010         	goto	u1311
  1169  0020D0  EF6C  F010         	goto	u1310
  1170  0020D4                     u1311:
  1171  0020D4  EF7B  F010         	goto	l3323
  1172  0020D8                     u1310:
  1173  0020D8                     
  1174                           ;Button.c: 23:         if (firstReadRA5 == 0) return 1;
  1175  0020D8  5035               	movf	_firstReadRA5^0,w,c
  1176  0020DA  1036               	iorwf	(_firstReadRA5+1)^0,w,c
  1177  0020DC  A4D8               	btfss	status,2,c
  1178  0020DE  EF73  F010         	goto	u1321
  1179  0020E2  EF75  F010         	goto	u1320
  1180  0020E6                     u1321:
  1181  0020E6  EF7B  F010         	goto	l3323
  1182  0020EA                     u1320:
  1183  0020EA  0E00               	movlw	0
  1184  0020EC  6E53               	movwf	(?_readButtonRA5+1)^0,c
  1185  0020EE  0E01               	movlw	1
  1186  0020F0  6E52               	movwf	?_readButtonRA5^0,c
  1187  0020F2  EF7F  F010         	goto	l580
  1188  0020F6                     l3323:
  1189                           
  1190                           ;Button.c: 24:     return 0;
  1191  0020F6  0E00               	movlw	0
  1192  0020F8  6E53               	movwf	(?_readButtonRA5+1)^0,c
  1193  0020FA  0E00               	movlw	0
  1194  0020FC  6E52               	movwf	?_readButtonRA5^0,c
  1195  0020FE                     l580:
  1196  0020FE  0012               	return		;funcret
  1197  002100                     __end_of_readButtonRA5:
  1198                           	opt callstack 0
  1199                           
  1200 ;; *************** function _SYSTEM_Initialize *****************
  1201 ;; Defined at:
  1202 ;;		line 74 in file "mcc.c"
  1203 ;; Parameters:    Size  Location     Type
  1204 ;;		None
  1205 ;; Auto vars:     Size  Location     Type
  1206 ;;		None
  1207 ;; Return value:  Size  Location     Type
  1208 ;;                  1    wreg      void 
  1209 ;; Registers used:
  1210 ;;		wreg, status,2, cstack
  1211 ;; Tracked objects:
  1212 ;;		On entry : 0/0
  1213 ;;		On exit  : 0/0
  1214 ;;		Unchanged: 0/0
  1215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1217 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1219 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1220 ;;Total ram usage:        0 bytes
  1221 ;; Hardware stack levels used:    1
  1222 ;; Hardware stack levels required when called:    6
  1223 ;; This function calls:
  1224 ;;		_INTERRUPT_Initialize
  1225 ;;		_OSCILLATOR_Initialize
  1226 ;;		_PIN_MANAGER_Initialize
  1227 ;;		_TMR1_Initialize
  1228 ;; This function is called by:
  1229 ;;		_main
  1230 ;; This function uses a non-reentrant model
  1231 ;;
  1232                           
  1233                           	psect	text5
  1234  0024F8                     __ptext5:
  1235                           	opt callstack 0
  1236  0024F8                     _SYSTEM_Initialize:
  1237                           	opt callstack 24
  1238  0024F8                     
  1239                           ;mcc.c: 76:     OSCILLATOR_Initialize();
  1240  0024F8  EC95  F012         	call	_OSCILLATOR_Initialize	;wreg free
  1241                           
  1242                           ;mcc.c: 77:     PIN_MANAGER_Initialize();
  1243  0024FC  ECF1  F011         	call	_PIN_MANAGER_Initialize	;wreg free
  1244                           
  1245                           ;mcc.c: 78:     INTERRUPT_Initialize();
  1246  002500  EC9A  F012         	call	_INTERRUPT_Initialize	;wreg free
  1247                           
  1248                           ;mcc.c: 80:     TMR1_Initialize();
  1249  002504  EC45  F012         	call	_TMR1_Initialize	;wreg free
  1250  002508  0012               	return		;funcret
  1251  00250A                     __end_of_SYSTEM_Initialize:
  1252                           	opt callstack 0
  1253                           
  1254 ;; *************** function _TMR1_Initialize *****************
  1255 ;; Defined at:
  1256 ;;		line 21 in file "tmr1.c"
  1257 ;; Parameters:    Size  Location     Type
  1258 ;;		None
  1259 ;; Auto vars:     Size  Location     Type
  1260 ;;		None
  1261 ;; Return value:  Size  Location     Type
  1262 ;;                  1    wreg      void 
  1263 ;; Registers used:
  1264 ;;		wreg, status,2, cstack
  1265 ;; Tracked objects:
  1266 ;;		On entry : 0/0
  1267 ;;		On exit  : 0/0
  1268 ;;		Unchanged: 0/0
  1269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1271 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1273 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1274 ;;Total ram usage:        0 bytes
  1275 ;; Hardware stack levels used:    1
  1276 ;; Hardware stack levels required when called:    5
  1277 ;; This function calls:
  1278 ;;		_TMR1_StartTimer
  1279 ;; This function is called by:
  1280 ;;		_SYSTEM_Initialize
  1281 ;; This function uses a non-reentrant model
  1282 ;;
  1283                           
  1284                           	psect	text6
  1285  00248A                     __ptext6:
  1286                           	opt callstack 0
  1287  00248A                     _TMR1_Initialize:
  1288                           	opt callstack 24
  1289  00248A                     
  1290                           ;tmr1.c: 26:     T1CON = 0x8F;
  1291  00248A  0E8F               	movlw	143
  1292  00248C  6ECD               	movwf	205,c	;volatile
  1293                           
  1294                           ;tmr1.c: 32:     TMR1H = 0xFE;
  1295  00248E  0EFE               	movlw	254
  1296  002490  6ECF               	movwf	207,c	;volatile
  1297                           
  1298                           ;tmr1.c: 35:     TMR1L = 0xD3;
  1299  002492  0ED3               	movlw	211
  1300  002494  6ECE               	movwf	206,c	;volatile
  1301  002496                     
  1302                           ;tmr1.c: 38:     timer1ReloadVal=TMR1;
  1303  002496  CFCE F058          	movff	4046,_timer1ReloadVal	;volatile
  1304  00249A  CFCF F059          	movff	4047,_timer1ReloadVal+1	;volatile
  1305  00249E                     
  1306                           ;tmr1.c: 41:     PIR1bits.TMR1IF = 0;
  1307  00249E  909E               	bcf	158,0,c	;volatile
  1308  0024A0                     
  1309                           ;tmr1.c: 44:     PIE1bits.TMR1IE = 1;
  1310  0024A0  809D               	bsf	157,0,c	;volatile
  1311  0024A2                     
  1312                           ;tmr1.c: 47:     TMR1_StartTimer();
  1313  0024A2  ECA2  F012         	call	_TMR1_StartTimer	;wreg free
  1314  0024A6  0012               	return		;funcret
  1315  0024A8                     __end_of_TMR1_Initialize:
  1316                           	opt callstack 0
  1317                           
  1318 ;; *************** function _TMR1_StartTimer *****************
  1319 ;; Defined at:
  1320 ;;		line 50 in file "tmr1.c"
  1321 ;; Parameters:    Size  Location     Type
  1322 ;;		None
  1323 ;; Auto vars:     Size  Location     Type
  1324 ;;		None
  1325 ;; Return value:  Size  Location     Type
  1326 ;;                  1    wreg      void 
  1327 ;; Registers used:
  1328 ;;		None
  1329 ;; Tracked objects:
  1330 ;;		On entry : 0/0
  1331 ;;		On exit  : 0/0
  1332 ;;		Unchanged: 0/0
  1333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1337 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1338 ;;Total ram usage:        0 bytes
  1339 ;; Hardware stack levels used:    1
  1340 ;; Hardware stack levels required when called:    4
  1341 ;; This function calls:
  1342 ;;		Nothing
  1343 ;; This function is called by:
  1344 ;;		_TMR1_Initialize
  1345 ;; This function uses a non-reentrant model
  1346 ;;
  1347                           
  1348                           	psect	text7
  1349  002544                     __ptext7:
  1350                           	opt callstack 0
  1351  002544                     _TMR1_StartTimer:
  1352                           	opt callstack 24
  1353  002544                     
  1354                           ;tmr1.c: 53:     T1CONbits.TMR1ON = 1;
  1355  002544  80CD               	bsf	205,0,c	;volatile
  1356  002546  0012               	return		;funcret
  1357  002548                     __end_of_TMR1_StartTimer:
  1358                           	opt callstack 0
  1359                           
  1360 ;; *************** function _PIN_MANAGER_Initialize *****************
  1361 ;; Defined at:
  1362 ;;		line 12 in file "pin.c"
  1363 ;; Parameters:    Size  Location     Type
  1364 ;;		None
  1365 ;; Auto vars:     Size  Location     Type
  1366 ;;		None
  1367 ;; Return value:  Size  Location     Type
  1368 ;;                  1    wreg      void 
  1369 ;; Registers used:
  1370 ;;		wreg, status,2
  1371 ;; Tracked objects:
  1372 ;;		On entry : 0/0
  1373 ;;		On exit  : 0/0
  1374 ;;		Unchanged: 0/0
  1375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1376 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1377 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1379 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1380 ;;Total ram usage:        0 bytes
  1381 ;; Hardware stack levels used:    1
  1382 ;; Hardware stack levels required when called:    4
  1383 ;; This function calls:
  1384 ;;		Nothing
  1385 ;; This function is called by:
  1386 ;;		_SYSTEM_Initialize
  1387 ;; This function uses a non-reentrant model
  1388 ;;
  1389                           
  1390                           	psect	text8
  1391  0023E2                     __ptext8:
  1392                           	opt callstack 0
  1393  0023E2                     _PIN_MANAGER_Initialize:
  1394                           	opt callstack 25
  1395  0023E2                     
  1396                           ;pin.c: 15:     LATA = 0x00;
  1397  0023E2  0E00               	movlw	0
  1398  0023E4  6E89               	movwf	137,c	;volatile
  1399                           
  1400                           ;pin.c: 16:     TRISA = 0xF3;
  1401  0023E6  0EF3               	movlw	243
  1402  0023E8  6E92               	movwf	146,c	;volatile
  1403                           
  1404                           ;pin.c: 19:     LATB = 0x00;
  1405  0023EA  0E00               	movlw	0
  1406  0023EC  6E8A               	movwf	138,c	;volatile
  1407  0023EE                     
  1408                           ;pin.c: 20:     TRISB = 0xFF;
  1409  0023EE  6893               	setf	147,c	;volatile
  1410                           
  1411                           ;pin.c: 24:     LATC = 0x00;
  1412  0023F0  0E00               	movlw	0
  1413  0023F2  6E8B               	movwf	139,c	;volatile
  1414                           
  1415                           ;pin.c: 25:     TRISC = 0xD7;
  1416  0023F4  0ED7               	movlw	215
  1417  0023F6  6E94               	movwf	148,c	;volatile
  1418                           
  1419                           ;pin.c: 28:     LATD = 0x00;
  1420  0023F8  0E00               	movlw	0
  1421  0023FA  6E8C               	movwf	140,c	;volatile
  1422                           
  1423                           ;pin.c: 29:     TRISD = 0x00;
  1424  0023FC  0E00               	movlw	0
  1425  0023FE  6E95               	movwf	149,c	;volatile
  1426                           
  1427                           ;pin.c: 32:     LATE = 0x00;
  1428  002400  0E00               	movlw	0
  1429  002402  6E8D               	movwf	141,c	;volatile
  1430                           
  1431                           ;pin.c: 33:     TRISE = 0x07;
  1432  002404  0E07               	movlw	7
  1433  002406  6E96               	movwf	150,c	;volatile
  1434  002408                     
  1435                           ;pin.c: 36:     TRISAbits.TRISA5 = 1;
  1436  002408  8A92               	bsf	146,5,c	;volatile
  1437  00240A                     
  1438                           ;pin.c: 37:     TRISBbits.TRISB0 = 1;
  1439  00240A  8093               	bsf	147,0,c	;volatile
  1440  00240C                     
  1441                           ;pin.c: 38:     INTCON2bits.nRBPU = 0x01;
  1442  00240C  8EF1               	bsf	241,7,c	;volatile
  1443  00240E  0012               	return		;funcret
  1444  002410                     __end_of_PIN_MANAGER_Initialize:
  1445                           	opt callstack 0
  1446                           
  1447 ;; *************** function _OSCILLATOR_Initialize *****************
  1448 ;; Defined at:
  1449 ;;		line 83 in file "mcc.c"
  1450 ;; Parameters:    Size  Location     Type
  1451 ;;		None
  1452 ;; Auto vars:     Size  Location     Type
  1453 ;;		None
  1454 ;; Return value:  Size  Location     Type
  1455 ;;                  1    wreg      void 
  1456 ;; Registers used:
  1457 ;;		wreg, status,2
  1458 ;; Tracked objects:
  1459 ;;		On entry : 0/0
  1460 ;;		On exit  : 0/0
  1461 ;;		Unchanged: 0/0
  1462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1464 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1466 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1467 ;;Total ram usage:        0 bytes
  1468 ;; Hardware stack levels used:    1
  1469 ;; Hardware stack levels required when called:    4
  1470 ;; This function calls:
  1471 ;;		Nothing
  1472 ;; This function is called by:
  1473 ;;		_SYSTEM_Initialize
  1474 ;; This function uses a non-reentrant model
  1475 ;;
  1476                           
  1477                           	psect	text9
  1478  00252A                     __ptext9:
  1479                           	opt callstack 0
  1480  00252A                     _OSCILLATOR_Initialize:
  1481                           	opt callstack 25
  1482  00252A                     
  1483                           ;mcc.c: 86:     OSCCON = 0x30;
  1484  00252A  0E30               	movlw	48
  1485  00252C  6ED3               	movwf	211,c	;volatile
  1486                           
  1487                           ;mcc.c: 89:     OSCTUNE = 0x40;
  1488  00252E  0E40               	movlw	64
  1489  002530  6E9B               	movwf	155,c	;volatile
  1490  002532  0012               	return		;funcret
  1491  002534                     __end_of_OSCILLATOR_Initialize:
  1492                           	opt callstack 0
  1493                           
  1494 ;; *************** function _INTERRUPT_Initialize *****************
  1495 ;; Defined at:
  1496 ;;		line 10 in file "interrupt.c"
  1497 ;; Parameters:    Size  Location     Type
  1498 ;;		None
  1499 ;; Auto vars:     Size  Location     Type
  1500 ;;		None
  1501 ;; Return value:  Size  Location     Type
  1502 ;;                  1    wreg      void 
  1503 ;; Registers used:
  1504 ;;		wreg, status,2
  1505 ;; Tracked objects:
  1506 ;;		On entry : 0/0
  1507 ;;		On exit  : 0/0
  1508 ;;		Unchanged: 0/0
  1509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1511 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1513 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1514 ;;Total ram usage:        0 bytes
  1515 ;; Hardware stack levels used:    1
  1516 ;; Hardware stack levels required when called:    4
  1517 ;; This function calls:
  1518 ;;		Nothing
  1519 ;; This function is called by:
  1520 ;;		_SYSTEM_Initialize
  1521 ;; This function uses a non-reentrant model
  1522 ;;
  1523                           
  1524                           	psect	text10
  1525  002534                     __ptext10:
  1526                           	opt callstack 0
  1527  002534                     _INTERRUPT_Initialize:
  1528                           	opt callstack 25
  1529  002534                     
  1530                           ;interrupt.c: 12:     RCONbits.IPEN = 0;
  1531  002534  9ED0               	bcf	208,7,c	;volatile
  1532  002536                     
  1533                           ;interrupt.c: 13:     ADCON1 = 0x0F;
  1534  002536  0E0F               	movlw	15
  1535  002538  6EC1               	movwf	193,c	;volatile
  1536  00253A                     
  1537                           ;interrupt.c: 14:     IPR1bits.TMR1IP = 0;
  1538  00253A  909F               	bcf	159,0,c	;volatile
  1539  00253C  0012               	return		;funcret
  1540  00253E                     __end_of_INTERRUPT_Initialize:
  1541                           	opt callstack 0
  1542                           
  1543 ;; *************** function _FSM *****************
  1544 ;; Defined at:
  1545 ;;		line 55 in file "main.c"
  1546 ;; Parameters:    Size  Location     Type
  1547 ;;		None
  1548 ;; Auto vars:     Size  Location     Type
  1549 ;;		None
  1550 ;; Return value:  Size  Location     Type
  1551 ;;                  1    wreg      void 
  1552 ;; Registers used:
  1553 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1554 ;; Tracked objects:
  1555 ;;		On entry : 0/0
  1556 ;;		On exit  : 0/0
  1557 ;;		Unchanged: 0/0
  1558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1560 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1561 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1562 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1563 ;;Total ram usage:        2 bytes
  1564 ;; Hardware stack levels used:    1
  1565 ;; Hardware stack levels required when called:   11
  1566 ;; This function calls:
  1567 ;;		_fBEGIN
  1568 ;;		_fCLOCK
  1569 ;;		_fHOUR
  1570 ;;		_fMINUTE
  1571 ;;		_fSECOND
  1572 ;;		_fSW
  1573 ;; This function is called by:
  1574 ;;		_main
  1575 ;; This function uses a non-reentrant model
  1576 ;;
  1577                           
  1578                           	psect	text11
  1579  001CD2                     __ptext11:
  1580                           	opt callstack 0
  1581  001CD2                     _FSM:
  1582                           	opt callstack 19
  1583  001CD2                     
  1584                           ;main.c: 57:     switch (state){
  1585  001CD2  EF83  F00E         	goto	l4077
  1586  001CD6                     l4063:
  1587                           
  1588                           ; BSR set to: 0
  1589  001CD6  EC9F  F012         	call	_fBEGIN	;wreg free
  1590                           
  1591                           ;main.c: 59:             break;
  1592  001CDA  EFAA  F00E         	goto	l1257
  1593  001CDE                     l4065:
  1594                           
  1595                           ; BSR set to: 0
  1596  001CDE  ECD5  F00D         	call	_fCLOCK	;wreg free
  1597                           
  1598                           ;main.c: 61:             break;
  1599  001CE2  EFAA  F00E         	goto	l1257
  1600  001CE6                     l4067:
  1601                           
  1602                           ; BSR set to: 0
  1603  001CE6  ECA1  F00F         	call	_fHOUR	;wreg free
  1604                           
  1605                           ;main.c: 63:             break;
  1606  001CEA  EFAA  F00E         	goto	l1257
  1607  001CEE                     l4069:
  1608                           
  1609                           ; BSR set to: 0
  1610  001CEE  EC64  F00F         	call	_fMINUTE	;wreg free
  1611                           
  1612                           ;main.c: 65:             break;
  1613  001CF2  EFAA  F00E         	goto	l1257
  1614  001CF6                     l4071:
  1615                           
  1616                           ; BSR set to: 0
  1617  001CF6  EC27  F00F         	call	_fSECOND	;wreg free
  1618                           
  1619                           ;main.c: 67:             break;
  1620  001CFA  EFAA  F00E         	goto	l1257
  1621  001CFE                     l4073:
  1622                           
  1623                           ; BSR set to: 0
  1624  001CFE  EC38  F00D         	call	_fSW	;wreg free
  1625                           
  1626                           ;main.c: 69:            break;
  1627  001D02  EFAA  F00E         	goto	l1257
  1628  001D06                     l4077:
  1629  001D06  C00D  F064         	movff	_state,??_FSM
  1630  001D0A  C00E  F065         	movff	_state+1,??_FSM+1
  1631                           
  1632                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1633                           ; Switch size 1, requested type "simple"
  1634                           ; Number of cases is 1, Range of values is 0 to 0
  1635                           ; switch strategies available:
  1636                           ; Name         Instructions Cycles
  1637                           ; simple_byte            4     3 (average)
  1638                           ;	Chosen strategy is simple_byte
  1639  001D0E  0100               	movlb	0	; () banked
  1640  001D10  5165               	movf	(??_FSM+1)& (0+255),w,b
  1641  001D12  0A00               	xorlw	0	; case 0
  1642  001D14  B4D8               	btfsc	status,2,c
  1643  001D16  EF8F  F00E         	goto	l4179
  1644  001D1A  EFAA  F00E         	goto	l1257
  1645  001D1E                     l4179:
  1646                           
  1647                           ; BSR set to: 0
  1648                           ; Switch size 1, requested type "simple"
  1649                           ; Number of cases is 6, Range of values is 0 to 5
  1650                           ; switch strategies available:
  1651                           ; Name         Instructions Cycles
  1652                           ; simple_byte           19    10 (average)
  1653                           ;	Chosen strategy is simple_byte
  1654  001D1E  5164               	movf	??_FSM& (0+255),w,b
  1655  001D20  0A00               	xorlw	0	; case 0
  1656  001D22  B4D8               	btfsc	status,2,c
  1657  001D24  EF6B  F00E         	goto	l4063
  1658  001D28  0A01               	xorlw	1	; case 1
  1659  001D2A  B4D8               	btfsc	status,2,c
  1660  001D2C  EF6F  F00E         	goto	l4065
  1661  001D30  0A03               	xorlw	3	; case 2
  1662  001D32  B4D8               	btfsc	status,2,c
  1663  001D34  EF73  F00E         	goto	l4067
  1664  001D38  0A01               	xorlw	1	; case 3
  1665  001D3A  B4D8               	btfsc	status,2,c
  1666  001D3C  EF77  F00E         	goto	l4069
  1667  001D40  0A07               	xorlw	7	; case 4
  1668  001D42  B4D8               	btfsc	status,2,c
  1669  001D44  EF7B  F00E         	goto	l4071
  1670  001D48  0A01               	xorlw	1	; case 5
  1671  001D4A  B4D8               	btfsc	status,2,c
  1672  001D4C  EF7F  F00E         	goto	l4073
  1673  001D50  EFAA  F00E         	goto	l1257
  1674  001D54                     l1257:
  1675  001D54  0012               	return		;funcret
  1676  001D56                     __end_of_FSM:
  1677                           	opt callstack 0
  1678                           
  1679 ;; *************** function _fSW *****************
  1680 ;; Defined at:
  1681 ;;		line 77 in file "SW.c"
  1682 ;; Parameters:    Size  Location     Type
  1683 ;;		None
  1684 ;; Auto vars:     Size  Location     Type
  1685 ;;		None
  1686 ;; Return value:  Size  Location     Type
  1687 ;;                  1    wreg      void 
  1688 ;; Registers used:
  1689 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1690 ;; Tracked objects:
  1691 ;;		On entry : 0/0
  1692 ;;		On exit  : 0/0
  1693 ;;		Unchanged: 0/0
  1694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1698 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1699 ;;Total ram usage:        0 bytes
  1700 ;; Hardware stack levels used:    1
  1701 ;; Hardware stack levels required when called:    9
  1702 ;; This function calls:
  1703 ;;		_LCDPutInst
  1704 ;;		_LCDPutStr
  1705 ;;		_count_Clock_SW
  1706 ;;		_disp_SW
  1707 ;; This function is called by:
  1708 ;;		_FSM
  1709 ;; This function uses a non-reentrant model
  1710 ;;
  1711                           
  1712                           	psect	text12
  1713  001A70                     __ptext12:
  1714                           	opt callstack 0
  1715  001A70                     _fSW:
  1716                           	opt callstack 20
  1717  001A70                     
  1718                           ;SW.c: 79:     if (checkSw) {
  1719  001A70  5042               	movf	_checkSw^0,w,c
  1720  001A72  1043               	iorwf	(_checkSw+1)^0,w,c
  1721  001A74  B4D8               	btfsc	status,2,c
  1722  001A76  EF3F  F00D         	goto	u1911
  1723  001A7A  EF41  F00D         	goto	u1910
  1724  001A7E                     u1911:
  1725  001A7E  EF69  F00D         	goto	l4049
  1726  001A82                     u1910:
  1727  001A82                     
  1728                           ;SW.c: 81:         LCDPutInst(0x80);
  1729  001A82  0E80               	movlw	128
  1730  001A84  ECD3  F011         	call	_LCDPutInst
  1731  001A88                     
  1732                           ;SW.c: 82:         LCDPutStr("     STOPWATCH      ");
  1733  001A88  0E01               	movlw	low STR_27
  1734  001A8A  0100               	movlb	0	; () banked
  1735  001A8C  6F60               	movwf	LCDPutStr@ptr& (0+255),b
  1736  001A8E  0E10               	movlw	high STR_27
  1737  001A90  6F61               	movwf	(LCDPutStr@ptr+1)& (0+255),b
  1738  001A92  EC93  F011         	call	_LCDPutStr	;wreg free
  1739  001A96                     
  1740                           ;SW.c: 83:         LCDPutInst(0xC0);
  1741  001A96  0EC0               	movlw	192
  1742  001A98  ECD3  F011         	call	_LCDPutInst
  1743                           
  1744                           ;SW.c: 84:         LCDPutStr("RB0=Now RA5=Next");
  1745  001A9C  0E8F               	movlw	low STR_4
  1746  001A9E  0100               	movlb	0	; () banked
  1747  001AA0  6F60               	movwf	LCDPutStr@ptr& (0+255),b
  1748  001AA2  0E10               	movlw	high STR_4
  1749  001AA4  6F61               	movwf	(LCDPutStr@ptr+1)& (0+255),b
  1750  001AA6  EC93  F011         	call	_LCDPutStr	;wreg free
  1751  001AAA                     
  1752                           ;SW.c: 85:         checkClock = 1;
  1753  001AAA  0E00               	movlw	0
  1754  001AAC  6E4B               	movwf	(_checkClock+1)^0,c
  1755  001AAE  0E01               	movlw	1
  1756  001AB0  6E4A               	movwf	_checkClock^0,c
  1757  001AB2                     
  1758                           ;SW.c: 86:         checkHr = 1;
  1759  001AB2  0E00               	movlw	0
  1760  001AB4  6E49               	movwf	(_checkHr+1)^0,c
  1761  001AB6  0E01               	movlw	1
  1762  001AB8  6E48               	movwf	_checkHr^0,c
  1763  001ABA                     
  1764                           ;SW.c: 87:         checkMin = 1;
  1765  001ABA  0E00               	movlw	0
  1766  001ABC  6E47               	movwf	(_checkMin+1)^0,c
  1767  001ABE  0E01               	movlw	1
  1768  001AC0  6E46               	movwf	_checkMin^0,c
  1769  001AC2                     
  1770                           ;SW.c: 88:         checkSc = 1;
  1771  001AC2  0E00               	movlw	0
  1772  001AC4  6E45               	movwf	(_checkSc+1)^0,c
  1773  001AC6  0E01               	movlw	1
  1774  001AC8  6E44               	movwf	_checkSc^0,c
  1775  001ACA                     
  1776                           ;SW.c: 89:         checkSw = 0;
  1777  001ACA  0E00               	movlw	0
  1778  001ACC  6E43               	movwf	(_checkSw+1)^0,c
  1779  001ACE  0E00               	movlw	0
  1780  001AD0  6E42               	movwf	_checkSw^0,c
  1781  001AD2                     l4049:
  1782                           
  1783                           ;SW.c: 91:     if (access_state) {
  1784  001AD2  5015               	movf	_access_state^0,w,c
  1785  001AD4  1016               	iorwf	(_access_state+1)^0,w,c
  1786  001AD6  B4D8               	btfsc	status,2,c
  1787  001AD8  EF70  F00D         	goto	u1921
  1788  001ADC  EF72  F00D         	goto	u1920
  1789  001AE0                     u1921:
  1790  001AE0  EF87  F00D         	goto	l1123
  1791  001AE4                     u1920:
  1792  001AE4                     
  1793                           ;SW.c: 92:         if (firstTime) {
  1794  001AE4  5040               	movf	_firstTime^0,w,c
  1795  001AE6  1041               	iorwf	(_firstTime+1)^0,w,c
  1796  001AE8  B4D8               	btfsc	status,2,c
  1797  001AEA  EF79  F00D         	goto	u1931
  1798  001AEE  EF7B  F00D         	goto	u1930
  1799  001AF2                     u1931:
  1800  001AF2  EF83  F00D         	goto	l4055
  1801  001AF6                     u1930:
  1802  001AF6                     
  1803                           ;SW.c: 93:             stopWatch_state = 0;
  1804  001AF6  0E00               	movlw	0
  1805  001AF8  6E12               	movwf	(_stopWatch_state+1)^0,c
  1806  001AFA  0E00               	movlw	0
  1807  001AFC  6E11               	movwf	_stopWatch_state^0,c
  1808                           
  1809                           ;SW.c: 94:             firstTime = 0;
  1810  001AFE  0E00               	movlw	0
  1811  001B00  6E41               	movwf	(_firstTime+1)^0,c
  1812  001B02  0E00               	movlw	0
  1813  001B04  6E40               	movwf	_firstTime^0,c
  1814  001B06                     l4055:
  1815                           
  1816                           ;SW.c: 96:         disp_SW();
  1817  001B06  EC69  F00A         	call	_disp_SW	;wreg free
  1818  001B0A                     
  1819                           ;SW.c: 97:         count_Clock_SW();
  1820  001B0A  EC85  F00C         	call	_count_Clock_SW	;wreg free
  1821  001B0E                     l1123:
  1822  001B0E  0012               	return		;funcret
  1823  001B10                     __end_of_fSW:
  1824                           	opt callstack 0
  1825                           
  1826 ;; *************** function _disp_SW *****************
  1827 ;; Defined at:
  1828 ;;		line 12 in file "SW.c"
  1829 ;; Parameters:    Size  Location     Type
  1830 ;;		None
  1831 ;; Auto vars:     Size  Location     Type
  1832 ;;		None
  1833 ;; Return value:  Size  Location     Type
  1834 ;;                  1    wreg      void 
  1835 ;; Registers used:
  1836 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1837 ;; Tracked objects:
  1838 ;;		On entry : 0/0
  1839 ;;		On exit  : 0/0
  1840 ;;		Unchanged: 0/0
  1841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1843 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1845 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1846 ;;Total ram usage:        0 bytes
  1847 ;; Hardware stack levels used:    1
  1848 ;; Hardware stack levels required when called:    8
  1849 ;; This function calls:
  1850 ;;		_LCDPutChar
  1851 ;;		_LCDPutInst
  1852 ;;		_LCDPutStr
  1853 ;;		___awdiv
  1854 ;;		___awmod
  1855 ;;		_start_stopWatch
  1856 ;; This function is called by:
  1857 ;;		_fSW
  1858 ;; This function uses a non-reentrant model
  1859 ;;
  1860                           
  1861                           	psect	text13
  1862  0014D2                     __ptext13:
  1863                           	opt callstack 0
  1864  0014D2                     _disp_SW:
  1865                           	opt callstack 20
  1866  0014D2                     
  1867                           ;SW.c: 13:     LCDPutInst(0x80);
  1868  0014D2  0E80               	movlw	128
  1869  0014D4  ECD3  F011         	call	_LCDPutInst
  1870  0014D8                     
  1871                           ;SW.c: 14:     LCDPutStr("    ");
  1872  0014D8  0E23               	movlw	low (STR_22+13)
  1873  0014DA  0100               	movlb	0	; () banked
  1874  0014DC  6F60               	movwf	LCDPutStr@ptr& (0+255),b
  1875  0014DE  0E10               	movlw	high (STR_22+13)
  1876  0014E0  6F61               	movwf	(LCDPutStr@ptr+1)& (0+255),b
  1877  0014E2  EC93  F011         	call	_LCDPutStr	;wreg free
  1878  0014E6                     
  1879                           ;SW.c: 15:     LCDPutChar(sw_minute / 10 + '0');
  1880  0014E6  C017  F052         	movff	_sw_minute,___awdiv@dividend
  1881  0014EA  C018  F053         	movff	_sw_minute+1,___awdiv@dividend+1
  1882  0014EE  0E00               	movlw	0
  1883  0014F0  6E55               	movwf	(___awdiv@divisor+1)^0,c
  1884  0014F2  0E0A               	movlw	10
  1885  0014F4  6E54               	movwf	___awdiv@divisor^0,c
  1886  0014F6  EC22  F00C         	call	___awdiv	;wreg free
  1887  0014FA  5052               	movf	?___awdiv^0,w,c
  1888  0014FC  0F30               	addlw	48
  1889  0014FE  EC08  F012         	call	_LCDPutChar
  1890  001502                     
  1891                           ;SW.c: 16:     LCDPutChar(sw_minute % 10 + '0');
  1892  001502  C017  F052         	movff	_sw_minute,___awmod@dividend
  1893  001506  C018  F053         	movff	_sw_minute+1,___awmod@dividend+1
  1894  00150A  0E00               	movlw	0
  1895  00150C  6E55               	movwf	(___awmod@divisor+1)^0,c
  1896  00150E  0E0A               	movlw	10
  1897  001510  6E54               	movwf	___awmod@divisor^0,c
  1898  001512  ECE0  F00C         	call	___awmod	;wreg free
  1899  001516  5052               	movf	?___awmod^0,w,c
  1900  001518  0F30               	addlw	48
  1901  00151A  EC08  F012         	call	_LCDPutChar
  1902  00151E                     
  1903                           ;SW.c: 17:     LCDPutChar(':');
  1904  00151E  0E3A               	movlw	58
  1905  001520  EC08  F012         	call	_LCDPutChar
  1906  001524                     
  1907                           ;SW.c: 18:     LCDPutChar(sw_second / 10 + '0');
  1908  001524  C019  F052         	movff	_sw_second,___awdiv@dividend
  1909  001528  C01A  F053         	movff	_sw_second+1,___awdiv@dividend+1
  1910  00152C  0E00               	movlw	0
  1911  00152E  6E55               	movwf	(___awdiv@divisor+1)^0,c
  1912  001530  0E0A               	movlw	10
  1913  001532  6E54               	movwf	___awdiv@divisor^0,c
  1914  001534  EC22  F00C         	call	___awdiv	;wreg free
  1915  001538  5052               	movf	?___awdiv^0,w,c
  1916  00153A  0F30               	addlw	48
  1917  00153C  EC08  F012         	call	_LCDPutChar
  1918  001540                     
  1919                           ;SW.c: 19:     LCDPutChar(sw_second % 10 + '0');
  1920  001540  C019  F052         	movff	_sw_second,___awmod@dividend
  1921  001544  C01A  F053         	movff	_sw_second+1,___awmod@dividend+1
  1922  001548  0E00               	movlw	0
  1923  00154A  6E55               	movwf	(___awmod@divisor+1)^0,c
  1924  00154C  0E0A               	movlw	10
  1925  00154E  6E54               	movwf	___awmod@divisor^0,c
  1926  001550  ECE0  F00C         	call	___awmod	;wreg free
  1927  001554  5052               	movf	?___awmod^0,w,c
  1928  001556  0F30               	addlw	48
  1929  001558  EC08  F012         	call	_LCDPutChar
  1930  00155C                     
  1931                           ;SW.c: 20:     LCDPutChar(':');
  1932  00155C  0E3A               	movlw	58
  1933  00155E  EC08  F012         	call	_LCDPutChar
  1934  001562                     
  1935                           ;SW.c: 21:     LCDPutChar(sw_10ms / 10 + '0');
  1936  001562  C01B  F052         	movff	_sw_10ms,___awdiv@dividend
  1937  001566  C01C  F053         	movff	_sw_10ms+1,___awdiv@dividend+1
  1938  00156A  0E00               	movlw	0
  1939  00156C  6E55               	movwf	(___awdiv@divisor+1)^0,c
  1940  00156E  0E0A               	movlw	10
  1941  001570  6E54               	movwf	___awdiv@divisor^0,c
  1942  001572  EC22  F00C         	call	___awdiv	;wreg free
  1943  001576  5052               	movf	?___awdiv^0,w,c
  1944  001578  0F30               	addlw	48
  1945  00157A  EC08  F012         	call	_LCDPutChar
  1946  00157E                     
  1947                           ;SW.c: 22:     LCDPutChar(sw_10ms % 10 + '0');
  1948  00157E  C01B  F052         	movff	_sw_10ms,___awmod@dividend
  1949  001582  C01C  F053         	movff	_sw_10ms+1,___awmod@dividend+1
  1950  001586  0E00               	movlw	0
  1951  001588  6E55               	movwf	(___awmod@divisor+1)^0,c
  1952  00158A  0E0A               	movlw	10
  1953  00158C  6E54               	movwf	___awmod@divisor^0,c
  1954  00158E  ECE0  F00C         	call	___awmod	;wreg free
  1955  001592  5052               	movf	?___awmod^0,w,c
  1956  001594  0F30               	addlw	48
  1957  001596  EC08  F012         	call	_LCDPutChar
  1958  00159A                     
  1959                           ;SW.c: 23:     LCDPutStr("    ");
  1960  00159A  0E23               	movlw	low (STR_22+13)
  1961  00159C  0100               	movlb	0	; () banked
  1962  00159E  6F60               	movwf	LCDPutStr@ptr& (0+255),b
  1963  0015A0  0E10               	movlw	high (STR_22+13)
  1964  0015A2  6F61               	movwf	(LCDPutStr@ptr+1)& (0+255),b
  1965  0015A4  EC93  F011         	call	_LCDPutStr	;wreg free
  1966                           
  1967                           ;SW.c: 24:     LCDPutInst(0xC0);
  1968  0015A8  0EC0               	movlw	192
  1969  0015AA  ECD3  F011         	call	_LCDPutInst
  1970  0015AE                     
  1971                           ;SW.c: 25:     LCDPutStr("RB0=Ctr RA5=Next");
  1972  0015AE  0E5C               	movlw	low STR_26
  1973  0015B0  0100               	movlb	0	; () banked
  1974  0015B2  6F60               	movwf	LCDPutStr@ptr& (0+255),b
  1975  0015B4  0E10               	movlw	high STR_26
  1976  0015B6  6F61               	movwf	(LCDPutStr@ptr+1)& (0+255),b
  1977  0015B8  EC93  F011         	call	_LCDPutStr	;wreg free
  1978  0015BC                     
  1979                           ;SW.c: 26:     if (stopWatch_state) start_stopWatch();
  1980  0015BC  5011               	movf	_stopWatch_state^0,w,c
  1981  0015BE  1012               	iorwf	(_stopWatch_state+1)^0,w,c
  1982  0015C0  B4D8               	btfsc	status,2,c
  1983  0015C2  EFE5  F00A         	goto	u1811
  1984  0015C6  EFE7  F00A         	goto	u1810
  1985  0015CA                     u1811:
  1986  0015CA  EFE9  F00A         	goto	l1102
  1987  0015CE                     u1810:
  1988  0015CE  EC22  F00E         	call	_start_stopWatch	;wreg free
  1989  0015D2                     l1102:
  1990  0015D2  0012               	return		;funcret
  1991  0015D4                     __end_of_disp_SW:
  1992                           	opt callstack 0
  1993                           
  1994 ;; *************** function _start_stopWatch *****************
  1995 ;; Defined at:
  1996 ;;		line 29 in file "SW.c"
  1997 ;; Parameters:    Size  Location     Type
  1998 ;;		None
  1999 ;; Auto vars:     Size  Location     Type
  2000 ;;		None
  2001 ;; Return value:  Size  Location     Type
  2002 ;;                  1    wreg      void 
  2003 ;; Registers used:
  2004 ;;		wreg, status,2, status,0
  2005 ;; Tracked objects:
  2006 ;;		On entry : 0/0
  2007 ;;		On exit  : 0/0
  2008 ;;		Unchanged: 0/0
  2009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2011 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2013 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2014 ;;Total ram usage:        0 bytes
  2015 ;; Hardware stack levels used:    1
  2016 ;; Hardware stack levels required when called:    4
  2017 ;; This function calls:
  2018 ;;		Nothing
  2019 ;; This function is called by:
  2020 ;;		_disp_SW
  2021 ;; This function uses a non-reentrant model
  2022 ;;
  2023                           
  2024                           	psect	text14
  2025  001C44                     __ptext14:
  2026                           	opt callstack 0
  2027  001C44                     _start_stopWatch:
  2028                           	opt callstack 23
  2029  001C44                     
  2030                           ;SW.c: 30:     if (timerflag == 1)
  2031  001C44  0438               	decf	_timerflag^0,w,c
  2032  001C46  A4D8               	btfss	status,2,c
  2033  001C48  EF28  F00E         	goto	u261
  2034  001C4C  EF2A  F00E         	goto	u260
  2035  001C50                     u261:
  2036  001C50  EF68  F00E         	goto	l1109
  2037  001C54                     u260:
  2038  001C54                     
  2039                           ;SW.c: 31:     {;SW.c: 32:         sw_10ms++;
  2040  001C54  4A1B               	infsnz	_sw_10ms^0,f,c
  2041  001C56  2A1C               	incf	(_sw_10ms+1)^0,f,c
  2042  001C58                     
  2043                           ;SW.c: 33:         if (sw_10ms > 99)
  2044  001C58  BE1C               	btfsc	(_sw_10ms+1)^0,7,c
  2045  001C5A  EF38  F00E         	goto	u271
  2046  001C5E  501C               	movf	(_sw_10ms+1)^0,w,c
  2047  001C60  E109               	bnz	u270
  2048  001C62  0E64               	movlw	100
  2049  001C64  5C1B               	subwf	_sw_10ms^0,w,c
  2050  001C66  A0D8               	btfss	status,0,c
  2051  001C68  EF38  F00E         	goto	u271
  2052  001C6C  EF3A  F00E         	goto	u270
  2053  001C70                     u271:
  2054  001C70  EF40  F00E         	goto	l2291
  2055  001C74                     u270:
  2056  001C74                     
  2057                           ;SW.c: 34:         {;SW.c: 35:             sw_10ms = 0;
  2058  001C74  0E00               	movlw	0
  2059  001C76  6E1C               	movwf	(_sw_10ms+1)^0,c
  2060  001C78  0E00               	movlw	0
  2061  001C7A  6E1B               	movwf	_sw_10ms^0,c
  2062  001C7C                     
  2063                           ;SW.c: 36:             sw_second++;
  2064  001C7C  4A19               	infsnz	_sw_second^0,f,c
  2065  001C7E  2A1A               	incf	(_sw_second+1)^0,f,c
  2066  001C80                     l2291:
  2067                           
  2068                           ;SW.c: 38:         if (sw_second > 59)
  2069  001C80  BE1A               	btfsc	(_sw_second+1)^0,7,c
  2070  001C82  EF4C  F00E         	goto	u281
  2071  001C86  501A               	movf	(_sw_second+1)^0,w,c
  2072  001C88  E109               	bnz	u280
  2073  001C8A  0E3C               	movlw	60
  2074  001C8C  5C19               	subwf	_sw_second^0,w,c
  2075  001C8E  A0D8               	btfss	status,0,c
  2076  001C90  EF4C  F00E         	goto	u281
  2077  001C94  EF4E  F00E         	goto	u280
  2078  001C98                     u281:
  2079  001C98  EF54  F00E         	goto	l2297
  2080  001C9C                     u280:
  2081  001C9C                     
  2082                           ;SW.c: 39:         {;SW.c: 40:             sw_second = 0;
  2083  001C9C  0E00               	movlw	0
  2084  001C9E  6E1A               	movwf	(_sw_second+1)^0,c
  2085  001CA0  0E00               	movlw	0
  2086  001CA2  6E19               	movwf	_sw_second^0,c
  2087  001CA4                     
  2088                           ;SW.c: 41:             sw_minute++;
  2089  001CA4  4A17               	infsnz	_sw_minute^0,f,c
  2090  001CA6  2A18               	incf	(_sw_minute+1)^0,f,c
  2091  001CA8                     l2297:
  2092                           
  2093                           ;SW.c: 43:         if (sw_minute > 59)
  2094  001CA8  BE18               	btfsc	(_sw_minute+1)^0,7,c
  2095  001CAA  EF60  F00E         	goto	u291
  2096  001CAE  5018               	movf	(_sw_minute+1)^0,w,c
  2097  001CB0  E109               	bnz	u290
  2098  001CB2  0E3C               	movlw	60
  2099  001CB4  5C17               	subwf	_sw_minute^0,w,c
  2100  001CB6  A0D8               	btfss	status,0,c
  2101  001CB8  EF60  F00E         	goto	u291
  2102  001CBC  EF62  F00E         	goto	u290
  2103  001CC0                     u291:
  2104  001CC0  EF66  F00E         	goto	l1108
  2105  001CC4                     u290:
  2106  001CC4                     
  2107                           ;SW.c: 44:         {;SW.c: 45:             sw_minute = 0;
  2108  001CC4  0E00               	movlw	0
  2109  001CC6  6E18               	movwf	(_sw_minute+1)^0,c
  2110  001CC8  0E00               	movlw	0
  2111  001CCA  6E17               	movwf	_sw_minute^0,c
  2112  001CCC                     l1108:
  2113                           
  2114                           ;SW.c: 47:         timerflag = 0;
  2115  001CCC  0E00               	movlw	0
  2116  001CCE  6E38               	movwf	_timerflag^0,c
  2117  001CD0                     l1109:
  2118  001CD0  0012               	return		;funcret
  2119  001CD2                     __end_of_start_stopWatch:
  2120                           	opt callstack 0
  2121                           
  2122 ;; *************** function _count_Clock_SW *****************
  2123 ;; Defined at:
  2124 ;;		line 51 in file "SW.c"
  2125 ;; Parameters:    Size  Location     Type
  2126 ;;		None
  2127 ;; Auto vars:     Size  Location     Type
  2128 ;;		None
  2129 ;; Return value:  Size  Location     Type
  2130 ;;                  1    wreg      void 
  2131 ;; Registers used:
  2132 ;;		wreg, status,2, status,0
  2133 ;; Tracked objects:
  2134 ;;		On entry : 0/0
  2135 ;;		On exit  : 0/0
  2136 ;;		Unchanged: 0/0
  2137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2139 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2141 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2142 ;;Total ram usage:        0 bytes
  2143 ;; Hardware stack levels used:    1
  2144 ;; Hardware stack levels required when called:    4
  2145 ;; This function calls:
  2146 ;;		Nothing
  2147 ;; This function is called by:
  2148 ;;		_fSW
  2149 ;; This function uses a non-reentrant model
  2150 ;;
  2151                           
  2152                           	psect	text15
  2153  00190A                     __ptext15:
  2154                           	opt callstack 0
  2155  00190A                     _count_Clock_SW:
  2156                           	opt callstack 24
  2157  00190A                     
  2158                           ;SW.c: 52:     if (swflag == 1)
  2159  00190A  0437               	decf	_swflag^0,w,c
  2160  00190C  A4D8               	btfss	status,2,c
  2161  00190E  EF8B  F00C         	goto	u461
  2162  001912  EF8D  F00C         	goto	u460
  2163  001916                     u461:
  2164  001916  EFDF  F00C         	goto	l1117
  2165  00191A                     u460:
  2166  00191A                     
  2167                           ;SW.c: 53:     {;SW.c: 54:         count10ms++;
  2168  00191A  4A1D               	infsnz	_count10ms^0,f,c
  2169  00191C  2A1E               	incf	(_count10ms+1)^0,f,c
  2170  00191E                     
  2171                           ;SW.c: 55:         if (count10ms > 99) {
  2172  00191E  BE1E               	btfsc	(_count10ms+1)^0,7,c
  2173  001920  EF9B  F00C         	goto	u471
  2174  001924  501E               	movf	(_count10ms+1)^0,w,c
  2175  001926  E109               	bnz	u470
  2176  001928  0E64               	movlw	100
  2177  00192A  5C1D               	subwf	_count10ms^0,w,c
  2178  00192C  A0D8               	btfss	status,0,c
  2179  00192E  EF9B  F00C         	goto	u471
  2180  001932  EF9D  F00C         	goto	u470
  2181  001936                     u471:
  2182  001936  EFA3  F00C         	goto	l2501
  2183  00193A                     u470:
  2184  00193A                     
  2185                           ;SW.c: 56:             count10ms = 0;
  2186  00193A  0E00               	movlw	0
  2187  00193C  6E1E               	movwf	(_count10ms+1)^0,c
  2188  00193E  0E00               	movlw	0
  2189  001940  6E1D               	movwf	_count10ms^0,c
  2190  001942                     
  2191                           ;SW.c: 57:             second++;
  2192  001942  4A1F               	infsnz	_second^0,f,c
  2193  001944  2A20               	incf	(_second+1)^0,f,c
  2194  001946                     l2501:
  2195                           
  2196                           ;SW.c: 59:         if (second > 59)
  2197  001946  BE20               	btfsc	(_second+1)^0,7,c
  2198  001948  EFAF  F00C         	goto	u481
  2199  00194C  5020               	movf	(_second+1)^0,w,c
  2200  00194E  E109               	bnz	u480
  2201  001950  0E3C               	movlw	60
  2202  001952  5C1F               	subwf	_second^0,w,c
  2203  001954  A0D8               	btfss	status,0,c
  2204  001956  EFAF  F00C         	goto	u481
  2205  00195A  EFB1  F00C         	goto	u480
  2206  00195E                     u481:
  2207  00195E  EFB7  F00C         	goto	l2507
  2208  001962                     u480:
  2209  001962                     
  2210                           ;SW.c: 60:         {;SW.c: 61:             second = 0;
  2211  001962  0E00               	movlw	0
  2212  001964  6E20               	movwf	(_second+1)^0,c
  2213  001966  0E00               	movlw	0
  2214  001968  6E1F               	movwf	_second^0,c
  2215  00196A                     
  2216                           ;SW.c: 62:             minute++;
  2217  00196A  4A21               	infsnz	_minute^0,f,c
  2218  00196C  2A22               	incf	(_minute+1)^0,f,c
  2219  00196E                     l2507:
  2220                           
  2221                           ;SW.c: 64:         if (minute > 59)
  2222  00196E  BE22               	btfsc	(_minute+1)^0,7,c
  2223  001970  EFC3  F00C         	goto	u491
  2224  001974  5022               	movf	(_minute+1)^0,w,c
  2225  001976  E109               	bnz	u490
  2226  001978  0E3C               	movlw	60
  2227  00197A  5C21               	subwf	_minute^0,w,c
  2228  00197C  A0D8               	btfss	status,0,c
  2229  00197E  EFC3  F00C         	goto	u491
  2230  001982  EFC5  F00C         	goto	u490
  2231  001986                     u491:
  2232  001986  EFCB  F00C         	goto	l2513
  2233  00198A                     u490:
  2234  00198A                     
  2235                           ;SW.c: 65:         {;SW.c: 66:             minute = 0;
  2236  00198A  0E00               	movlw	0
  2237  00198C  6E22               	movwf	(_minute+1)^0,c
  2238  00198E  0E00               	movlw	0
  2239  001990  6E21               	movwf	_minute^0,c
  2240  001992                     
  2241                           ;SW.c: 67:             hour++;
  2242  001992  4A23               	infsnz	_hour^0,f,c
  2243  001994  2A24               	incf	(_hour+1)^0,f,c
  2244  001996                     l2513:
  2245                           
  2246                           ;SW.c: 69:         if (hour > 23)
  2247  001996  BE24               	btfsc	(_hour+1)^0,7,c
  2248  001998  EFD7  F00C         	goto	u501
  2249  00199C  5024               	movf	(_hour+1)^0,w,c
  2250  00199E  E109               	bnz	u500
  2251  0019A0  0E18               	movlw	24
  2252  0019A2  5C23               	subwf	_hour^0,w,c
  2253  0019A4  A0D8               	btfss	status,0,c
  2254  0019A6  EFD7  F00C         	goto	u501
  2255  0019AA  EFD9  F00C         	goto	u500
  2256  0019AE                     u501:
  2257  0019AE  EFDD  F00C         	goto	l1116
  2258  0019B2                     u500:
  2259  0019B2                     
  2260                           ;SW.c: 70:         {;SW.c: 71:             hour = 0;
  2261  0019B2  0E00               	movlw	0
  2262  0019B4  6E24               	movwf	(_hour+1)^0,c
  2263  0019B6  0E00               	movlw	0
  2264  0019B8  6E23               	movwf	_hour^0,c
  2265  0019BA                     l1116:
  2266                           
  2267                           ;SW.c: 73:         swflag = 0;
  2268  0019BA  0E00               	movlw	0
  2269  0019BC  6E37               	movwf	_swflag^0,c
  2270  0019BE                     l1117:
  2271  0019BE  0012               	return		;funcret
  2272  0019C0                     __end_of_count_Clock_SW:
  2273                           	opt callstack 0
  2274                           
  2275 ;; *************** function _fSECOND *****************
  2276 ;; Defined at:
  2277 ;;		line 53 in file "SECOND.c"
  2278 ;; Parameters:    Size  Location     Type
  2279 ;;		None
  2280 ;; Auto vars:     Size  Location     Type
  2281 ;;		None
  2282 ;; Return value:  Size  Location     Type
  2283 ;;                  1    wreg      void 
  2284 ;; Registers used:
  2285 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2286 ;; Tracked objects:
  2287 ;;		On entry : 0/0
  2288 ;;		On exit  : 0/0
  2289 ;;		Unchanged: 0/0
  2290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2291 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2292 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2294 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2295 ;;Total ram usage:        0 bytes
  2296 ;; Hardware stack levels used:    1
  2297 ;; Hardware stack levels required when called:    9
  2298 ;; This function calls:
  2299 ;;		_LCDPutInst
  2300 ;;		_LCDPutStr
  2301 ;;		_disp_SECOND
  2302 ;; This function is called by:
  2303 ;;		_FSM
  2304 ;; This function uses a non-reentrant model
  2305 ;;
  2306                           
  2307                           	psect	text16
  2308  001E4E                     __ptext16:
  2309                           	opt callstack 0
  2310  001E4E                     _fSECOND:
  2311                           	opt callstack 20
  2312  001E4E                     
  2313                           ;SECOND.c: 54:     if (checkSc)
  2314  001E4E  5044               	movf	_checkSc^0,w,c
  2315  001E50  1045               	iorwf	(_checkSc+1)^0,w,c
  2316  001E52  B4D8               	btfsc	status,2,c
  2317  001E54  EF2E  F00F         	goto	u1891
  2318  001E58  EF30  F00F         	goto	u1890
  2319  001E5C                     u1891:
  2320  001E5C  EF58  F00F         	goto	l4027
  2321  001E60                     u1890:
  2322  001E60                     
  2323                           ;SECOND.c: 55:         {;SECOND.c: 57:             LCDPutInst(0x80);
  2324  001E60  0E80               	movlw	128
  2325  001E62  ECD3  F011         	call	_LCDPutInst
  2326  001E66                     
  2327                           ;SECOND.c: 58:             LCDPutStr("     SECOND      ");
  2328  001E66  0E16               	movlw	low STR_22
  2329  001E68  0100               	movlb	0	; () banked
  2330  001E6A  6F60               	movwf	LCDPutStr@ptr& (0+255),b
  2331  001E6C  0E10               	movlw	high STR_22
  2332  001E6E  6F61               	movwf	(LCDPutStr@ptr+1)& (0+255),b
  2333  001E70  EC93  F011         	call	_LCDPutStr	;wreg free
  2334  001E74                     
  2335                           ;SECOND.c: 59:             LCDPutInst(0xC0);
  2336  001E74  0EC0               	movlw	192
  2337  001E76  ECD3  F011         	call	_LCDPutInst
  2338                           
  2339                           ;SECOND.c: 60:             LCDPutStr("RB0=Now RA5=Next");
  2340  001E7A  0E8F               	movlw	low STR_4
  2341  001E7C  0100               	movlb	0	; () banked
  2342  001E7E  6F60               	movwf	LCDPutStr@ptr& (0+255),b
  2343  001E80  0E10               	movlw	high STR_4
  2344  001E82  6F61               	movwf	(LCDPutStr@ptr+1)& (0+255),b
  2345  001E84  EC93  F011         	call	_LCDPutStr	;wreg free
  2346  001E88                     
  2347                           ;SECOND.c: 61:             checkClock = 1;
  2348  001E88  0E00               	movlw	0
  2349  001E8A  6E4B               	movwf	(_checkClock+1)^0,c
  2350  001E8C  0E01               	movlw	1
  2351  001E8E  6E4A               	movwf	_checkClock^0,c
  2352  001E90                     
  2353                           ;SECOND.c: 62:             checkHr = 1;
  2354  001E90  0E00               	movlw	0
  2355  001E92  6E49               	movwf	(_checkHr+1)^0,c
  2356  001E94  0E01               	movlw	1
  2357  001E96  6E48               	movwf	_checkHr^0,c
  2358  001E98                     
  2359                           ;SECOND.c: 63:             checkMin = 1;
  2360  001E98  0E00               	movlw	0
  2361  001E9A  6E47               	movwf	(_checkMin+1)^0,c
  2362  001E9C  0E01               	movlw	1
  2363  001E9E  6E46               	movwf	_checkMin^0,c
  2364  001EA0                     
  2365                           ;SECOND.c: 64:             checkSc = 0;
  2366  001EA0  0E00               	movlw	0
  2367  001EA2  6E45               	movwf	(_checkSc+1)^0,c
  2368  001EA4  0E00               	movlw	0
  2369  001EA6  6E44               	movwf	_checkSc^0,c
  2370  001EA8                     
  2371                           ;SECOND.c: 65:             checkSw = 1;
  2372  001EA8  0E00               	movlw	0
  2373  001EAA  6E43               	movwf	(_checkSw+1)^0,c
  2374  001EAC  0E01               	movlw	1
  2375  001EAE  6E42               	movwf	_checkSw^0,c
  2376  001EB0                     l4027:
  2377                           
  2378                           ;SECOND.c: 67:     if (access_state == 1)
  2379  001EB0  0415               	decf	_access_state^0,w,c
  2380  001EB2  1016               	iorwf	(_access_state+1)^0,w,c
  2381  001EB4  A4D8               	btfss	status,2,c
  2382  001EB6  EF5F  F00F         	goto	u1901
  2383  001EBA  EF61  F00F         	goto	u1900
  2384  001EBE                     u1901:
  2385  001EBE  EF63  F00F         	goto	l1012
  2386  001EC2                     u1900:
  2387  001EC2                     
  2388                           ;SECOND.c: 68:     {;SECOND.c: 69:         disp_SECOND();
  2389  001EC2  EC59  F008         	call	_disp_SECOND	;wreg free
  2390  001EC6                     l1012:
  2391  001EC6  0012               	return		;funcret
  2392  001EC8                     __end_of_fSECOND:
  2393                           	opt callstack 0
  2394                           
  2395 ;; *************** function _disp_SECOND *****************
  2396 ;; Defined at:
  2397 ;;		line 13 in file "SECOND.c"
  2398 ;; Parameters:    Size  Location     Type
  2399 ;;		None
  2400 ;; Auto vars:     Size  Location     Type
  2401 ;;		None
  2402 ;; Return value:  Size  Location     Type
  2403 ;;                  1    wreg      void 
  2404 ;; Registers used:
  2405 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2406 ;; Tracked objects:
  2407 ;;		On entry : 0/0
  2408 ;;		On exit  : 0/0
  2409 ;;		Unchanged: 0/0
  2410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2414 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2415 ;;Total ram usage:        0 bytes
  2416 ;; Hardware stack levels used:    1
  2417 ;; Hardware stack levels required when called:    8
  2418 ;; This function calls:
  2419 ;;		_LCDPutChar
  2420 ;;		_LCDPutInst
  2421 ;;		_LCDPutStr
  2422 ;;		___awdiv
  2423 ;;		___awmod
  2424 ;;		_modify_SEC
  2425 ;; This function is called by:
  2426 ;;		_fSECOND
  2427 ;; This function uses a non-reentrant model
  2428 ;;
  2429                           
  2430                           	psect	text17
  2431  0010B2                     __ptext17:
  2432                           	opt callstack 0
  2433  0010B2                     _disp_SECOND:
  2434                           	opt callstack 20
  2435  0010B2                     
  2436                           ;SECOND.c: 14:     if (timerflag)
  2437  0010B2  5038               	movf	_timerflag^0,w,c
  2438  0010B4  B4D8               	btfsc	status,2,c
  2439  0010B6  EF5F  F008         	goto	u1781
  2440  0010BA  EF61  F008         	goto	u1780
  2441  0010BE                     u1781:
  2442  0010BE  EF65  F008         	goto	l3873
  2443  0010C2                     u1780:
  2444  0010C2                     
  2445                           ;SECOND.c: 15:     {;SECOND.c: 16:         count++;
  2446  0010C2  4A03               	infsnz	SECOND@count^0,f,c
  2447  0010C4  2A04               	incf	(SECOND@count+1)^0,f,c
  2448  0010C6                     
  2449                           ;SECOND.c: 17:         timerflag = 0;
  2450  0010C6  0E00               	movlw	0
  2451  0010C8  6E38               	movwf	_timerflag^0,c
  2452  0010CA                     l3873:
  2453                           
  2454                           ;SECOND.c: 19:     if (count >= 50){
  2455  0010CA  BE04               	btfsc	(SECOND@count+1)^0,7,c
  2456  0010CC  EF71  F008         	goto	u1791
  2457  0010D0  5004               	movf	(SECOND@count+1)^0,w,c
  2458  0010D2  E109               	bnz	u1790
  2459  0010D4  0E32               	movlw	50
  2460  0010D6  5C03               	subwf	SECOND@count^0,w,c
  2461  0010D8  A0D8               	btfss	status,0,c
  2462  0010DA  EF71  F008         	goto	u1791
  2463  0010DE  EF73  F008         	goto	u1790
  2464  0010E2                     u1791:
  2465  0010E2  EF7F  F008         	goto	l3879
  2466  0010E6                     u1790:
  2467  0010E6                     
  2468                           ;SECOND.c: 20:         blinkflag = 1 - blinkflag;
  2469  0010E6  5001               	movf	SECOND@blinkflag^0,w,c
  2470  0010E8  0801               	sublw	1
  2471  0010EA  6E01               	movwf	SECOND@blinkflag^0,c
  2472  0010EC  5002               	movf	(SECOND@blinkflag+1)^0,w,c
  2473  0010EE  A0D8               	btfss	status,0,c
  2474  0010F0  2AE8               	incf	wreg,f,c
  2475  0010F2  0800               	sublw	0
  2476  0010F4  6E02               	movwf	(SECOND@blinkflag+1)^0,c
  2477  0010F6                     
  2478                           ;SECOND.c: 21:         count = 0;
  2479  0010F6  0E00               	movlw	0
  2480  0010F8  6E04               	movwf	(SECOND@count+1)^0,c
  2481  0010FA  0E00               	movlw	0
  2482  0010FC  6E03               	movwf	SECOND@count^0,c
  2483  0010FE                     l3879:
  2484                           
  2485                           ;SECOND.c: 23:     LCDPutInst(0x80);
  2486  0010FE  0E80               	movlw	128
  2487  001100  ECD3  F011         	call	_LCDPutInst
  2488  001104                     
  2489                           ;SECOND.c: 24:     LCDPutStr("    ");
  2490  001104  0E23               	movlw	low (STR_22+13)
  2491  001106  0100               	movlb	0	; () banked
  2492  001108  6F60               	movwf	LCDPutStr@ptr& (0+255),b
  2493  00110A  0E10               	movlw	high (STR_22+13)
  2494  00110C  6F61               	movwf	(LCDPutStr@ptr+1)& (0+255),b
  2495  00110E  EC93  F011         	call	_LCDPutStr	;wreg free
  2496  001112                     
  2497                           ;SECOND.c: 25:     LCDPutChar(hour/10+'0');
  2498  001112  C023  F052         	movff	_hour,___awdiv@dividend
  2499  001116  C024  F053         	movff	_hour+1,___awdiv@dividend+1
  2500  00111A  0E00               	movlw	0
  2501  00111C  6E55               	movwf	(___awdiv@divisor+1)^0,c
  2502  00111E  0E0A               	movlw	10
  2503  001120  6E54               	movwf	___awdiv@divisor^0,c
  2504  001122  EC22  F00C         	call	___awdiv	;wreg free
  2505  001126  5052               	movf	?___awdiv^0,w,c
  2506  001128  0F30               	addlw	48
  2507  00112A  EC08  F012         	call	_LCDPutChar
  2508  00112E                     
  2509                           ;SECOND.c: 26:     LCDPutChar(hour%10+'0');
  2510  00112E  C023  F052         	movff	_hour,___awmod@dividend
  2511  001132  C024  F053         	movff	_hour+1,___awmod@dividend+1
  2512  001136  0E00               	movlw	0
  2513  001138  6E55               	movwf	(___awmod@divisor+1)^0,c
  2514  00113A  0E0A               	movlw	10
  2515  00113C  6E54               	movwf	___awmod@divisor^0,c
  2516  00113E  ECE0  F00C         	call	___awmod	;wreg free
  2517  001142  5052               	movf	?___awmod^0,w,c
  2518  001144  0F30               	addlw	48
  2519  001146  EC08  F012         	call	_LCDPutChar
  2520  00114A                     
  2521                           ;SECOND.c: 27:     LCDPutChar(':');
  2522  00114A  0E3A               	movlw	58
  2523  00114C  EC08  F012         	call	_LCDPutChar
  2524  001150                     
  2525                           ;SECOND.c: 28:     LCDPutChar(minute/10+'0');
  2526  001150  C021  F052         	movff	_minute,___awdiv@dividend
  2527  001154  C022  F053         	movff	_minute+1,___awdiv@dividend+1
  2528  001158  0E00               	movlw	0
  2529  00115A  6E55               	movwf	(___awdiv@divisor+1)^0,c
  2530  00115C  0E0A               	movlw	10
  2531  00115E  6E54               	movwf	___awdiv@divisor^0,c
  2532  001160  EC22  F00C         	call	___awdiv	;wreg free
  2533  001164  5052               	movf	?___awdiv^0,w,c
  2534  001166  0F30               	addlw	48
  2535  001168  EC08  F012         	call	_LCDPutChar
  2536  00116C                     
  2537                           ;SECOND.c: 29:     LCDPutChar(minute%10+'0');
  2538  00116C  C021  F052         	movff	_minute,___awmod@dividend
  2539  001170  C022  F053         	movff	_minute+1,___awmod@dividend+1
  2540  001174  0E00               	movlw	0
  2541  001176  6E55               	movwf	(___awmod@divisor+1)^0,c
  2542  001178  0E0A               	movlw	10
  2543  00117A  6E54               	movwf	___awmod@divisor^0,c
  2544  00117C  ECE0  F00C         	call	___awmod	;wreg free
  2545  001180  5052               	movf	?___awmod^0,w,c
  2546  001182  0F30               	addlw	48
  2547  001184  EC08  F012         	call	_LCDPutChar
  2548  001188                     
  2549                           ;SECOND.c: 30:     LCDPutChar(':');
  2550  001188  0E3A               	movlw	58
  2551  00118A  EC08  F012         	call	_LCDPutChar
  2552  00118E                     
  2553                           ;SECOND.c: 31:       if (blinkflag)
  2554  00118E  5001               	movf	SECOND@blinkflag^0,w,c
  2555  001190  1002               	iorwf	(SECOND@blinkflag+1)^0,w,c
  2556  001192  B4D8               	btfsc	status,2,c
  2557  001194  EFCE  F008         	goto	u1801
  2558  001198  EFD0  F008         	goto	u1800
  2559  00119C                     u1801:
  2560  00119C  EFEE  F008         	goto	l3899
  2561  0011A0                     u1800:
  2562  0011A0                     
  2563                           ;SECOND.c: 32:     {;SECOND.c: 34:         LCDPutChar(second/10+'0');
  2564  0011A0  C01F  F052         	movff	_second,___awdiv@dividend
  2565  0011A4  C020  F053         	movff	_second+1,___awdiv@dividend+1
  2566  0011A8  0E00               	movlw	0
  2567  0011AA  6E55               	movwf	(___awdiv@divisor+1)^0,c
  2568  0011AC  0E0A               	movlw	10
  2569  0011AE  6E54               	movwf	___awdiv@divisor^0,c
  2570  0011B0  EC22  F00C         	call	___awdiv	;wreg free
  2571  0011B4  5052               	movf	?___awdiv^0,w,c
  2572  0011B6  0F30               	addlw	48
  2573  0011B8  EC08  F012         	call	_LCDPutChar
  2574                           
  2575                           ;SECOND.c: 35:         LCDPutChar(second%10+'0');
  2576  0011BC  C01F  F052         	movff	_second,___awmod@dividend
  2577  0011C0  C020  F053         	movff	_second+1,___awmod@dividend+1
  2578  0011C4  0E00               	movlw	0
  2579  0011C6  6E55               	movwf	(___awmod@divisor+1)^0,c
  2580  0011C8  0E0A               	movlw	10
  2581  0011CA  6E54               	movwf	___awmod@divisor^0,c
  2582  0011CC  ECE0  F00C         	call	___awmod	;wreg free
  2583  0011D0  5052               	movf	?___awmod^0,w,c
  2584  0011D2  0F30               	addlw	48
  2585  0011D4  EC08  F012         	call	_LCDPutChar
  2586                           
  2587                           ;SECOND.c: 36:     }
  2588  0011D8  EFF5  F008         	goto	l998
  2589  0011DC                     l3899:
  2590                           
  2591                           ;SECOND.c: 38:     {;SECOND.c: 39:         LCDPutStr("  ");
  2592  0011DC  0E25               	movlw	low (STR_22+15)
  2593  0011DE  0100               	movlb	0	; () banked
  2594  0011E0  6F60               	movwf	LCDPutStr@ptr& (0+255),b
  2595  0011E2  0E10               	movlw	high (STR_22+15)
  2596  0011E4  6F61               	movwf	(LCDPutStr@ptr+1)& (0+255),b
  2597  0011E6  EC93  F011         	call	_LCDPutStr	;wreg free
  2598  0011EA                     l998:
  2599                           
  2600                           ;SECOND.c: 41:     LCDPutStr("    ");
  2601  0011EA  0E23               	movlw	low (STR_22+13)
  2602  0011EC  0100               	movlb	0	; () banked
  2603  0011EE  6F60               	movwf	LCDPutStr@ptr& (0+255),b
  2604  0011F0  0E10               	movlw	high (STR_22+13)
  2605  0011F2  6F61               	movwf	(LCDPutStr@ptr+1)& (0+255),b
  2606  0011F4  EC93  F011         	call	_LCDPutStr	;wreg free
  2607  0011F8                     
  2608                           ;SECOND.c: 42:     LCDPutInst(0xC0);
  2609  0011F8  0EC0               	movlw	192
  2610  0011FA  ECD3  F011         	call	_LCDPutInst
  2611  0011FE                     
  2612                           ;SECOND.c: 43:     LCDPutStr("        RA5=Next");
  2613  0011FE  0E7E               	movlw	low STR_5
  2614  001200  0100               	movlb	0	; () banked
  2615  001202  6F60               	movwf	LCDPutStr@ptr& (0+255),b
  2616  001204  0E10               	movlw	high STR_5
  2617  001206  6F61               	movwf	(LCDPutStr@ptr+1)& (0+255),b
  2618  001208  EC93  F011         	call	_LCDPutStr	;wreg free
  2619                           
  2620                           ;SECOND.c: 44:     modify_SEC();
  2621  00120C  ECB5  F010         	call	_modify_SEC	;wreg free
  2622  001210  0012               	return		;funcret
  2623  001212                     __end_of_disp_SECOND:
  2624                           	opt callstack 0
  2625                           
  2626 ;; *************** function _modify_SEC *****************
  2627 ;; Defined at:
  2628 ;;		line 46 in file "SECOND.c"
  2629 ;; Parameters:    Size  Location     Type
  2630 ;;		None
  2631 ;; Auto vars:     Size  Location     Type
  2632 ;;		None
  2633 ;; Return value:  Size  Location     Type
  2634 ;;                  1    wreg      void 
  2635 ;; Registers used:
  2636 ;;		wreg, status,2, status,0, cstack
  2637 ;; Tracked objects:
  2638 ;;		On entry : 0/0
  2639 ;;		On exit  : 0/0
  2640 ;;		Unchanged: 0/0
  2641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2643 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2645 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2646 ;;Total ram usage:        0 bytes
  2647 ;; Hardware stack levels used:    1
  2648 ;; Hardware stack levels required when called:    5
  2649 ;; This function calls:
  2650 ;;		___awmod
  2651 ;; This function is called by:
  2652 ;;		_disp_SECOND
  2653 ;; This function uses a non-reentrant model
  2654 ;;
  2655                           
  2656                           	psect	text18
  2657  00216A                     __ptext18:
  2658                           	opt callstack 0
  2659  00216A                     _modify_SEC:
  2660                           	opt callstack 22
  2661  00216A                     
  2662                           ;SECOND.c: 47:      if ((pRB0 && !normalFlag) || FastIncreaseFlag){
  2663  00216A  5029               	movf	_pRB0^0,w,c
  2664  00216C  102A               	iorwf	(_pRB0+1)^0,w,c
  2665  00216E  B4D8               	btfsc	status,2,c
  2666  002170  EFBC  F010         	goto	u1051
  2667  002174  EFBE  F010         	goto	u1050
  2668  002178                     u1051:
  2669  002178  EFC6  F010         	goto	l3077
  2670  00217C                     u1050:
  2671  00217C  503B               	movf	_normalFlag^0,w,c
  2672  00217E  B4D8               	btfsc	status,2,c
  2673  002180  EFC4  F010         	goto	u1061
  2674  002184  EFC6  F010         	goto	u1060
  2675  002188                     u1061:
  2676  002188  EFCE  F010         	goto	l3079
  2677  00218C                     u1060:
  2678  00218C                     l3077:
  2679  00218C  503F               	movf	_FastIncreaseFlag^0,w,c
  2680  00218E  B4D8               	btfsc	status,2,c
  2681  002190  EFCC  F010         	goto	u1071
  2682  002194  EFCE  F010         	goto	u1070
  2683  002198                     u1071:
  2684  002198  EFE2  F010         	goto	l1007
  2685  00219C                     u1070:
  2686  00219C                     l3079:
  2687                           
  2688                           ;SECOND.c: 48:         second = (second + 1)%60;
  2689  00219C  0E01               	movlw	1
  2690  00219E  241F               	addwf	_second^0,w,c
  2691  0021A0  6E52               	movwf	___awmod@dividend^0,c
  2692  0021A2  0E00               	movlw	0
  2693  0021A4  2020               	addwfc	(_second+1)^0,w,c
  2694  0021A6  6E53               	movwf	(___awmod@dividend+1)^0,c
  2695  0021A8  0E00               	movlw	0
  2696  0021AA  6E55               	movwf	(___awmod@divisor+1)^0,c
  2697  0021AC  0E3C               	movlw	60
  2698  0021AE  6E54               	movwf	___awmod@divisor^0,c
  2699  0021B0  ECE0  F00C         	call	___awmod	;wreg free
  2700  0021B4  C052  F01F         	movff	?___awmod,_second
  2701  0021B8  C053  F020         	movff	?___awmod+1,_second+1
  2702  0021BC                     
  2703                           ;SECOND.c: 49:         normalFlag = 1;
  2704  0021BC  0E01               	movlw	1
  2705  0021BE  6E3B               	movwf	_normalFlag^0,c
  2706  0021C0                     
  2707                           ;SECOND.c: 50:         FastIncreaseFlag = 0;
  2708  0021C0  0E00               	movlw	0
  2709  0021C2  6E3F               	movwf	_FastIncreaseFlag^0,c
  2710  0021C4                     l1007:
  2711  0021C4  0012               	return		;funcret
  2712  0021C6                     __end_of_modify_SEC:
  2713                           	opt callstack 0
  2714                           
  2715 ;; *************** function _fMINUTE *****************
  2716 ;; Defined at:
  2717 ;;		line 53 in file "MINUTE.c"
  2718 ;; Parameters:    Size  Location     Type
  2719 ;;		None
  2720 ;; Auto vars:     Size  Location     Type
  2721 ;;		None
  2722 ;; Return value:  Size  Location     Type
  2723 ;;                  1    wreg      void 
  2724 ;; Registers used:
  2725 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2726 ;; Tracked objects:
  2727 ;;		On entry : 0/0
  2728 ;;		On exit  : 0/0
  2729 ;;		Unchanged: 0/0
  2730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2732 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2734 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2735 ;;Total ram usage:        0 bytes
  2736 ;; Hardware stack levels used:    1
  2737 ;; Hardware stack levels required when called:    9
  2738 ;; This function calls:
  2739 ;;		_LCDPutInst
  2740 ;;		_LCDPutStr
  2741 ;;		_disp_MINUTE
  2742 ;; This function is called by:
  2743 ;;		_FSM
  2744 ;; This function uses a non-reentrant model
  2745 ;;
  2746                           
  2747                           	psect	text19
  2748  001EC8                     __ptext19:
  2749                           	opt callstack 0
  2750  001EC8                     _fMINUTE:
  2751                           	opt callstack 20
  2752  001EC8                     
  2753                           ;MINUTE.c: 54:     if (checkMin)
  2754  001EC8  5046               	movf	_checkMin^0,w,c
  2755  001ECA  1047               	iorwf	(_checkMin+1)^0,w,c
  2756  001ECC  B4D8               	btfsc	status,2,c
  2757  001ECE  EF6B  F00F         	goto	u1871
  2758  001ED2  EF6D  F00F         	goto	u1870
  2759  001ED6                     u1871:
  2760  001ED6  EF95  F00F         	goto	l4005
  2761  001EDA                     u1870:
  2762  001EDA                     
  2763                           ;MINUTE.c: 55:         {;MINUTE.c: 57:             LCDPutInst(0x80);
  2764  001EDA  0E80               	movlw	128
  2765  001EDC  ECD3  F011         	call	_LCDPutInst
  2766  001EE0                     
  2767                           ;MINUTE.c: 58:             LCDPutStr("     MINUTE      ");
  2768  001EE0  0E28               	movlw	low STR_16
  2769  001EE2  0100               	movlb	0	; () banked
  2770  001EE4  6F60               	movwf	LCDPutStr@ptr& (0+255),b
  2771  001EE6  0E10               	movlw	high STR_16
  2772  001EE8  6F61               	movwf	(LCDPutStr@ptr+1)& (0+255),b
  2773  001EEA  EC93  F011         	call	_LCDPutStr	;wreg free
  2774  001EEE                     
  2775                           ;MINUTE.c: 59:             LCDPutInst(0xC0);
  2776  001EEE  0EC0               	movlw	192
  2777  001EF0  ECD3  F011         	call	_LCDPutInst
  2778                           
  2779                           ;MINUTE.c: 60:             LCDPutStr("RB0=Now RA5=Next");
  2780  001EF4  0E8F               	movlw	low STR_4
  2781  001EF6  0100               	movlb	0	; () banked
  2782  001EF8  6F60               	movwf	LCDPutStr@ptr& (0+255),b
  2783  001EFA  0E10               	movlw	high STR_4
  2784  001EFC  6F61               	movwf	(LCDPutStr@ptr+1)& (0+255),b
  2785  001EFE  EC93  F011         	call	_LCDPutStr	;wreg free
  2786  001F02                     
  2787                           ;MINUTE.c: 61:             checkClock = 1;
  2788  001F02  0E00               	movlw	0
  2789  001F04  6E4B               	movwf	(_checkClock+1)^0,c
  2790  001F06  0E01               	movlw	1
  2791  001F08  6E4A               	movwf	_checkClock^0,c
  2792  001F0A                     
  2793                           ;MINUTE.c: 62:             checkHr = 1;
  2794  001F0A  0E00               	movlw	0
  2795  001F0C  6E49               	movwf	(_checkHr+1)^0,c
  2796  001F0E  0E01               	movlw	1
  2797  001F10  6E48               	movwf	_checkHr^0,c
  2798  001F12                     
  2799                           ;MINUTE.c: 63:             checkMin = 0;
  2800  001F12  0E00               	movlw	0
  2801  001F14  6E47               	movwf	(_checkMin+1)^0,c
  2802  001F16  0E00               	movlw	0
  2803  001F18  6E46               	movwf	_checkMin^0,c
  2804  001F1A                     
  2805                           ;MINUTE.c: 64:             checkSc = 1;
  2806  001F1A  0E00               	movlw	0
  2807  001F1C  6E45               	movwf	(_checkSc+1)^0,c
  2808  001F1E  0E01               	movlw	1
  2809  001F20  6E44               	movwf	_checkSc^0,c
  2810  001F22                     
  2811                           ;MINUTE.c: 65:             checkSw = 1;
  2812  001F22  0E00               	movlw	0
  2813  001F24  6E43               	movwf	(_checkSw+1)^0,c
  2814  001F26  0E01               	movlw	1
  2815  001F28  6E42               	movwf	_checkSw^0,c
  2816  001F2A                     l4005:
  2817                           
  2818                           ;MINUTE.c: 67:     if (access_state == 1)
  2819  001F2A  0415               	decf	_access_state^0,w,c
  2820  001F2C  1016               	iorwf	(_access_state+1)^0,w,c
  2821  001F2E  A4D8               	btfss	status,2,c
  2822  001F30  EF9C  F00F         	goto	u1881
  2823  001F34  EF9E  F00F         	goto	u1880
  2824  001F38                     u1881:
  2825  001F38  EFA0  F00F         	goto	l902
  2826  001F3C                     u1880:
  2827  001F3C                     
  2828                           ;MINUTE.c: 68:     {;MINUTE.c: 69:         disp_MINUTE();
  2829  001F3C  EC09  F009         	call	_disp_MINUTE	;wreg free
  2830  001F40                     l902:
  2831  001F40  0012               	return		;funcret
  2832  001F42                     __end_of_fMINUTE:
  2833                           	opt callstack 0
  2834                           
  2835 ;; *************** function _disp_MINUTE *****************
  2836 ;; Defined at:
  2837 ;;		line 13 in file "MINUTE.c"
  2838 ;; Parameters:    Size  Location     Type
  2839 ;;		None
  2840 ;; Auto vars:     Size  Location     Type
  2841 ;;		None
  2842 ;; Return value:  Size  Location     Type
  2843 ;;                  1    wreg      void 
  2844 ;; Registers used:
  2845 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2846 ;; Tracked objects:
  2847 ;;		On entry : 0/0
  2848 ;;		On exit  : 0/0
  2849 ;;		Unchanged: 0/0
  2850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2854 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2855 ;;Total ram usage:        0 bytes
  2856 ;; Hardware stack levels used:    1
  2857 ;; Hardware stack levels required when called:    8
  2858 ;; This function calls:
  2859 ;;		_LCDPutChar
  2860 ;;		_LCDPutInst
  2861 ;;		_LCDPutStr
  2862 ;;		___awdiv
  2863 ;;		___awmod
  2864 ;;		_modify_MIN
  2865 ;; This function is called by:
  2866 ;;		_fMINUTE
  2867 ;; This function uses a non-reentrant model
  2868 ;;
  2869                           
  2870                           	psect	text20
  2871  001212                     __ptext20:
  2872                           	opt callstack 0
  2873  001212                     _disp_MINUTE:
  2874                           	opt callstack 20
  2875  001212                     
  2876                           ;MINUTE.c: 14:      if (timerflag)
  2877  001212  5038               	movf	_timerflag^0,w,c
  2878  001214  B4D8               	btfsc	status,2,c
  2879  001216  EF0F  F009         	goto	u1751
  2880  00121A  EF11  F009         	goto	u1750
  2881  00121E                     u1751:
  2882  00121E  EF15  F009         	goto	l3833
  2883  001222                     u1750:
  2884  001222                     
  2885                           ;MINUTE.c: 15:     {;MINUTE.c: 16:         count++;
  2886  001222  4A07               	infsnz	MINUTE@count^0,f,c
  2887  001224  2A08               	incf	(MINUTE@count+1)^0,f,c
  2888  001226                     
  2889                           ;MINUTE.c: 17:         timerflag = 0;
  2890  001226  0E00               	movlw	0
  2891  001228  6E38               	movwf	_timerflag^0,c
  2892  00122A                     l3833:
  2893                           
  2894                           ;MINUTE.c: 19:     if (count >= 50){
  2895  00122A  BE08               	btfsc	(MINUTE@count+1)^0,7,c
  2896  00122C  EF21  F009         	goto	u1761
  2897  001230  5008               	movf	(MINUTE@count+1)^0,w,c
  2898  001232  E109               	bnz	u1760
  2899  001234  0E32               	movlw	50
  2900  001236  5C07               	subwf	MINUTE@count^0,w,c
  2901  001238  A0D8               	btfss	status,0,c
  2902  00123A  EF21  F009         	goto	u1761
  2903  00123E  EF23  F009         	goto	u1760
  2904  001242                     u1761:
  2905  001242  EF2F  F009         	goto	l3839
  2906  001246                     u1760:
  2907  001246                     
  2908                           ;MINUTE.c: 20:         blinkflag = 1 - blinkflag;
  2909  001246  5005               	movf	MINUTE@blinkflag^0,w,c
  2910  001248  0801               	sublw	1
  2911  00124A  6E05               	movwf	MINUTE@blinkflag^0,c
  2912  00124C  5006               	movf	(MINUTE@blinkflag+1)^0,w,c
  2913  00124E  A0D8               	btfss	status,0,c
  2914  001250  2AE8               	incf	wreg,f,c
  2915  001252  0800               	sublw	0
  2916  001254  6E06               	movwf	(MINUTE@blinkflag+1)^0,c
  2917  001256                     
  2918                           ;MINUTE.c: 21:         count = 0;
  2919  001256  0E00               	movlw	0
  2920  001258  6E08               	movwf	(MINUTE@count+1)^0,c
  2921  00125A  0E00               	movlw	0
  2922  00125C  6E07               	movwf	MINUTE@count^0,c
  2923  00125E                     l3839:
  2924                           
  2925                           ;MINUTE.c: 23:     LCDPutInst(0x80);
  2926  00125E  0E80               	movlw	128
  2927  001260  ECD3  F011         	call	_LCDPutInst
  2928  001264                     
  2929                           ;MINUTE.c: 24:     LCDPutStr("    ");
  2930  001264  0E23               	movlw	low (STR_22+13)
  2931  001266  0100               	movlb	0	; () banked
  2932  001268  6F60               	movwf	LCDPutStr@ptr& (0+255),b
  2933  00126A  0E10               	movlw	high (STR_22+13)
  2934  00126C  6F61               	movwf	(LCDPutStr@ptr+1)& (0+255),b
  2935  00126E  EC93  F011         	call	_LCDPutStr	;wreg free
  2936  001272                     
  2937                           ;MINUTE.c: 25:     LCDPutChar(hour/10+'0');
  2938  001272  C023  F052         	movff	_hour,___awdiv@dividend
  2939  001276  C024  F053         	movff	_hour+1,___awdiv@dividend+1
  2940  00127A  0E00               	movlw	0
  2941  00127C  6E55               	movwf	(___awdiv@divisor+1)^0,c
  2942  00127E  0E0A               	movlw	10
  2943  001280  6E54               	movwf	___awdiv@divisor^0,c
  2944  001282  EC22  F00C         	call	___awdiv	;wreg free
  2945  001286  5052               	movf	?___awdiv^0,w,c
  2946  001288  0F30               	addlw	48
  2947  00128A  EC08  F012         	call	_LCDPutChar
  2948  00128E                     
  2949                           ;MINUTE.c: 26:     LCDPutChar(hour%10+'0');
  2950  00128E  C023  F052         	movff	_hour,___awmod@dividend
  2951  001292  C024  F053         	movff	_hour+1,___awmod@dividend+1
  2952  001296  0E00               	movlw	0
  2953  001298  6E55               	movwf	(___awmod@divisor+1)^0,c
  2954  00129A  0E0A               	movlw	10
  2955  00129C  6E54               	movwf	___awmod@divisor^0,c
  2956  00129E  ECE0  F00C         	call	___awmod	;wreg free
  2957  0012A2  5052               	movf	?___awmod^0,w,c
  2958  0012A4  0F30               	addlw	48
  2959  0012A6  EC08  F012         	call	_LCDPutChar
  2960  0012AA                     
  2961                           ;MINUTE.c: 27:     LCDPutChar(':');
  2962  0012AA  0E3A               	movlw	58
  2963  0012AC  EC08  F012         	call	_LCDPutChar
  2964  0012B0                     
  2965                           ;MINUTE.c: 28:     if (blinkflag)
  2966  0012B0  5005               	movf	MINUTE@blinkflag^0,w,c
  2967  0012B2  1006               	iorwf	(MINUTE@blinkflag+1)^0,w,c
  2968  0012B4  B4D8               	btfsc	status,2,c
  2969  0012B6  EF5F  F009         	goto	u1771
  2970  0012BA  EF61  F009         	goto	u1770
  2971  0012BE                     u1771:
  2972  0012BE  EF7F  F009         	goto	l3853
  2973  0012C2                     u1770:
  2974  0012C2                     
  2975                           ;MINUTE.c: 29:     {;MINUTE.c: 31:         LCDPutChar(minute/10+'0');
  2976  0012C2  C021  F052         	movff	_minute,___awdiv@dividend
  2977  0012C6  C022  F053         	movff	_minute+1,___awdiv@dividend+1
  2978  0012CA  0E00               	movlw	0
  2979  0012CC  6E55               	movwf	(___awdiv@divisor+1)^0,c
  2980  0012CE  0E0A               	movlw	10
  2981  0012D0  6E54               	movwf	___awdiv@divisor^0,c
  2982  0012D2  EC22  F00C         	call	___awdiv	;wreg free
  2983  0012D6  5052               	movf	?___awdiv^0,w,c
  2984  0012D8  0F30               	addlw	48
  2985  0012DA  EC08  F012         	call	_LCDPutChar
  2986                           
  2987                           ;MINUTE.c: 32:         LCDPutChar(minute%10+'0');
  2988  0012DE  C021  F052         	movff	_minute,___awmod@dividend
  2989  0012E2  C022  F053         	movff	_minute+1,___awmod@dividend+1
  2990  0012E6  0E00               	movlw	0
  2991  0012E8  6E55               	movwf	(___awmod@divisor+1)^0,c
  2992  0012EA  0E0A               	movlw	10
  2993  0012EC  6E54               	movwf	___awmod@divisor^0,c
  2994  0012EE  ECE0  F00C         	call	___awmod	;wreg free
  2995  0012F2  5052               	movf	?___awmod^0,w,c
  2996  0012F4  0F30               	addlw	48
  2997  0012F6  EC08  F012         	call	_LCDPutChar
  2998                           
  2999                           ;MINUTE.c: 33:     }
  3000  0012FA  EF86  F009         	goto	l3855
  3001  0012FE                     l3853:
  3002                           
  3003                           ;MINUTE.c: 35:     {;MINUTE.c: 36:         LCDPutStr("  ");
  3004  0012FE  0E25               	movlw	low (STR_22+15)
  3005  001300  0100               	movlb	0	; () banked
  3006  001302  6F60               	movwf	LCDPutStr@ptr& (0+255),b
  3007  001304  0E10               	movlw	high (STR_22+15)
  3008  001306  6F61               	movwf	(LCDPutStr@ptr+1)& (0+255),b
  3009  001308  EC93  F011         	call	_LCDPutStr	;wreg free
  3010  00130C                     l3855:
  3011                           
  3012                           ;MINUTE.c: 38:     LCDPutChar(':');
  3013  00130C  0E3A               	movlw	58
  3014  00130E  EC08  F012         	call	_LCDPutChar
  3015  001312                     
  3016                           ;MINUTE.c: 39:     LCDPutChar(second/10+'0');
  3017  001312  C01F  F052         	movff	_second,___awdiv@dividend
  3018  001316  C020  F053         	movff	_second+1,___awdiv@dividend+1
  3019  00131A  0E00               	movlw	0
  3020  00131C  6E55               	movwf	(___awdiv@divisor+1)^0,c
  3021  00131E  0E0A               	movlw	10
  3022  001320  6E54               	movwf	___awdiv@divisor^0,c
  3023  001322  EC22  F00C         	call	___awdiv	;wreg free
  3024  001326  5052               	movf	?___awdiv^0,w,c
  3025  001328  0F30               	addlw	48
  3026  00132A  EC08  F012         	call	_LCDPutChar
  3027  00132E                     
  3028                           ;MINUTE.c: 40:     LCDPutChar(second%10+'0');
  3029  00132E  C01F  F052         	movff	_second,___awmod@dividend
  3030  001332  C020  F053         	movff	_second+1,___awmod@dividend+1
  3031  001336  0E00               	movlw	0
  3032  001338  6E55               	movwf	(___awmod@divisor+1)^0,c
  3033  00133A  0E0A               	movlw	10
  3034  00133C  6E54               	movwf	___awmod@divisor^0,c
  3035  00133E  ECE0  F00C         	call	___awmod	;wreg free
  3036  001342  5052               	movf	?___awmod^0,w,c
  3037  001344  0F30               	addlw	48
  3038  001346  EC08  F012         	call	_LCDPutChar
  3039  00134A                     
  3040                           ;MINUTE.c: 41:     LCDPutStr("    ");
  3041  00134A  0E23               	movlw	low (STR_22+13)
  3042  00134C  0100               	movlb	0	; () banked
  3043  00134E  6F60               	movwf	LCDPutStr@ptr& (0+255),b
  3044  001350  0E10               	movlw	high (STR_22+13)
  3045  001352  6F61               	movwf	(LCDPutStr@ptr+1)& (0+255),b
  3046  001354  EC93  F011         	call	_LCDPutStr	;wreg free
  3047                           
  3048                           ;MINUTE.c: 42:     LCDPutInst(0xC0);
  3049  001358  0EC0               	movlw	192
  3050  00135A  ECD3  F011         	call	_LCDPutInst
  3051  00135E                     
  3052                           ;MINUTE.c: 43:     LCDPutStr("        RA5=Next");
  3053  00135E  0E7E               	movlw	low STR_5
  3054  001360  0100               	movlb	0	; () banked
  3055  001362  6F60               	movwf	LCDPutStr@ptr& (0+255),b
  3056  001364  0E10               	movlw	high STR_5
  3057  001366  6F61               	movwf	(LCDPutStr@ptr+1)& (0+255),b
  3058  001368  EC93  F011         	call	_LCDPutStr	;wreg free
  3059  00136C                     
  3060                           ;MINUTE.c: 44:     modify_MIN();
  3061  00136C  ECE3  F010         	call	_modify_MIN	;wreg free
  3062  001370  0012               	return		;funcret
  3063  001372                     __end_of_disp_MINUTE:
  3064                           	opt callstack 0
  3065                           
  3066 ;; *************** function _modify_MIN *****************
  3067 ;; Defined at:
  3068 ;;		line 46 in file "MINUTE.c"
  3069 ;; Parameters:    Size  Location     Type
  3070 ;;		None
  3071 ;; Auto vars:     Size  Location     Type
  3072 ;;		None
  3073 ;; Return value:  Size  Location     Type
  3074 ;;                  1    wreg      void 
  3075 ;; Registers used:
  3076 ;;		wreg, status,2, status,0, cstack
  3077 ;; Tracked objects:
  3078 ;;		On entry : 0/0
  3079 ;;		On exit  : 0/0
  3080 ;;		Unchanged: 0/0
  3081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3083 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3085 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3086 ;;Total ram usage:        0 bytes
  3087 ;; Hardware stack levels used:    1
  3088 ;; Hardware stack levels required when called:    5
  3089 ;; This function calls:
  3090 ;;		___awmod
  3091 ;; This function is called by:
  3092 ;;		_disp_MINUTE
  3093 ;; This function uses a non-reentrant model
  3094 ;;
  3095                           
  3096                           	psect	text21
  3097  0021C6                     __ptext21:
  3098                           	opt callstack 0
  3099  0021C6                     _modify_MIN:
  3100                           	opt callstack 22
  3101  0021C6                     
  3102                           ;MINUTE.c: 47:     if ((pRB0 && !normalFlag) || FastIncreaseFlag){
  3103  0021C6  5029               	movf	_pRB0^0,w,c
  3104  0021C8  102A               	iorwf	(_pRB0+1)^0,w,c
  3105  0021CA  B4D8               	btfsc	status,2,c
  3106  0021CC  EFEA  F010         	goto	u1021
  3107  0021D0  EFEC  F010         	goto	u1020
  3108  0021D4                     u1021:
  3109  0021D4  EFF4  F010         	goto	l3065
  3110  0021D8                     u1020:
  3111  0021D8  503B               	movf	_normalFlag^0,w,c
  3112  0021DA  B4D8               	btfsc	status,2,c
  3113  0021DC  EFF2  F010         	goto	u1031
  3114  0021E0  EFF4  F010         	goto	u1030
  3115  0021E4                     u1031:
  3116  0021E4  EFFC  F010         	goto	l3067
  3117  0021E8                     u1030:
  3118  0021E8                     l3065:
  3119  0021E8  503F               	movf	_FastIncreaseFlag^0,w,c
  3120  0021EA  B4D8               	btfsc	status,2,c
  3121  0021EC  EFFA  F010         	goto	u1041
  3122  0021F0  EFFC  F010         	goto	u1040
  3123  0021F4                     u1041:
  3124  0021F4  EF10  F011         	goto	l897
  3125  0021F8                     u1040:
  3126  0021F8                     l3067:
  3127                           
  3128                           ;MINUTE.c: 48:         minute = (minute + 1)%60;
  3129  0021F8  0E01               	movlw	1
  3130  0021FA  2421               	addwf	_minute^0,w,c
  3131  0021FC  6E52               	movwf	___awmod@dividend^0,c
  3132  0021FE  0E00               	movlw	0
  3133  002200  2022               	addwfc	(_minute+1)^0,w,c
  3134  002202  6E53               	movwf	(___awmod@dividend+1)^0,c
  3135  002204  0E00               	movlw	0
  3136  002206  6E55               	movwf	(___awmod@divisor+1)^0,c
  3137  002208  0E3C               	movlw	60
  3138  00220A  6E54               	movwf	___awmod@divisor^0,c
  3139  00220C  ECE0  F00C         	call	___awmod	;wreg free
  3140  002210  C052  F021         	movff	?___awmod,_minute
  3141  002214  C053  F022         	movff	?___awmod+1,_minute+1
  3142  002218                     
  3143                           ;MINUTE.c: 49:         normalFlag = 1;
  3144  002218  0E01               	movlw	1
  3145  00221A  6E3B               	movwf	_normalFlag^0,c
  3146  00221C                     
  3147                           ;MINUTE.c: 50:         FastIncreaseFlag = 0;
  3148  00221C  0E00               	movlw	0
  3149  00221E  6E3F               	movwf	_FastIncreaseFlag^0,c
  3150  002220                     l897:
  3151  002220  0012               	return		;funcret
  3152  002222                     __end_of_modify_MIN:
  3153                           	opt callstack 0
  3154                           
  3155 ;; *************** function _fHOUR *****************
  3156 ;; Defined at:
  3157 ;;		line 52 in file "HOUR.c"
  3158 ;; Parameters:    Size  Location     Type
  3159 ;;		None
  3160 ;; Auto vars:     Size  Location     Type
  3161 ;;		None
  3162 ;; Return value:  Size  Location     Type
  3163 ;;                  1    wreg      void 
  3164 ;; Registers used:
  3165 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3166 ;; Tracked objects:
  3167 ;;		On entry : 0/0
  3168 ;;		On exit  : 0/0
  3169 ;;		Unchanged: 0/0
  3170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3172 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3174 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3175 ;;Total ram usage:        0 bytes
  3176 ;; Hardware stack levels used:    1
  3177 ;; Hardware stack levels required when called:    9
  3178 ;; This function calls:
  3179 ;;		_LCDPutInst
  3180 ;;		_LCDPutStr
  3181 ;;		_disp_HOUR
  3182 ;; This function is called by:
  3183 ;;		_FSM
  3184 ;; This function uses a non-reentrant model
  3185 ;;
  3186                           
  3187                           	psect	text22
  3188  001F42                     __ptext22:
  3189                           	opt callstack 0
  3190  001F42                     _fHOUR:
  3191                           	opt callstack 20
  3192  001F42                     
  3193                           ;HOUR.c: 53:     if (checkHr)
  3194  001F42  5048               	movf	_checkHr^0,w,c
  3195  001F44  1049               	iorwf	(_checkHr+1)^0,w,c
  3196  001F46  B4D8               	btfsc	status,2,c
  3197  001F48  EFA8  F00F         	goto	u1851
  3198  001F4C  EFAA  F00F         	goto	u1850
  3199  001F50                     u1851:
  3200  001F50  EFD2  F00F         	goto	l3983
  3201  001F54                     u1850:
  3202  001F54                     
  3203                           ;HOUR.c: 54:         {;HOUR.c: 55:             LCDPutInst(0x80);
  3204  001F54  0E80               	movlw	128
  3205  001F56  ECD3  F011         	call	_LCDPutInst
  3206  001F5A                     
  3207                           ;HOUR.c: 56:             LCDPutStr("     HOUR      ");
  3208  001F5A  0EA0               	movlw	low STR_10
  3209  001F5C  0100               	movlb	0	; () banked
  3210  001F5E  6F60               	movwf	LCDPutStr@ptr& (0+255),b
  3211  001F60  0E10               	movlw	high STR_10
  3212  001F62  6F61               	movwf	(LCDPutStr@ptr+1)& (0+255),b
  3213  001F64  EC93  F011         	call	_LCDPutStr	;wreg free
  3214  001F68                     
  3215                           ;HOUR.c: 57:             LCDPutInst(0xC0);
  3216  001F68  0EC0               	movlw	192
  3217  001F6A  ECD3  F011         	call	_LCDPutInst
  3218                           
  3219                           ;HOUR.c: 58:             LCDPutStr("RB0=Now RA5=Next");
  3220  001F6E  0E8F               	movlw	low STR_4
  3221  001F70  0100               	movlb	0	; () banked
  3222  001F72  6F60               	movwf	LCDPutStr@ptr& (0+255),b
  3223  001F74  0E10               	movlw	high STR_4
  3224  001F76  6F61               	movwf	(LCDPutStr@ptr+1)& (0+255),b
  3225  001F78  EC93  F011         	call	_LCDPutStr	;wreg free
  3226  001F7C                     
  3227                           ;HOUR.c: 59:             checkClock = 1;
  3228  001F7C  0E00               	movlw	0
  3229  001F7E  6E4B               	movwf	(_checkClock+1)^0,c
  3230  001F80  0E01               	movlw	1
  3231  001F82  6E4A               	movwf	_checkClock^0,c
  3232  001F84                     
  3233                           ;HOUR.c: 60:             checkHr = 0;
  3234  001F84  0E00               	movlw	0
  3235  001F86  6E49               	movwf	(_checkHr+1)^0,c
  3236  001F88  0E00               	movlw	0
  3237  001F8A  6E48               	movwf	_checkHr^0,c
  3238  001F8C                     
  3239                           ;HOUR.c: 61:             checkMin = 1;
  3240  001F8C  0E00               	movlw	0
  3241  001F8E  6E47               	movwf	(_checkMin+1)^0,c
  3242  001F90  0E01               	movlw	1
  3243  001F92  6E46               	movwf	_checkMin^0,c
  3244  001F94                     
  3245                           ;HOUR.c: 62:             checkSc = 1;
  3246  001F94  0E00               	movlw	0
  3247  001F96  6E45               	movwf	(_checkSc+1)^0,c
  3248  001F98  0E01               	movlw	1
  3249  001F9A  6E44               	movwf	_checkSc^0,c
  3250  001F9C                     
  3251                           ;HOUR.c: 63:             checkSw = 1;
  3252  001F9C  0E00               	movlw	0
  3253  001F9E  6E43               	movwf	(_checkSw+1)^0,c
  3254  001FA0  0E01               	movlw	1
  3255  001FA2  6E42               	movwf	_checkSw^0,c
  3256  001FA4                     l3983:
  3257                           
  3258                           ;HOUR.c: 65:     if (access_state == 1)
  3259  001FA4  0415               	decf	_access_state^0,w,c
  3260  001FA6  1016               	iorwf	(_access_state+1)^0,w,c
  3261  001FA8  A4D8               	btfss	status,2,c
  3262  001FAA  EFD9  F00F         	goto	u1861
  3263  001FAE  EFDB  F00F         	goto	u1860
  3264  001FB2                     u1861:
  3265  001FB2  EFDD  F00F         	goto	l792
  3266  001FB6                     u1860:
  3267  001FB6                     
  3268                           ;HOUR.c: 66:     {;HOUR.c: 67:         disp_HOUR();
  3269  001FB6  ECB9  F009         	call	_disp_HOUR	;wreg free
  3270  001FBA                     l792:
  3271  001FBA  0012               	return		;funcret
  3272  001FBC                     __end_of_fHOUR:
  3273                           	opt callstack 0
  3274                           
  3275 ;; *************** function _disp_HOUR *****************
  3276 ;; Defined at:
  3277 ;;		line 13 in file "HOUR.c"
  3278 ;; Parameters:    Size  Location     Type
  3279 ;;		None
  3280 ;; Auto vars:     Size  Location     Type
  3281 ;;		None
  3282 ;; Return value:  Size  Location     Type
  3283 ;;                  1    wreg      void 
  3284 ;; Registers used:
  3285 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3286 ;; Tracked objects:
  3287 ;;		On entry : 0/0
  3288 ;;		On exit  : 0/0
  3289 ;;		Unchanged: 0/0
  3290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3291 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3292 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3294 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3295 ;;Total ram usage:        0 bytes
  3296 ;; Hardware stack levels used:    1
  3297 ;; Hardware stack levels required when called:    8
  3298 ;; This function calls:
  3299 ;;		_LCDPutChar
  3300 ;;		_LCDPutInst
  3301 ;;		_LCDPutStr
  3302 ;;		___awdiv
  3303 ;;		___awmod
  3304 ;;		_modify_HOUR
  3305 ;; This function is called by:
  3306 ;;		_fHOUR
  3307 ;; This function uses a non-reentrant model
  3308 ;;
  3309                           
  3310                           	psect	text23
  3311  001372                     __ptext23:
  3312                           	opt callstack 0
  3313  001372                     _disp_HOUR:
  3314                           	opt callstack 20
  3315  001372                     
  3316                           ;HOUR.c: 14:     if (timerflag)
  3317  001372  5038               	movf	_timerflag^0,w,c
  3318  001374  B4D8               	btfsc	status,2,c
  3319  001376  EFBF  F009         	goto	u1721
  3320  00137A  EFC1  F009         	goto	u1720
  3321  00137E                     u1721:
  3322  00137E  EFC5  F009         	goto	l3795
  3323  001382                     u1720:
  3324  001382                     
  3325                           ;HOUR.c: 15:     {;HOUR.c: 16:         count++;
  3326  001382  4A0B               	infsnz	_count^0,f,c
  3327  001384  2A0C               	incf	(_count+1)^0,f,c
  3328  001386                     
  3329                           ;HOUR.c: 17:         timerflag = 0;
  3330  001386  0E00               	movlw	0
  3331  001388  6E38               	movwf	_timerflag^0,c
  3332  00138A                     l3795:
  3333                           
  3334                           ;HOUR.c: 19:     if (count >= 50){
  3335  00138A  BE0C               	btfsc	(_count+1)^0,7,c
  3336  00138C  EFD1  F009         	goto	u1731
  3337  001390  500C               	movf	(_count+1)^0,w,c
  3338  001392  E109               	bnz	u1730
  3339  001394  0E32               	movlw	50
  3340  001396  5C0B               	subwf	_count^0,w,c
  3341  001398  A0D8               	btfss	status,0,c
  3342  00139A  EFD1  F009         	goto	u1731
  3343  00139E  EFD3  F009         	goto	u1730
  3344  0013A2                     u1731:
  3345  0013A2  EFDF  F009         	goto	l3801
  3346  0013A6                     u1730:
  3347  0013A6                     
  3348                           ;HOUR.c: 20:         blinkflag = 1 - blinkflag;
  3349  0013A6  5009               	movf	_blinkflag^0,w,c
  3350  0013A8  0801               	sublw	1
  3351  0013AA  6E09               	movwf	_blinkflag^0,c
  3352  0013AC  500A               	movf	(_blinkflag+1)^0,w,c
  3353  0013AE  A0D8               	btfss	status,0,c
  3354  0013B0  2AE8               	incf	wreg,f,c
  3355  0013B2  0800               	sublw	0
  3356  0013B4  6E0A               	movwf	(_blinkflag+1)^0,c
  3357  0013B6                     
  3358                           ;HOUR.c: 21:         count = 0;
  3359  0013B6  0E00               	movlw	0
  3360  0013B8  6E0C               	movwf	(_count+1)^0,c
  3361  0013BA  0E00               	movlw	0
  3362  0013BC  6E0B               	movwf	_count^0,c
  3363  0013BE                     l3801:
  3364                           
  3365                           ;HOUR.c: 23:     LCDPutInst(0x80);
  3366  0013BE  0E80               	movlw	128
  3367  0013C0  ECD3  F011         	call	_LCDPutInst
  3368  0013C4                     
  3369                           ;HOUR.c: 24:     LCDPutStr("    ");
  3370  0013C4  0E23               	movlw	low (STR_22+13)
  3371  0013C6  0100               	movlb	0	; () banked
  3372  0013C8  6F60               	movwf	LCDPutStr@ptr& (0+255),b
  3373  0013CA  0E10               	movlw	high (STR_22+13)
  3374  0013CC  6F61               	movwf	(LCDPutStr@ptr+1)& (0+255),b
  3375  0013CE  EC93  F011         	call	_LCDPutStr	;wreg free
  3376  0013D2                     
  3377                           ;HOUR.c: 25:     if (blinkflag)
  3378  0013D2  5009               	movf	_blinkflag^0,w,c
  3379  0013D4  100A               	iorwf	(_blinkflag+1)^0,w,c
  3380  0013D6  B4D8               	btfsc	status,2,c
  3381  0013D8  EFF0  F009         	goto	u1741
  3382  0013DC  EFF2  F009         	goto	u1740
  3383  0013E0                     u1741:
  3384  0013E0  EF10  F00A         	goto	l3809
  3385  0013E4                     u1740:
  3386  0013E4                     
  3387                           ;HOUR.c: 26:     {;HOUR.c: 27:         LCDPutChar(hour/10+'0');
  3388  0013E4  C023  F052         	movff	_hour,___awdiv@dividend
  3389  0013E8  C024  F053         	movff	_hour+1,___awdiv@dividend+1
  3390  0013EC  0E00               	movlw	0
  3391  0013EE  6E55               	movwf	(___awdiv@divisor+1)^0,c
  3392  0013F0  0E0A               	movlw	10
  3393  0013F2  6E54               	movwf	___awdiv@divisor^0,c
  3394  0013F4  EC22  F00C         	call	___awdiv	;wreg free
  3395  0013F8  5052               	movf	?___awdiv^0,w,c
  3396  0013FA  0F30               	addlw	48
  3397  0013FC  EC08  F012         	call	_LCDPutChar
  3398                           
  3399                           ;HOUR.c: 28:         LCDPutChar(hour%10+'0');
  3400  001400  C023  F052         	movff	_hour,___awmod@dividend
  3401  001404  C024  F053         	movff	_hour+1,___awmod@dividend+1
  3402  001408  0E00               	movlw	0
  3403  00140A  6E55               	movwf	(___awmod@divisor+1)^0,c
  3404  00140C  0E0A               	movlw	10
  3405  00140E  6E54               	movwf	___awmod@divisor^0,c
  3406  001410  ECE0  F00C         	call	___awmod	;wreg free
  3407  001414  5052               	movf	?___awmod^0,w,c
  3408  001416  0F30               	addlw	48
  3409  001418  EC08  F012         	call	_LCDPutChar
  3410                           
  3411                           ;HOUR.c: 29:     }
  3412  00141C  EF17  F00A         	goto	l3811
  3413  001420                     l3809:
  3414                           
  3415                           ;HOUR.c: 31:     {;HOUR.c: 32:         LCDPutStr("  ");
  3416  001420  0E25               	movlw	low (STR_22+15)
  3417  001422  0100               	movlb	0	; () banked
  3418  001424  6F60               	movwf	LCDPutStr@ptr& (0+255),b
  3419  001426  0E10               	movlw	high (STR_22+15)
  3420  001428  6F61               	movwf	(LCDPutStr@ptr+1)& (0+255),b
  3421  00142A  EC93  F011         	call	_LCDPutStr	;wreg free
  3422  00142E                     l3811:
  3423                           
  3424                           ;HOUR.c: 34:     LCDPutChar(':');
  3425  00142E  0E3A               	movlw	58
  3426  001430  EC08  F012         	call	_LCDPutChar
  3427  001434                     
  3428                           ;HOUR.c: 35:     LCDPutChar(minute/10+'0');
  3429  001434  C021  F052         	movff	_minute,___awdiv@dividend
  3430  001438  C022  F053         	movff	_minute+1,___awdiv@dividend+1
  3431  00143C  0E00               	movlw	0
  3432  00143E  6E55               	movwf	(___awdiv@divisor+1)^0,c
  3433  001440  0E0A               	movlw	10
  3434  001442  6E54               	movwf	___awdiv@divisor^0,c
  3435  001444  EC22  F00C         	call	___awdiv	;wreg free
  3436  001448  5052               	movf	?___awdiv^0,w,c
  3437  00144A  0F30               	addlw	48
  3438  00144C  EC08  F012         	call	_LCDPutChar
  3439  001450                     
  3440                           ;HOUR.c: 36:     LCDPutChar(minute%10+'0');
  3441  001450  C021  F052         	movff	_minute,___awmod@dividend
  3442  001454  C022  F053         	movff	_minute+1,___awmod@dividend+1
  3443  001458  0E00               	movlw	0
  3444  00145A  6E55               	movwf	(___awmod@divisor+1)^0,c
  3445  00145C  0E0A               	movlw	10
  3446  00145E  6E54               	movwf	___awmod@divisor^0,c
  3447  001460  ECE0  F00C         	call	___awmod	;wreg free
  3448  001464  5052               	movf	?___awmod^0,w,c
  3449  001466  0F30               	addlw	48
  3450  001468  EC08  F012         	call	_LCDPutChar
  3451  00146C                     
  3452                           ;HOUR.c: 37:     LCDPutChar(':');
  3453  00146C  0E3A               	movlw	58
  3454  00146E  EC08  F012         	call	_LCDPutChar
  3455  001472                     
  3456                           ;HOUR.c: 38:     LCDPutChar(second/10+'0');
  3457  001472  C01F  F052         	movff	_second,___awdiv@dividend
  3458  001476  C020  F053         	movff	_second+1,___awdiv@dividend+1
  3459  00147A  0E00               	movlw	0
  3460  00147C  6E55               	movwf	(___awdiv@divisor+1)^0,c
  3461  00147E  0E0A               	movlw	10
  3462  001480  6E54               	movwf	___awdiv@divisor^0,c
  3463  001482  EC22  F00C         	call	___awdiv	;wreg free
  3464  001486  5052               	movf	?___awdiv^0,w,c
  3465  001488  0F30               	addlw	48
  3466  00148A  EC08  F012         	call	_LCDPutChar
  3467  00148E                     
  3468                           ;HOUR.c: 39:     LCDPutChar(second%10+'0');
  3469  00148E  C01F  F052         	movff	_second,___awmod@dividend
  3470  001492  C020  F053         	movff	_second+1,___awmod@dividend+1
  3471  001496  0E00               	movlw	0
  3472  001498  6E55               	movwf	(___awmod@divisor+1)^0,c
  3473  00149A  0E0A               	movlw	10
  3474  00149C  6E54               	movwf	___awmod@divisor^0,c
  3475  00149E  ECE0  F00C         	call	___awmod	;wreg free
  3476  0014A2  5052               	movf	?___awmod^0,w,c
  3477  0014A4  0F30               	addlw	48
  3478  0014A6  EC08  F012         	call	_LCDPutChar
  3479                           
  3480                           ;HOUR.c: 40:     LCDPutStr("    ");
  3481  0014AA  0E23               	movlw	low (STR_22+13)
  3482  0014AC  0100               	movlb	0	; () banked
  3483  0014AE  6F60               	movwf	LCDPutStr@ptr& (0+255),b
  3484  0014B0  0E10               	movlw	high (STR_22+13)
  3485  0014B2  6F61               	movwf	(LCDPutStr@ptr+1)& (0+255),b
  3486  0014B4  EC93  F011         	call	_LCDPutStr	;wreg free
  3487  0014B8                     
  3488                           ;HOUR.c: 41:     LCDPutInst(0xC0);
  3489  0014B8  0EC0               	movlw	192
  3490  0014BA  ECD3  F011         	call	_LCDPutInst
  3491  0014BE                     
  3492                           ;HOUR.c: 42:     LCDPutStr("        RA5=Next");
  3493  0014BE  0E7E               	movlw	low STR_5
  3494  0014C0  0100               	movlb	0	; () banked
  3495  0014C2  6F60               	movwf	LCDPutStr@ptr& (0+255),b
  3496  0014C4  0E10               	movlw	high STR_5
  3497  0014C6  6F61               	movwf	(LCDPutStr@ptr+1)& (0+255),b
  3498  0014C8  EC93  F011         	call	_LCDPutStr	;wreg free
  3499                           
  3500                           ;HOUR.c: 43:     modify_HOUR();
  3501  0014CC  EC11  F011         	call	_modify_HOUR	;wreg free
  3502  0014D0  0012               	return		;funcret
  3503  0014D2                     __end_of_disp_HOUR:
  3504                           	opt callstack 0
  3505                           
  3506 ;; *************** function _modify_HOUR *****************
  3507 ;; Defined at:
  3508 ;;		line 45 in file "HOUR.c"
  3509 ;; Parameters:    Size  Location     Type
  3510 ;;		None
  3511 ;; Auto vars:     Size  Location     Type
  3512 ;;		None
  3513 ;; Return value:  Size  Location     Type
  3514 ;;                  1    wreg      void 
  3515 ;; Registers used:
  3516 ;;		wreg, status,2, status,0, cstack
  3517 ;; Tracked objects:
  3518 ;;		On entry : 0/0
  3519 ;;		On exit  : 0/0
  3520 ;;		Unchanged: 0/0
  3521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3525 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3526 ;;Total ram usage:        0 bytes
  3527 ;; Hardware stack levels used:    1
  3528 ;; Hardware stack levels required when called:    5
  3529 ;; This function calls:
  3530 ;;		___awmod
  3531 ;; This function is called by:
  3532 ;;		_disp_HOUR
  3533 ;; This function uses a non-reentrant model
  3534 ;;
  3535                           
  3536                           	psect	text24
  3537  002222                     __ptext24:
  3538                           	opt callstack 0
  3539  002222                     _modify_HOUR:
  3540                           	opt callstack 22
  3541  002222                     
  3542                           ;HOUR.c: 46:     if ((pRB0 && !normalFlag) || FastIncreaseFlag){
  3543  002222  5029               	movf	_pRB0^0,w,c
  3544  002224  102A               	iorwf	(_pRB0+1)^0,w,c
  3545  002226  B4D8               	btfsc	status,2,c
  3546  002228  EF18  F011         	goto	u991
  3547  00222C  EF1A  F011         	goto	u990
  3548  002230                     u991:
  3549  002230  EF22  F011         	goto	l3053
  3550  002234                     u990:
  3551  002234  503B               	movf	_normalFlag^0,w,c
  3552  002236  B4D8               	btfsc	status,2,c
  3553  002238  EF20  F011         	goto	u1001
  3554  00223C  EF22  F011         	goto	u1000
  3555  002240                     u1001:
  3556  002240  EF2A  F011         	goto	l3055
  3557  002244                     u1000:
  3558  002244                     l3053:
  3559  002244  503F               	movf	_FastIncreaseFlag^0,w,c
  3560  002246  B4D8               	btfsc	status,2,c
  3561  002248  EF28  F011         	goto	u1011
  3562  00224C  EF2A  F011         	goto	u1010
  3563  002250                     u1011:
  3564  002250  EF3E  F011         	goto	l787
  3565  002254                     u1010:
  3566  002254                     l3055:
  3567                           
  3568                           ;HOUR.c: 47:         hour = (hour + 1)%24;
  3569  002254  0E01               	movlw	1
  3570  002256  2423               	addwf	_hour^0,w,c
  3571  002258  6E52               	movwf	___awmod@dividend^0,c
  3572  00225A  0E00               	movlw	0
  3573  00225C  2024               	addwfc	(_hour+1)^0,w,c
  3574  00225E  6E53               	movwf	(___awmod@dividend+1)^0,c
  3575  002260  0E00               	movlw	0
  3576  002262  6E55               	movwf	(___awmod@divisor+1)^0,c
  3577  002264  0E18               	movlw	24
  3578  002266  6E54               	movwf	___awmod@divisor^0,c
  3579  002268  ECE0  F00C         	call	___awmod	;wreg free
  3580  00226C  C052  F023         	movff	?___awmod,_hour
  3581  002270  C053  F024         	movff	?___awmod+1,_hour+1
  3582  002274                     
  3583                           ;HOUR.c: 48:         normalFlag = 1;
  3584  002274  0E01               	movlw	1
  3585  002276  6E3B               	movwf	_normalFlag^0,c
  3586  002278                     
  3587                           ;HOUR.c: 49:         FastIncreaseFlag = 0;
  3588  002278  0E00               	movlw	0
  3589  00227A  6E3F               	movwf	_FastIncreaseFlag^0,c
  3590  00227C                     l787:
  3591  00227C  0012               	return		;funcret
  3592  00227E                     __end_of_modify_HOUR:
  3593                           	opt callstack 0
  3594                           
  3595 ;; *************** function _fCLOCK *****************
  3596 ;; Defined at:
  3597 ;;		line 28 in file "CLOCK.c"
  3598 ;; Parameters:    Size  Location     Type
  3599 ;;		None
  3600 ;; Auto vars:     Size  Location     Type
  3601 ;;		None
  3602 ;; Return value:  Size  Location     Type
  3603 ;;                  1    wreg      void 
  3604 ;; Registers used:
  3605 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3606 ;; Tracked objects:
  3607 ;;		On entry : 0/0
  3608 ;;		On exit  : 0/0
  3609 ;;		Unchanged: 0/0
  3610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3612 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3614 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3615 ;;Total ram usage:        0 bytes
  3616 ;; Hardware stack levels used:    1
  3617 ;; Hardware stack levels required when called:   10
  3618 ;; This function calls:
  3619 ;;		_LCDPutInst
  3620 ;;		_LCDPutStr
  3621 ;;		_count_Clock
  3622 ;; This function is called by:
  3623 ;;		_FSM
  3624 ;; This function uses a non-reentrant model
  3625 ;;
  3626                           
  3627                           	psect	text25
  3628  001BAA                     __ptext25:
  3629                           	opt callstack 0
  3630  001BAA                     _fCLOCK:
  3631                           	opt callstack 19
  3632  001BAA                     
  3633                           ;CLOCK.c: 29:          if (checkClock)
  3634  001BAA  504A               	movf	_checkClock^0,w,c
  3635  001BAC  104B               	iorwf	(_checkClock+1)^0,w,c
  3636  001BAE  B4D8               	btfsc	status,2,c
  3637  001BB0  EFDC  F00D         	goto	u1831
  3638  001BB4  EFDE  F00D         	goto	u1830
  3639  001BB8                     u1831:
  3640  001BB8  EF16  F00E         	goto	l3961
  3641  001BBC                     u1830:
  3642  001BBC                     
  3643                           ;CLOCK.c: 30:         {;CLOCK.c: 31:             firstTime =1 ;
  3644  001BBC  0E00               	movlw	0
  3645  001BBE  6E41               	movwf	(_firstTime+1)^0,c
  3646  001BC0  0E01               	movlw	1
  3647  001BC2  6E40               	movwf	_firstTime^0,c
  3648                           
  3649                           ;CLOCK.c: 32:             sw_10ms = 0;
  3650  001BC4  0E00               	movlw	0
  3651  001BC6  6E1C               	movwf	(_sw_10ms+1)^0,c
  3652  001BC8  0E00               	movlw	0
  3653  001BCA  6E1B               	movwf	_sw_10ms^0,c
  3654                           
  3655                           ;CLOCK.c: 33:             sw_second = 0;
  3656  001BCC  0E00               	movlw	0
  3657  001BCE  6E1A               	movwf	(_sw_second+1)^0,c
  3658  001BD0  0E00               	movlw	0
  3659  001BD2  6E19               	movwf	_sw_second^0,c
  3660                           
  3661                           ;CLOCK.c: 34:             sw_minute = 0;
  3662  001BD4  0E00               	movlw	0
  3663  001BD6  6E18               	movwf	(_sw_minute+1)^0,c
  3664  001BD8  0E00               	movlw	0
  3665  001BDA  6E17               	movwf	_sw_minute^0,c
  3666  001BDC                     
  3667                           ;CLOCK.c: 35:             LCDPutInst(0x80);
  3668  001BDC  0E80               	movlw	128
  3669  001BDE  ECD3  F011         	call	_LCDPutInst
  3670  001BE2                     
  3671                           ;CLOCK.c: 36:             LCDPutStr("     CLOCK      ");
  3672  001BE2  0E6D               	movlw	low STR_3
  3673  001BE4  0100               	movlb	0	; () banked
  3674  001BE6  6F60               	movwf	LCDPutStr@ptr& (0+255),b
  3675  001BE8  0E10               	movlw	high STR_3
  3676  001BEA  6F61               	movwf	(LCDPutStr@ptr+1)& (0+255),b
  3677  001BEC  EC93  F011         	call	_LCDPutStr	;wreg free
  3678  001BF0                     
  3679                           ;CLOCK.c: 37:             LCDPutInst(0xC0);
  3680  001BF0  0EC0               	movlw	192
  3681  001BF2  ECD3  F011         	call	_LCDPutInst
  3682  001BF6                     
  3683                           ;CLOCK.c: 38:             LCDPutStr("RB0=Now RA5=Next");
  3684  001BF6  0E8F               	movlw	low STR_4
  3685  001BF8  0100               	movlb	0	; () banked
  3686  001BFA  6F60               	movwf	LCDPutStr@ptr& (0+255),b
  3687  001BFC  0E10               	movlw	high STR_4
  3688  001BFE  6F61               	movwf	(LCDPutStr@ptr+1)& (0+255),b
  3689  001C00  EC93  F011         	call	_LCDPutStr	;wreg free
  3690                           
  3691                           ;CLOCK.c: 39:             checkClock = 0;
  3692  001C04  0E00               	movlw	0
  3693  001C06  6E4B               	movwf	(_checkClock+1)^0,c
  3694  001C08  0E00               	movlw	0
  3695  001C0A  6E4A               	movwf	_checkClock^0,c
  3696                           
  3697                           ;CLOCK.c: 40:             checkHr = 1;
  3698  001C0C  0E00               	movlw	0
  3699  001C0E  6E49               	movwf	(_checkHr+1)^0,c
  3700  001C10  0E01               	movlw	1
  3701  001C12  6E48               	movwf	_checkHr^0,c
  3702                           
  3703                           ;CLOCK.c: 41:             checkMin = 1;
  3704  001C14  0E00               	movlw	0
  3705  001C16  6E47               	movwf	(_checkMin+1)^0,c
  3706  001C18  0E01               	movlw	1
  3707  001C1A  6E46               	movwf	_checkMin^0,c
  3708                           
  3709                           ;CLOCK.c: 42:             checkSc = 1;
  3710  001C1C  0E00               	movlw	0
  3711  001C1E  6E45               	movwf	(_checkSc+1)^0,c
  3712  001C20  0E01               	movlw	1
  3713  001C22  6E44               	movwf	_checkSc^0,c
  3714                           
  3715                           ;CLOCK.c: 43:             checkSw = 1;
  3716  001C24  0E00               	movlw	0
  3717  001C26  6E43               	movwf	(_checkSw+1)^0,c
  3718  001C28  0E01               	movlw	1
  3719  001C2A  6E42               	movwf	_checkSw^0,c
  3720  001C2C                     l3961:
  3721                           
  3722                           ;CLOCK.c: 46:         if (access_state)
  3723  001C2C  5015               	movf	_access_state^0,w,c
  3724  001C2E  1016               	iorwf	(_access_state+1)^0,w,c
  3725  001C30  B4D8               	btfsc	status,2,c
  3726  001C32  EF1D  F00E         	goto	u1841
  3727  001C36  EF1F  F00E         	goto	u1840
  3728  001C3A                     u1841:
  3729  001C3A  EF21  F00E         	goto	l674
  3730  001C3E                     u1840:
  3731  001C3E                     
  3732                           ;CLOCK.c: 47:         {;CLOCK.c: 48:             count_Clock ();
  3733  001C3E  EC56  F00B         	call	_count_Clock	;wreg free
  3734  001C42                     l674:
  3735  001C42  0012               	return		;funcret
  3736  001C44                     __end_of_fCLOCK:
  3737                           	opt callstack 0
  3738                           
  3739 ;; *************** function _count_Clock *****************
  3740 ;; Defined at:
  3741 ;;		line 53 in file "CLOCK.c"
  3742 ;; Parameters:    Size  Location     Type
  3743 ;;		None
  3744 ;; Auto vars:     Size  Location     Type
  3745 ;;		None
  3746 ;; Return value:  Size  Location     Type
  3747 ;;                  1    wreg      void 
  3748 ;; Registers used:
  3749 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3750 ;; Tracked objects:
  3751 ;;		On entry : 0/0
  3752 ;;		On exit  : 0/0
  3753 ;;		Unchanged: 0/0
  3754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3758 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3759 ;;Total ram usage:        0 bytes
  3760 ;; Hardware stack levels used:    1
  3761 ;; Hardware stack levels required when called:    9
  3762 ;; This function calls:
  3763 ;;		_LCDPutInst
  3764 ;;		_LCDPutStr
  3765 ;;		_disp_CLOCK
  3766 ;; This function is called by:
  3767 ;;		_fCLOCK
  3768 ;; This function uses a non-reentrant model
  3769 ;;
  3770                           
  3771                           	psect	text26
  3772  0016AC                     __ptext26:
  3773                           	opt callstack 0
  3774  0016AC                     _count_Clock:
  3775                           	opt callstack 19
  3776  0016AC                     
  3777                           ;CLOCK.c: 55:         if(timerflag == 1)
  3778  0016AC  0438               	decf	_timerflag^0,w,c
  3779  0016AE  A4D8               	btfss	status,2,c
  3780  0016B0  EF5C  F00B         	goto	u1671
  3781  0016B4  EF5E  F00B         	goto	u1670
  3782  0016B8                     u1671:
  3783  0016B8  EFBC  F00B         	goto	l682
  3784  0016BC                     u1670:
  3785  0016BC                     
  3786                           ;CLOCK.c: 56:         {;CLOCK.c: 57:             count10ms++;
  3787  0016BC  4A1D               	infsnz	_count10ms^0,f,c
  3788  0016BE  2A1E               	incf	(_count10ms+1)^0,f,c
  3789  0016C0                     
  3790                           ;CLOCK.c: 58:             if (count10ms > 99)
  3791  0016C0  BE1E               	btfsc	(_count10ms+1)^0,7,c
  3792  0016C2  EF6C  F00B         	goto	u1681
  3793  0016C6  501E               	movf	(_count10ms+1)^0,w,c
  3794  0016C8  E109               	bnz	u1680
  3795  0016CA  0E64               	movlw	100
  3796  0016CC  5C1D               	subwf	_count10ms^0,w,c
  3797  0016CE  A0D8               	btfss	status,0,c
  3798  0016D0  EF6C  F00B         	goto	u1681
  3799  0016D4  EF6E  F00B         	goto	u1680
  3800  0016D8                     u1681:
  3801  0016D8  EF74  F00B         	goto	l3765
  3802  0016DC                     u1680:
  3803  0016DC                     
  3804                           ;CLOCK.c: 59:             {;CLOCK.c: 60:                 count10ms = 0;
  3805  0016DC  0E00               	movlw	0
  3806  0016DE  6E1E               	movwf	(_count10ms+1)^0,c
  3807  0016E0  0E00               	movlw	0
  3808  0016E2  6E1D               	movwf	_count10ms^0,c
  3809  0016E4                     
  3810                           ;CLOCK.c: 61:                 second++;
  3811  0016E4  4A1F               	infsnz	_second^0,f,c
  3812  0016E6  2A20               	incf	(_second+1)^0,f,c
  3813  0016E8                     l3765:
  3814                           
  3815                           ;CLOCK.c: 63:             if (second > 59)
  3816  0016E8  BE20               	btfsc	(_second+1)^0,7,c
  3817  0016EA  EF80  F00B         	goto	u1691
  3818  0016EE  5020               	movf	(_second+1)^0,w,c
  3819  0016F0  E109               	bnz	u1690
  3820  0016F2  0E3C               	movlw	60
  3821  0016F4  5C1F               	subwf	_second^0,w,c
  3822  0016F6  A0D8               	btfss	status,0,c
  3823  0016F8  EF80  F00B         	goto	u1691
  3824  0016FC  EF82  F00B         	goto	u1690
  3825  001700                     u1691:
  3826  001700  EF88  F00B         	goto	l3771
  3827  001704                     u1690:
  3828  001704                     
  3829                           ;CLOCK.c: 64:             {;CLOCK.c: 65:                 second = 0;
  3830  001704  0E00               	movlw	0
  3831  001706  6E20               	movwf	(_second+1)^0,c
  3832  001708  0E00               	movlw	0
  3833  00170A  6E1F               	movwf	_second^0,c
  3834  00170C                     
  3835                           ;CLOCK.c: 66:                 minute++;
  3836  00170C  4A21               	infsnz	_minute^0,f,c
  3837  00170E  2A22               	incf	(_minute+1)^0,f,c
  3838  001710                     l3771:
  3839                           
  3840                           ;CLOCK.c: 68:             if (minute > 59)
  3841  001710  BE22               	btfsc	(_minute+1)^0,7,c
  3842  001712  EF94  F00B         	goto	u1701
  3843  001716  5022               	movf	(_minute+1)^0,w,c
  3844  001718  E109               	bnz	u1700
  3845  00171A  0E3C               	movlw	60
  3846  00171C  5C21               	subwf	_minute^0,w,c
  3847  00171E  A0D8               	btfss	status,0,c
  3848  001720  EF94  F00B         	goto	u1701
  3849  001724  EF96  F00B         	goto	u1700
  3850  001728                     u1701:
  3851  001728  EF9C  F00B         	goto	l3777
  3852  00172C                     u1700:
  3853  00172C                     
  3854                           ;CLOCK.c: 69:             {;CLOCK.c: 70:                 minute = 0;
  3855  00172C  0E00               	movlw	0
  3856  00172E  6E22               	movwf	(_minute+1)^0,c
  3857  001730  0E00               	movlw	0
  3858  001732  6E21               	movwf	_minute^0,c
  3859  001734                     
  3860                           ;CLOCK.c: 71:                 hour++;
  3861  001734  4A23               	infsnz	_hour^0,f,c
  3862  001736  2A24               	incf	(_hour+1)^0,f,c
  3863  001738                     l3777:
  3864                           
  3865                           ;CLOCK.c: 73:             if (hour > 23)
  3866  001738  BE24               	btfsc	(_hour+1)^0,7,c
  3867  00173A  EFA8  F00B         	goto	u1711
  3868  00173E  5024               	movf	(_hour+1)^0,w,c
  3869  001740  E109               	bnz	u1710
  3870  001742  0E18               	movlw	24
  3871  001744  5C23               	subwf	_hour^0,w,c
  3872  001746  A0D8               	btfss	status,0,c
  3873  001748  EFA8  F00B         	goto	u1711
  3874  00174C  EFAA  F00B         	goto	u1710
  3875  001750                     u1711:
  3876  001750  EFAE  F00B         	goto	l3781
  3877  001754                     u1710:
  3878  001754                     
  3879                           ;CLOCK.c: 74:             {;CLOCK.c: 75:                 hour = 0;
  3880  001754  0E00               	movlw	0
  3881  001756  6E24               	movwf	(_hour+1)^0,c
  3882  001758  0E00               	movlw	0
  3883  00175A  6E23               	movwf	_hour^0,c
  3884  00175C                     l3781:
  3885                           
  3886                           ;CLOCK.c: 77:             disp_CLOCK();
  3887  00175C  ECEA  F00A         	call	_disp_CLOCK	;wreg free
  3888  001760                     
  3889                           ;CLOCK.c: 78:             timerflag = 0;
  3890  001760  0E00               	movlw	0
  3891  001762  6E38               	movwf	_timerflag^0,c
  3892  001764                     
  3893                           ;CLOCK.c: 81:             LCDPutInst(0xC0);
  3894  001764  0EC0               	movlw	192
  3895  001766  ECD3  F011         	call	_LCDPutInst
  3896  00176A                     
  3897                           ;CLOCK.c: 82:             LCDPutStr("        RA5=Next");
  3898  00176A  0E7E               	movlw	low STR_5
  3899  00176C  0100               	movlb	0	; () banked
  3900  00176E  6F60               	movwf	LCDPutStr@ptr& (0+255),b
  3901  001770  0E10               	movlw	high STR_5
  3902  001772  6F61               	movwf	(LCDPutStr@ptr+1)& (0+255),b
  3903  001774  EC93  F011         	call	_LCDPutStr	;wreg free
  3904  001778                     l682:
  3905  001778  0012               	return		;funcret
  3906  00177A                     __end_of_count_Clock:
  3907                           	opt callstack 0
  3908                           
  3909 ;; *************** function _disp_CLOCK *****************
  3910 ;; Defined at:
  3911 ;;		line 12 in file "CLOCK.c"
  3912 ;; Parameters:    Size  Location     Type
  3913 ;;		None
  3914 ;; Auto vars:     Size  Location     Type
  3915 ;;		None
  3916 ;; Return value:  Size  Location     Type
  3917 ;;                  1    wreg      void 
  3918 ;; Registers used:
  3919 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3920 ;; Tracked objects:
  3921 ;;		On entry : 0/0
  3922 ;;		On exit  : 0/0
  3923 ;;		Unchanged: 0/0
  3924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3928 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3929 ;;Total ram usage:        0 bytes
  3930 ;; Hardware stack levels used:    1
  3931 ;; Hardware stack levels required when called:    8
  3932 ;; This function calls:
  3933 ;;		_LCDPutChar
  3934 ;;		_LCDPutInst
  3935 ;;		_LCDPutStr
  3936 ;;		___awdiv
  3937 ;;		___awmod
  3938 ;; This function is called by:
  3939 ;;		_count_Clock
  3940 ;; This function uses a non-reentrant model
  3941 ;;
  3942                           
  3943                           	psect	text27
  3944  0015D4                     __ptext27:
  3945                           	opt callstack 0
  3946  0015D4                     _disp_CLOCK:
  3947                           	opt callstack 19
  3948  0015D4                     
  3949                           ;CLOCK.c: 13:     LCDPutInst(0x80);
  3950  0015D4  0E80               	movlw	128
  3951  0015D6  ECD3  F011         	call	_LCDPutInst
  3952  0015DA                     
  3953                           ;CLOCK.c: 14:     LCDPutStr("    ");
  3954  0015DA  0E23               	movlw	low (STR_22+13)
  3955  0015DC  0100               	movlb	0	; () banked
  3956  0015DE  6F60               	movwf	LCDPutStr@ptr& (0+255),b
  3957  0015E0  0E10               	movlw	high (STR_22+13)
  3958  0015E2  6F61               	movwf	(LCDPutStr@ptr+1)& (0+255),b
  3959  0015E4  EC93  F011         	call	_LCDPutStr	;wreg free
  3960  0015E8                     
  3961                           ;CLOCK.c: 15:     LCDPutChar(hour/10+'0');
  3962  0015E8  C023  F052         	movff	_hour,___awdiv@dividend
  3963  0015EC  C024  F053         	movff	_hour+1,___awdiv@dividend+1
  3964  0015F0  0E00               	movlw	0
  3965  0015F2  6E55               	movwf	(___awdiv@divisor+1)^0,c
  3966  0015F4  0E0A               	movlw	10
  3967  0015F6  6E54               	movwf	___awdiv@divisor^0,c
  3968  0015F8  EC22  F00C         	call	___awdiv	;wreg free
  3969  0015FC  5052               	movf	?___awdiv^0,w,c
  3970  0015FE  0F30               	addlw	48
  3971  001600  EC08  F012         	call	_LCDPutChar
  3972  001604                     
  3973                           ;CLOCK.c: 16:     LCDPutChar(hour%10+'0');
  3974  001604  C023  F052         	movff	_hour,___awmod@dividend
  3975  001608  C024  F053         	movff	_hour+1,___awmod@dividend+1
  3976  00160C  0E00               	movlw	0
  3977  00160E  6E55               	movwf	(___awmod@divisor+1)^0,c
  3978  001610  0E0A               	movlw	10
  3979  001612  6E54               	movwf	___awmod@divisor^0,c
  3980  001614  ECE0  F00C         	call	___awmod	;wreg free
  3981  001618  5052               	movf	?___awmod^0,w,c
  3982  00161A  0F30               	addlw	48
  3983  00161C  EC08  F012         	call	_LCDPutChar
  3984  001620                     
  3985                           ;CLOCK.c: 17:     LCDPutChar(':');
  3986  001620  0E3A               	movlw	58
  3987  001622  EC08  F012         	call	_LCDPutChar
  3988  001626                     
  3989                           ;CLOCK.c: 18:     LCDPutChar(minute/10+'0');
  3990  001626  C021  F052         	movff	_minute,___awdiv@dividend
  3991  00162A  C022  F053         	movff	_minute+1,___awdiv@dividend+1
  3992  00162E  0E00               	movlw	0
  3993  001630  6E55               	movwf	(___awdiv@divisor+1)^0,c
  3994  001632  0E0A               	movlw	10
  3995  001634  6E54               	movwf	___awdiv@divisor^0,c
  3996  001636  EC22  F00C         	call	___awdiv	;wreg free
  3997  00163A  5052               	movf	?___awdiv^0,w,c
  3998  00163C  0F30               	addlw	48
  3999  00163E  EC08  F012         	call	_LCDPutChar
  4000  001642                     
  4001                           ;CLOCK.c: 19:     LCDPutChar(minute%10+'0');
  4002  001642  C021  F052         	movff	_minute,___awmod@dividend
  4003  001646  C022  F053         	movff	_minute+1,___awmod@dividend+1
  4004  00164A  0E00               	movlw	0
  4005  00164C  6E55               	movwf	(___awmod@divisor+1)^0,c
  4006  00164E  0E0A               	movlw	10
  4007  001650  6E54               	movwf	___awmod@divisor^0,c
  4008  001652  ECE0  F00C         	call	___awmod	;wreg free
  4009  001656  5052               	movf	?___awmod^0,w,c
  4010  001658  0F30               	addlw	48
  4011  00165A  EC08  F012         	call	_LCDPutChar
  4012  00165E                     
  4013                           ;CLOCK.c: 20:     LCDPutChar(':');
  4014  00165E  0E3A               	movlw	58
  4015  001660  EC08  F012         	call	_LCDPutChar
  4016  001664                     
  4017                           ;CLOCK.c: 21:     LCDPutChar(second/10+'0');
  4018  001664  C01F  F052         	movff	_second,___awdiv@dividend
  4019  001668  C020  F053         	movff	_second+1,___awdiv@dividend+1
  4020  00166C  0E00               	movlw	0
  4021  00166E  6E55               	movwf	(___awdiv@divisor+1)^0,c
  4022  001670  0E0A               	movlw	10
  4023  001672  6E54               	movwf	___awdiv@divisor^0,c
  4024  001674  EC22  F00C         	call	___awdiv	;wreg free
  4025  001678  5052               	movf	?___awdiv^0,w,c
  4026  00167A  0F30               	addlw	48
  4027  00167C  EC08  F012         	call	_LCDPutChar
  4028  001680                     
  4029                           ;CLOCK.c: 22:     LCDPutChar(second%10+'0');
  4030  001680  C01F  F052         	movff	_second,___awmod@dividend
  4031  001684  C020  F053         	movff	_second+1,___awmod@dividend+1
  4032  001688  0E00               	movlw	0
  4033  00168A  6E55               	movwf	(___awmod@divisor+1)^0,c
  4034  00168C  0E0A               	movlw	10
  4035  00168E  6E54               	movwf	___awmod@divisor^0,c
  4036  001690  ECE0  F00C         	call	___awmod	;wreg free
  4037  001694  5052               	movf	?___awmod^0,w,c
  4038  001696  0F30               	addlw	48
  4039  001698  EC08  F012         	call	_LCDPutChar
  4040  00169C                     
  4041                           ;CLOCK.c: 23:     LCDPutStr("    ");
  4042  00169C  0E23               	movlw	low (STR_22+13)
  4043  00169E  0100               	movlb	0	; () banked
  4044  0016A0  6F60               	movwf	LCDPutStr@ptr& (0+255),b
  4045  0016A2  0E10               	movlw	high (STR_22+13)
  4046  0016A4  6F61               	movwf	(LCDPutStr@ptr+1)& (0+255),b
  4047  0016A6  EC93  F011         	call	_LCDPutStr	;wreg free
  4048  0016AA  0012               	return		;funcret
  4049  0016AC                     __end_of_disp_CLOCK:
  4050                           	opt callstack 0
  4051                           
  4052 ;; *************** function ___awmod *****************
  4053 ;; Defined at:
  4054 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\awmod.c"
  4055 ;; Parameters:    Size  Location     Type
  4056 ;;  dividend        2    5[COMRAM] int 
  4057 ;;  divisor         2    7[COMRAM] int 
  4058 ;; Auto vars:     Size  Location     Type
  4059 ;;  sign            1   10[COMRAM] unsigned char 
  4060 ;;  counter         1    9[COMRAM] unsigned char 
  4061 ;; Return value:  Size  Location     Type
  4062 ;;                  2    5[COMRAM] int 
  4063 ;; Registers used:
  4064 ;;		wreg, status,2, status,0
  4065 ;; Tracked objects:
  4066 ;;		On entry : 0/0
  4067 ;;		On exit  : 0/0
  4068 ;;		Unchanged: 0/0
  4069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4070 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4071 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4073 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4074 ;;Total ram usage:        6 bytes
  4075 ;; Hardware stack levels used:    1
  4076 ;; Hardware stack levels required when called:    4
  4077 ;; This function calls:
  4078 ;;		Nothing
  4079 ;; This function is called by:
  4080 ;;		_disp_CLOCK
  4081 ;;		_disp_HOUR
  4082 ;;		_modify_HOUR
  4083 ;;		_disp_MINUTE
  4084 ;;		_modify_MIN
  4085 ;;		_disp_SECOND
  4086 ;;		_modify_SEC
  4087 ;;		_disp_SW
  4088 ;; This function uses a non-reentrant model
  4089 ;;
  4090                           
  4091                           	psect	text28
  4092  0019C0                     __ptext28:
  4093                           	opt callstack 0
  4094  0019C0                     ___awmod:
  4095                           	opt callstack 23
  4096  0019C0  0E00               	movlw	0
  4097  0019C2  6E57               	movwf	___awmod@sign^0,c
  4098  0019C4  BE53               	btfsc	(___awmod@dividend+1)^0,7,c
  4099  0019C6  EFE9  F00C         	goto	u930
  4100  0019CA  EFE7  F00C         	goto	u931
  4101  0019CE                     u931:
  4102  0019CE  EFEF  F00C         	goto	l2975
  4103  0019D2                     u930:
  4104  0019D2  6C52               	negf	___awmod@dividend^0,c
  4105  0019D4  1E53               	comf	(___awmod@dividend+1)^0,f,c
  4106  0019D6  B0D8               	btfsc	status,0,c
  4107  0019D8  2A53               	incf	(___awmod@dividend+1)^0,f,c
  4108  0019DA  0E01               	movlw	1
  4109  0019DC  6E57               	movwf	___awmod@sign^0,c
  4110  0019DE                     l2975:
  4111  0019DE  BE55               	btfsc	(___awmod@divisor+1)^0,7,c
  4112  0019E0  EFF6  F00C         	goto	u940
  4113  0019E4  EFF4  F00C         	goto	u941
  4114  0019E8                     u941:
  4115  0019E8  EFFA  F00C         	goto	l2979
  4116  0019EC                     u940:
  4117  0019EC  6C54               	negf	___awmod@divisor^0,c
  4118  0019EE  1E55               	comf	(___awmod@divisor+1)^0,f,c
  4119  0019F0  B0D8               	btfsc	status,0,c
  4120  0019F2  2A55               	incf	(___awmod@divisor+1)^0,f,c
  4121  0019F4                     l2979:
  4122  0019F4  5054               	movf	___awmod@divisor^0,w,c
  4123  0019F6  1055               	iorwf	(___awmod@divisor+1)^0,w,c
  4124  0019F8  B4D8               	btfsc	status,2,c
  4125  0019FA  EF01  F00D         	goto	u951
  4126  0019FE  EF03  F00D         	goto	u950
  4127  001A02                     u951:
  4128  001A02  EF27  F00D         	goto	l2995
  4129  001A06                     u950:
  4130  001A06  0E01               	movlw	1
  4131  001A08  6E56               	movwf	___awmod@counter^0,c
  4132  001A0A  EF0B  F00D         	goto	l2985
  4133  001A0E                     l2983:
  4134  001A0E  90D8               	bcf	status,0,c
  4135  001A10  3654               	rlcf	___awmod@divisor^0,f,c
  4136  001A12  3655               	rlcf	(___awmod@divisor+1)^0,f,c
  4137  001A14  2A56               	incf	___awmod@counter^0,f,c
  4138  001A16                     l2985:
  4139  001A16  AE55               	btfss	(___awmod@divisor+1)^0,7,c
  4140  001A18  EF10  F00D         	goto	u961
  4141  001A1C  EF12  F00D         	goto	u960
  4142  001A20                     u961:
  4143  001A20  EF07  F00D         	goto	l2983
  4144  001A24                     u960:
  4145  001A24                     l2987:
  4146  001A24  5054               	movf	___awmod@divisor^0,w,c
  4147  001A26  5C52               	subwf	___awmod@dividend^0,w,c
  4148  001A28  5055               	movf	(___awmod@divisor+1)^0,w,c
  4149  001A2A  5853               	subwfb	(___awmod@dividend+1)^0,w,c
  4150  001A2C  A0D8               	btfss	status,0,c
  4151  001A2E  EF1B  F00D         	goto	u971
  4152  001A32  EF1D  F00D         	goto	u970
  4153  001A36                     u971:
  4154  001A36  EF21  F00D         	goto	l2991
  4155  001A3A                     u970:
  4156  001A3A  5054               	movf	___awmod@divisor^0,w,c
  4157  001A3C  5E52               	subwf	___awmod@dividend^0,f,c
  4158  001A3E  5055               	movf	(___awmod@divisor+1)^0,w,c
  4159  001A40  5A53               	subwfb	(___awmod@dividend+1)^0,f,c
  4160  001A42                     l2991:
  4161  001A42  90D8               	bcf	status,0,c
  4162  001A44  3255               	rrcf	(___awmod@divisor+1)^0,f,c
  4163  001A46  3254               	rrcf	___awmod@divisor^0,f,c
  4164  001A48  2E56               	decfsz	___awmod@counter^0,f,c
  4165  001A4A  EF12  F00D         	goto	l2987
  4166  001A4E                     l2995:
  4167  001A4E  5057               	movf	___awmod@sign^0,w,c
  4168  001A50  B4D8               	btfsc	status,2,c
  4169  001A52  EF2D  F00D         	goto	u981
  4170  001A56  EF2F  F00D         	goto	u980
  4171  001A5A                     u981:
  4172  001A5A  EF33  F00D         	goto	l2999
  4173  001A5E                     u980:
  4174  001A5E  6C52               	negf	___awmod@dividend^0,c
  4175  001A60  1E53               	comf	(___awmod@dividend+1)^0,f,c
  4176  001A62  B0D8               	btfsc	status,0,c
  4177  001A64  2A53               	incf	(___awmod@dividend+1)^0,f,c
  4178  001A66                     l2999:
  4179  001A66  C052  F052         	movff	___awmod@dividend,?___awmod
  4180  001A6A  C053  F053         	movff	___awmod@dividend+1,?___awmod+1
  4181  001A6E  0012               	return		;funcret
  4182  001A70                     __end_of___awmod:
  4183                           	opt callstack 0
  4184                           
  4185 ;; *************** function ___awdiv *****************
  4186 ;; Defined at:
  4187 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\awdiv.c"
  4188 ;; Parameters:    Size  Location     Type
  4189 ;;  dividend        2    5[COMRAM] int 
  4190 ;;  divisor         2    7[COMRAM] int 
  4191 ;; Auto vars:     Size  Location     Type
  4192 ;;  quotient        2    2[BANK0 ] int 
  4193 ;;  sign            1    1[BANK0 ] unsigned char 
  4194 ;;  counter         1    0[BANK0 ] unsigned char 
  4195 ;; Return value:  Size  Location     Type
  4196 ;;                  2    5[COMRAM] int 
  4197 ;; Registers used:
  4198 ;;		wreg, status,2, status,0
  4199 ;; Tracked objects:
  4200 ;;		On entry : 0/0
  4201 ;;		On exit  : 0/0
  4202 ;;		Unchanged: 0/0
  4203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4204 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4205 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4207 ;;      Totals:         4       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4208 ;;Total ram usage:        8 bytes
  4209 ;; Hardware stack levels used:    1
  4210 ;; Hardware stack levels required when called:    4
  4211 ;; This function calls:
  4212 ;;		Nothing
  4213 ;; This function is called by:
  4214 ;;		_disp_CLOCK
  4215 ;;		_disp_HOUR
  4216 ;;		_disp_MINUTE
  4217 ;;		_disp_SECOND
  4218 ;;		_disp_SW
  4219 ;; This function uses a non-reentrant model
  4220 ;;
  4221                           
  4222                           	psect	text29
  4223  001844                     __ptext29:
  4224                           	opt callstack 0
  4225  001844                     ___awdiv:
  4226                           	opt callstack 23
  4227  001844  0E00               	movlw	0
  4228  001846  0100               	movlb	0	; () banked
  4229  001848  6F61               	movwf	___awdiv@sign& (0+255),b
  4230  00184A                     
  4231                           ; BSR set to: 0
  4232  00184A  BE55               	btfsc	(___awdiv@divisor+1)^0,7,c
  4233  00184C  EF2C  F00C         	goto	u1610
  4234  001850  EF2A  F00C         	goto	u1611
  4235  001854                     u1611:
  4236  001854  EF32  F00C         	goto	l3673
  4237  001858                     u1610:
  4238  001858                     
  4239                           ; BSR set to: 0
  4240  001858  6C54               	negf	___awdiv@divisor^0,c
  4241  00185A  1E55               	comf	(___awdiv@divisor+1)^0,f,c
  4242  00185C  B0D8               	btfsc	status,0,c
  4243  00185E  2A55               	incf	(___awdiv@divisor+1)^0,f,c
  4244  001860                     
  4245                           ; BSR set to: 0
  4246  001860  0E01               	movlw	1
  4247  001862  6F61               	movwf	___awdiv@sign& (0+255),b
  4248  001864                     l3673:
  4249                           
  4250                           ; BSR set to: 0
  4251  001864  BE53               	btfsc	(___awdiv@dividend+1)^0,7,c
  4252  001866  EF39  F00C         	goto	u1620
  4253  00186A  EF37  F00C         	goto	u1621
  4254  00186E                     u1621:
  4255  00186E  EF3F  F00C         	goto	l3679
  4256  001872                     u1620:
  4257  001872                     
  4258                           ; BSR set to: 0
  4259  001872  6C52               	negf	___awdiv@dividend^0,c
  4260  001874  1E53               	comf	(___awdiv@dividend+1)^0,f,c
  4261  001876  B0D8               	btfsc	status,0,c
  4262  001878  2A53               	incf	(___awdiv@dividend+1)^0,f,c
  4263  00187A                     
  4264                           ; BSR set to: 0
  4265  00187A  0E01               	movlw	1
  4266  00187C  1B61               	xorwf	___awdiv@sign& (0+255),f,b
  4267  00187E                     l3679:
  4268                           
  4269                           ; BSR set to: 0
  4270  00187E  0E00               	movlw	0
  4271  001880  6F63               	movwf	(___awdiv@quotient+1)& (0+255),b
  4272  001882  0E00               	movlw	0
  4273  001884  6F62               	movwf	___awdiv@quotient& (0+255),b
  4274  001886                     
  4275                           ; BSR set to: 0
  4276  001886  5054               	movf	___awdiv@divisor^0,w,c
  4277  001888  1055               	iorwf	(___awdiv@divisor+1)^0,w,c
  4278  00188A  B4D8               	btfsc	status,2,c
  4279  00188C  EF4A  F00C         	goto	u1631
  4280  001890  EF4C  F00C         	goto	u1630
  4281  001894                     u1631:
  4282  001894  EF74  F00C         	goto	l3701
  4283  001898                     u1630:
  4284  001898                     
  4285                           ; BSR set to: 0
  4286  001898  0E01               	movlw	1
  4287  00189A  6F60               	movwf	___awdiv@counter& (0+255),b
  4288  00189C  EF54  F00C         	goto	l3687
  4289  0018A0                     l3685:
  4290                           
  4291                           ; BSR set to: 0
  4292  0018A0  90D8               	bcf	status,0,c
  4293  0018A2  3654               	rlcf	___awdiv@divisor^0,f,c
  4294  0018A4  3655               	rlcf	(___awdiv@divisor+1)^0,f,c
  4295  0018A6  2B60               	incf	___awdiv@counter& (0+255),f,b
  4296  0018A8                     l3687:
  4297                           
  4298                           ; BSR set to: 0
  4299  0018A8  AE55               	btfss	(___awdiv@divisor+1)^0,7,c
  4300  0018AA  EF59  F00C         	goto	u1641
  4301  0018AE  EF5B  F00C         	goto	u1640
  4302  0018B2                     u1641:
  4303  0018B2  EF50  F00C         	goto	l3685
  4304  0018B6                     u1640:
  4305  0018B6                     l3689:
  4306                           
  4307                           ; BSR set to: 0
  4308  0018B6  90D8               	bcf	status,0,c
  4309  0018B8  3762               	rlcf	___awdiv@quotient& (0+255),f,b
  4310  0018BA  3763               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  4311  0018BC                     
  4312                           ; BSR set to: 0
  4313  0018BC  5054               	movf	___awdiv@divisor^0,w,c
  4314  0018BE  5C52               	subwf	___awdiv@dividend^0,w,c
  4315  0018C0  5055               	movf	(___awdiv@divisor+1)^0,w,c
  4316  0018C2  5853               	subwfb	(___awdiv@dividend+1)^0,w,c
  4317  0018C4  A0D8               	btfss	status,0,c
  4318  0018C6  EF67  F00C         	goto	u1651
  4319  0018CA  EF69  F00C         	goto	u1650
  4320  0018CE                     u1651:
  4321  0018CE  EF6E  F00C         	goto	l3697
  4322  0018D2                     u1650:
  4323  0018D2                     
  4324                           ; BSR set to: 0
  4325  0018D2  5054               	movf	___awdiv@divisor^0,w,c
  4326  0018D4  5E52               	subwf	___awdiv@dividend^0,f,c
  4327  0018D6  5055               	movf	(___awdiv@divisor+1)^0,w,c
  4328  0018D8  5A53               	subwfb	(___awdiv@dividend+1)^0,f,c
  4329  0018DA                     
  4330                           ; BSR set to: 0
  4331  0018DA  8162               	bsf	___awdiv@quotient& (0+255),0,b
  4332  0018DC                     l3697:
  4333                           
  4334                           ; BSR set to: 0
  4335  0018DC  90D8               	bcf	status,0,c
  4336  0018DE  3255               	rrcf	(___awdiv@divisor+1)^0,f,c
  4337  0018E0  3254               	rrcf	___awdiv@divisor^0,f,c
  4338  0018E2                     
  4339                           ; BSR set to: 0
  4340  0018E2  2F60               	decfsz	___awdiv@counter& (0+255),f,b
  4341  0018E4  EF5B  F00C         	goto	l3689
  4342  0018E8                     l3701:
  4343                           
  4344                           ; BSR set to: 0
  4345  0018E8  5161               	movf	___awdiv@sign& (0+255),w,b
  4346  0018EA  B4D8               	btfsc	status,2,c
  4347  0018EC  EF7A  F00C         	goto	u1661
  4348  0018F0  EF7C  F00C         	goto	u1660
  4349  0018F4                     u1661:
  4350  0018F4  EF80  F00C         	goto	l3705
  4351  0018F8                     u1660:
  4352  0018F8                     
  4353                           ; BSR set to: 0
  4354  0018F8  6D62               	negf	___awdiv@quotient& (0+255),b
  4355  0018FA  1F63               	comf	(___awdiv@quotient+1)& (0+255),f,b
  4356  0018FC  B0D8               	btfsc	status,0,c
  4357  0018FE  2B63               	incf	(___awdiv@quotient+1)& (0+255),f,b
  4358  001900                     l3705:
  4359                           
  4360                           ; BSR set to: 0
  4361  001900  C062  F052         	movff	___awdiv@quotient,?___awdiv
  4362  001904  C063  F053         	movff	___awdiv@quotient+1,?___awdiv+1
  4363  001908                     
  4364                           ; BSR set to: 0
  4365  001908  0012               	return		;funcret
  4366  00190A                     __end_of___awdiv:
  4367                           	opt callstack 0
  4368                           
  4369 ;; *************** function _fBEGIN *****************
  4370 ;; Defined at:
  4371 ;;		line 32 in file "BEGIN.c"
  4372 ;; Parameters:    Size  Location     Type
  4373 ;;		None
  4374 ;; Auto vars:     Size  Location     Type
  4375 ;;		None
  4376 ;; Return value:  Size  Location     Type
  4377 ;;                  1    wreg      void 
  4378 ;; Registers used:
  4379 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4380 ;; Tracked objects:
  4381 ;;		On entry : 0/0
  4382 ;;		On exit  : 0/0
  4383 ;;		Unchanged: 0/0
  4384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4386 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4388 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4389 ;;Total ram usage:        0 bytes
  4390 ;; Hardware stack levels used:    1
  4391 ;; Hardware stack levels required when called:    9
  4392 ;; This function calls:
  4393 ;;		_disp_BEGIN
  4394 ;; This function is called by:
  4395 ;;		_FSM
  4396 ;; This function uses a non-reentrant model
  4397 ;;
  4398                           
  4399                           	psect	text30
  4400  00253E                     __ptext30:
  4401                           	opt callstack 0
  4402  00253E                     _fBEGIN:
  4403                           	opt callstack 20
  4404  00253E                     
  4405                           ;BEGIN.c: 33:     disp_BEGIN();
  4406  00253E  EC69  F011         	call	_disp_BEGIN	;wreg free
  4407  002542  0012               	return		;funcret
  4408  002544                     __end_of_fBEGIN:
  4409                           	opt callstack 0
  4410                           
  4411 ;; *************** function _disp_BEGIN *****************
  4412 ;; Defined at:
  4413 ;;		line 12 in file "BEGIN.c"
  4414 ;; Parameters:    Size  Location     Type
  4415 ;;		None
  4416 ;; Auto vars:     Size  Location     Type
  4417 ;;		None
  4418 ;; Return value:  Size  Location     Type
  4419 ;;                  1    wreg      void 
  4420 ;; Registers used:
  4421 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4422 ;; Tracked objects:
  4423 ;;		On entry : 0/0
  4424 ;;		On exit  : 0/0
  4425 ;;		Unchanged: 0/0
  4426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4428 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4430 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4431 ;;Total ram usage:        0 bytes
  4432 ;; Hardware stack levels used:    1
  4433 ;; Hardware stack levels required when called:    8
  4434 ;; This function calls:
  4435 ;;		_BEGIN_delay
  4436 ;;		_LCDInit
  4437 ;;		_LCDPutInst
  4438 ;;		_LCDPutStr
  4439 ;; This function is called by:
  4440 ;;		_fBEGIN
  4441 ;; This function uses a non-reentrant model
  4442 ;;
  4443                           
  4444                           	psect	text31
  4445  0022D2                     __ptext31:
  4446                           	opt callstack 0
  4447  0022D2                     _disp_BEGIN:
  4448                           	opt callstack 20
  4449  0022D2                     
  4450                           ;BEGIN.c: 13:     if (beginFlag == 0) {
  4451  0022D2  500F               	movf	_beginFlag^0,w,c
  4452  0022D4  1010               	iorwf	(_beginFlag+1)^0,w,c
  4453  0022D6  A4D8               	btfss	status,2,c
  4454  0022D8  EF70  F011         	goto	u1821
  4455  0022DC  EF72  F011         	goto	u1820
  4456  0022E0                     u1821:
  4457  0022E0  EF92  F011         	goto	l1357
  4458  0022E4                     u1820:
  4459  0022E4                     
  4460                           ;BEGIN.c: 14:         LCDInit();
  4461  0022E4  ECB3  F011         	call	_LCDInit	;wreg free
  4462  0022E8                     
  4463                           ;BEGIN.c: 15:         beginFlag = 1;
  4464  0022E8  0E00               	movlw	0
  4465  0022EA  6E10               	movwf	(_beginFlag+1)^0,c
  4466  0022EC  0E01               	movlw	1
  4467  0022EE  6E0F               	movwf	_beginFlag^0,c
  4468  0022F0                     
  4469                           ;BEGIN.c: 16:         LCDPutInst(0x80);
  4470  0022F0  0E80               	movlw	128
  4471  0022F2  ECD3  F011         	call	_LCDPutInst
  4472  0022F6                     
  4473                           ;BEGIN.c: 17:         LCDPutStr("Microchip PICDEM");
  4474  0022F6  0E4B               	movlw	low STR_29
  4475  0022F8  0100               	movlb	0	; () banked
  4476  0022FA  6F60               	movwf	LCDPutStr@ptr& (0+255),b
  4477  0022FC  0E10               	movlw	high STR_29
  4478  0022FE  6F61               	movwf	(LCDPutStr@ptr+1)& (0+255),b
  4479  002300  EC93  F011         	call	_LCDPutStr	;wreg free
  4480  002304                     
  4481                           ;BEGIN.c: 18:         LCDPutInst(0xC0);
  4482  002304  0EC0               	movlw	192
  4483  002306  ECD3  F011         	call	_LCDPutInst
  4484  00230A                     
  4485                           ;BEGIN.c: 19:         LCDPutStr(" PIC18 Explorer ");
  4486  00230A  0E3A               	movlw	low STR_30
  4487  00230C  0100               	movlb	0	; () banked
  4488  00230E  6F60               	movwf	LCDPutStr@ptr& (0+255),b
  4489  002310  0E10               	movlw	high STR_30
  4490  002312  6F61               	movwf	(LCDPutStr@ptr+1)& (0+255),b
  4491  002314  EC93  F011         	call	_LCDPutStr	;wreg free
  4492  002318                     
  4493                           ;BEGIN.c: 20:         BEGIN_delay();
  4494  002318  EC1E  F012         	call	_BEGIN_delay	;wreg free
  4495                           
  4496                           ;BEGIN.c: 21:         state = 1;
  4497  00231C  0E00               	movlw	0
  4498  00231E  6E0E               	movwf	(_state+1)^0,c
  4499  002320  0E01               	movlw	1
  4500  002322  6E0D               	movwf	_state^0,c
  4501  002324                     l1357:
  4502  002324  0012               	return		;funcret
  4503  002326                     __end_of_disp_BEGIN:
  4504                           	opt callstack 0
  4505                           
  4506 ;; *************** function _LCDPutStr *****************
  4507 ;; Defined at:
  4508 ;;		line 198 in file "LCD.c"
  4509 ;; Parameters:    Size  Location     Type
  4510 ;;  ptr             2    0[BANK0 ] PTR const unsigned char 
  4511 ;;		 -> STR_30(17), STR_29(17), STR_28(17), STR_27(21), 
  4512 ;;		 -> STR_26(17), STR_25(5), STR_24(5), STR_23(17), 
  4513 ;;		 -> STR_22(18), STR_21(17), STR_20(5), STR_19(3), 
  4514 ;;		 -> STR_18(5), STR_17(17), STR_16(18), STR_15(17), 
  4515 ;;		 -> STR_14(5), STR_13(3), STR_12(5), STR_11(17), 
  4516 ;;		 -> STR_10(16), STR_9(17), STR_8(5), STR_7(3), 
  4517 ;;		 -> STR_6(5), STR_5(17), STR_4(17), STR_3(17), 
  4518 ;;		 -> STR_2(5), STR_1(5), 
  4519 ;; Auto vars:     Size  Location     Type
  4520 ;;		None
  4521 ;; Return value:  Size  Location     Type
  4522 ;;                  1    wreg      void 
  4523 ;; Registers used:
  4524 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4525 ;; Tracked objects:
  4526 ;;		On entry : 0/0
  4527 ;;		On exit  : 0/0
  4528 ;;		Unchanged: 0/0
  4529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4530 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4531 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4532 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4533 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4534 ;;Total ram usage:        2 bytes
  4535 ;; Hardware stack levels used:    1
  4536 ;; Hardware stack levels required when called:    7
  4537 ;; This function calls:
  4538 ;;		_LCDPutChar
  4539 ;; This function is called by:
  4540 ;;		_disp_CLOCK
  4541 ;;		_fCLOCK
  4542 ;;		_count_Clock
  4543 ;;		_disp_HOUR
  4544 ;;		_fHOUR
  4545 ;;		_disp_MINUTE
  4546 ;;		_fMINUTE
  4547 ;;		_disp_SECOND
  4548 ;;		_fSECOND
  4549 ;;		_disp_SW
  4550 ;;		_fSW
  4551 ;;		_disp_BEGIN
  4552 ;; This function uses a non-reentrant model
  4553 ;;
  4554                           
  4555                           	psect	text32
  4556  002326                     __ptext32:
  4557                           	opt callstack 0
  4558  002326                     _LCDPutStr:
  4559                           	opt callstack 20
  4560  002326                     
  4561                           ;LCD.c: 198: void LCDPutStr (const char *ptr);LCD.c: 199: {;LCD.c: 200:     while(*ptr) 
      +                          LCDPutChar(*(ptr++));
  4562  002326  EFA2  F011         	goto	l3663
  4563  00232A                     l3659:
  4564  00232A  C060  FFF6         	movff	LCDPutStr@ptr,tblptrl
  4565  00232E  C061  FFF7         	movff	LCDPutStr@ptr+1,tblptrh
  4566  002332                     	if	0	;tblptru may be non-zero
  4567  002332                     	endif
  4568  002332                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4569  002332  0E00               	movlw	low (__mediumconst shr (0+16))
  4570  002334  6EF8               	movwf	tblptru,c
  4571  002336                     	endif
  4572  002336  0008               	tblrd		*
  4573  002338  50F5               	movf	tablat,w,c
  4574  00233A  EC08  F012         	call	_LCDPutChar
  4575  00233E  0100               	movlb	0	; () banked
  4576  002340  4B60               	infsnz	LCDPutStr@ptr& (0+255),f,b
  4577  002342  2B61               	incf	(LCDPutStr@ptr+1)& (0+255),f,b
  4578  002344                     l3663:
  4579  002344  C060  FFF6         	movff	LCDPutStr@ptr,tblptrl
  4580  002348  C061  FFF7         	movff	LCDPutStr@ptr+1,tblptrh
  4581  00234C                     	if	0	;tblptru may be non-zero
  4582  00234C                     	endif
  4583  00234C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4584  00234C  0E00               	movlw	low (__mediumconst shr (0+16))
  4585  00234E  6EF8               	movwf	tblptru,c
  4586  002350                     	endif
  4587  002350  0008               	tblrd		*
  4588  002352  50F5               	movf	tablat,w,c
  4589  002354  0900               	iorlw	0
  4590  002356  A4D8               	btfss	status,2,c
  4591  002358  EFB0  F011         	goto	u1601
  4592  00235C  EFB2  F011         	goto	u1600
  4593  002360                     u1601:
  4594  002360  EF95  F011         	goto	l3659
  4595  002364                     u1600:
  4596  002364  0012               	return		;funcret
  4597  002366                     __end_of_LCDPutStr:
  4598                           	opt callstack 0
  4599                           
  4600 ;; *************** function _LCDPutChar *****************
  4601 ;; Defined at:
  4602 ;;		line 160 in file "LCD.c"
  4603 ;; Parameters:    Size  Location     Type
  4604 ;;  ch              1    wreg     unsigned char 
  4605 ;; Auto vars:     Size  Location     Type
  4606 ;;  ch              1   10[COMRAM] unsigned char 
  4607 ;; Return value:  Size  Location     Type
  4608 ;;                  1    wreg      void 
  4609 ;; Registers used:
  4610 ;;		wreg, status,2, status,0, cstack
  4611 ;; Tracked objects:
  4612 ;;		On entry : 0/0
  4613 ;;		On exit  : 0/0
  4614 ;;		Unchanged: 0/0
  4615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4617 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4619 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4620 ;;Total ram usage:        1 bytes
  4621 ;; Hardware stack levels used:    1
  4622 ;; Hardware stack levels required when called:    6
  4623 ;; This function calls:
  4624 ;;		_WritePort_BBSPI
  4625 ;; This function is called by:
  4626 ;;		_LCDPutStr
  4627 ;;		_disp_CLOCK
  4628 ;;		_disp_HOUR
  4629 ;;		_disp_MINUTE
  4630 ;;		_disp_SECOND
  4631 ;;		_disp_SW
  4632 ;; This function uses a non-reentrant model
  4633 ;;
  4634                           
  4635                           	psect	text33
  4636  002410                     __ptext33:
  4637                           	opt callstack 0
  4638  002410                     _LCDPutChar:
  4639                           	opt callstack 20
  4640                           
  4641                           ;incstack = 0
  4642                           ;LCDPutChar@ch stored from wreg
  4643  002410  6E57               	movwf	LCDPutChar@ch^0,c
  4644  002412                     
  4645                           ;LCD.c: 160: void LCDPutChar (unsigned char ch);LCD.c: 161: {;LCD.c: 163:     WritePort_
      +                          BBSPI (0x12, 0x80);
  4646  002412  0E80               	movlw	128
  4647  002414  6E55               	movwf	WritePort_BBSPI@a^0,c
  4648  002416  0E12               	movlw	18
  4649  002418  EC6F  F012         	call	_WritePort_BBSPI
  4650                           
  4651                           ;LCD.c: 165:     WritePort_BBSPI (0x13, ch);
  4652  00241C  C057  F055         	movff	LCDPutChar@ch,WritePort_BBSPI@a
  4653  002420  0E13               	movlw	19
  4654  002422  EC6F  F012         	call	_WritePort_BBSPI
  4655                           
  4656                           ;LCD.c: 167:     WritePort_BBSPI (0x12, 0xC0);
  4657  002426  0EC0               	movlw	192
  4658  002428  6E55               	movwf	WritePort_BBSPI@a^0,c
  4659  00242A  0E12               	movlw	18
  4660  00242C  EC6F  F012         	call	_WritePort_BBSPI
  4661                           
  4662                           ;LCD.c: 169:     WritePort_BBSPI (0x12, 0x00);
  4663  002430  0E00               	movlw	0
  4664  002432  6E55               	movwf	WritePort_BBSPI@a^0,c
  4665  002434  0E12               	movlw	18
  4666  002436  EC6F  F012         	call	_WritePort_BBSPI
  4667  00243A  0012               	return		;funcret
  4668  00243C                     __end_of_LCDPutChar:
  4669                           	opt callstack 0
  4670                           
  4671 ;; *************** function _LCDInit *****************
  4672 ;; Defined at:
  4673 ;;		line 45 in file "LCD.c"
  4674 ;; Parameters:    Size  Location     Type
  4675 ;;		None
  4676 ;; Auto vars:     Size  Location     Type
  4677 ;;		None
  4678 ;; Return value:  Size  Location     Type
  4679 ;;                  1    wreg      void 
  4680 ;; Registers used:
  4681 ;;		wreg, status,2, status,0, cstack
  4682 ;; Tracked objects:
  4683 ;;		On entry : 0/0
  4684 ;;		On exit  : 0/0
  4685 ;;		Unchanged: 0/0
  4686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4690 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4691 ;;Total ram usage:        0 bytes
  4692 ;; Hardware stack levels used:    1
  4693 ;; Hardware stack levels required when called:    7
  4694 ;; This function calls:
  4695 ;;		_InitBBSPI
  4696 ;;		_LCDPutInst
  4697 ;;		_Port_BBSPIInit
  4698 ;;		_WritePort_BBSPI
  4699 ;; This function is called by:
  4700 ;;		_disp_BEGIN
  4701 ;; This function uses a non-reentrant model
  4702 ;;
  4703                           
  4704                           	psect	text34
  4705  002366                     __ptext34:
  4706                           	opt callstack 0
  4707  002366                     _LCDInit:
  4708                           	opt callstack 20
  4709  002366                     
  4710                           ;LCD.c: 47:     InitBBSPI();
  4711  002366  EC85  F012         	call	_InitBBSPI	;wreg free
  4712  00236A                     
  4713                           ;LCD.c: 48:     TRISFbits.TRISF6 = 0;
  4714  00236A  9C97               	bcf	151,6,c	;volatile
  4715  00236C                     
  4716                           ;LCD.c: 49:     LATFbits.LATF6 = 0;
  4717  00236C  9C8E               	bcf	142,6,c	;volatile
  4718  00236E                     
  4719                           ;LCD.c: 51:     LATFbits.LATF6 = 1;
  4720  00236E  8C8E               	bsf	142,6,c	;volatile
  4721  002370                     
  4722                           ;LCD.c: 52:     Port_BBSPIInit (0x00);
  4723  002370  0E00               	movlw	0
  4724  002372  EC62  F012         	call	_Port_BBSPIInit
  4725  002376                     
  4726                           ;LCD.c: 53:     Port_BBSPIInit (0x01);
  4727  002376  0E01               	movlw	1
  4728  002378  EC62  F012         	call	_Port_BBSPIInit
  4729  00237C                     
  4730                           ;LCD.c: 54:     WritePort_BBSPI (0x12, 0);
  4731  00237C  0E00               	movlw	0
  4732  00237E  6E55               	movwf	WritePort_BBSPI@a^0,c
  4733  002380  0E12               	movlw	18
  4734  002382  EC6F  F012         	call	_WritePort_BBSPI
  4735  002386                     
  4736                           ;LCD.c: 56:     LCDPutInst(0x32);
  4737  002386  0E32               	movlw	50
  4738  002388  ECD3  F011         	call	_LCDPutInst
  4739  00238C                     
  4740                           ;LCD.c: 57:     LCDPutInst(0x3C);
  4741  00238C  0E3C               	movlw	60
  4742  00238E  ECD3  F011         	call	_LCDPutInst
  4743  002392                     
  4744                           ;LCD.c: 58:     LCDPutInst(0x0C);
  4745  002392  0E0C               	movlw	12
  4746  002394  ECD3  F011         	call	_LCDPutInst
  4747  002398                     
  4748                           ;LCD.c: 59:     LCDPutInst(0x01);
  4749  002398  0E01               	movlw	1
  4750  00239A  ECD3  F011         	call	_LCDPutInst
  4751  00239E                     
  4752                           ;LCD.c: 60:     LCDPutInst(0x06);
  4753  00239E  0E06               	movlw	6
  4754  0023A0  ECD3  F011         	call	_LCDPutInst
  4755  0023A4  0012               	return		;funcret
  4756  0023A6                     __end_of_LCDInit:
  4757                           	opt callstack 0
  4758                           
  4759 ;; *************** function _Port_BBSPIInit *****************
  4760 ;; Defined at:
  4761 ;;		line 123 in file "LCD.c"
  4762 ;; Parameters:    Size  Location     Type
  4763 ;;  port_dir        1    wreg     unsigned char 
  4764 ;; Auto vars:     Size  Location     Type
  4765 ;;  port_dir        1    8[COMRAM] unsigned char 
  4766 ;; Return value:  Size  Location     Type
  4767 ;;                  1    wreg      void 
  4768 ;; Registers used:
  4769 ;;		wreg, status,2, status,0, cstack
  4770 ;; Tracked objects:
  4771 ;;		On entry : 0/0
  4772 ;;		On exit  : 0/0
  4773 ;;		Unchanged: 0/0
  4774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4776 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4778 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4779 ;;Total ram usage:        1 bytes
  4780 ;; Hardware stack levels used:    1
  4781 ;; Hardware stack levels required when called:    5
  4782 ;; This function calls:
  4783 ;;		_SendByteBBSPI
  4784 ;; This function is called by:
  4785 ;;		_LCDInit
  4786 ;; This function uses a non-reentrant model
  4787 ;;
  4788                           
  4789                           	psect	text35
  4790  0024C4                     __ptext35:
  4791                           	opt callstack 0
  4792  0024C4                     _Port_BBSPIInit:
  4793                           	opt callstack 21
  4794                           
  4795                           ;incstack = 0
  4796                           ;Port_BBSPIInit@port_dir stored from wreg
  4797  0024C4  6E55               	movwf	Port_BBSPIInit@port_dir^0,c
  4798  0024C6                     
  4799                           ;LCD.c: 123: void Port_BBSPIInit (unsigned char port_dir);LCD.c: 124: {;LCD.c: 128:     
      +                          LATAbits.LATA2 = 0;
  4800  0024C6  9489               	bcf	137,2,c	;volatile
  4801  0024C8                     
  4802                           ;LCD.c: 129:     SendByteBBSPI(0x40);
  4803  0024C8  0E40               	movlw	64
  4804  0024CA  ECDE  F00F         	call	_SendByteBBSPI
  4805                           
  4806                           ;LCD.c: 130:     SendByteBBSPI(port_dir);
  4807  0024CE  5055               	movf	Port_BBSPIInit@port_dir^0,w,c
  4808  0024D0  ECDE  F00F         	call	_SendByteBBSPI
  4809                           
  4810                           ;LCD.c: 131:     SendByteBBSPI(0x00);
  4811  0024D4  0E00               	movlw	0
  4812  0024D6  ECDE  F00F         	call	_SendByteBBSPI
  4813  0024DA                     
  4814                           ;LCD.c: 132:     LATAbits.LATA2 = 1;
  4815  0024DA  8489               	bsf	137,2,c	;volatile
  4816  0024DC  0012               	return		;funcret
  4817  0024DE                     __end_of_Port_BBSPIInit:
  4818                           	opt callstack 0
  4819                           
  4820 ;; *************** function _LCDPutInst *****************
  4821 ;; Defined at:
  4822 ;;		line 179 in file "LCD.c"
  4823 ;; Parameters:    Size  Location     Type
  4824 ;;  ch              1    wreg     unsigned char 
  4825 ;; Auto vars:     Size  Location     Type
  4826 ;;  ch              1    0[BANK0 ] unsigned char 
  4827 ;; Return value:  Size  Location     Type
  4828 ;;                  1    wreg      void 
  4829 ;; Registers used:
  4830 ;;		wreg, status,2, status,0, cstack
  4831 ;; Tracked objects:
  4832 ;;		On entry : 0/0
  4833 ;;		On exit  : 0/0
  4834 ;;		Unchanged: 0/0
  4835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4837 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4838 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4839 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4840 ;;Total ram usage:        2 bytes
  4841 ;; Hardware stack levels used:    1
  4842 ;; Hardware stack levels required when called:    6
  4843 ;; This function calls:
  4844 ;;		_WritePort_BBSPI
  4845 ;; This function is called by:
  4846 ;;		_LCDInit
  4847 ;;		_disp_CLOCK
  4848 ;;		_fCLOCK
  4849 ;;		_count_Clock
  4850 ;;		_disp_HOUR
  4851 ;;		_fHOUR
  4852 ;;		_disp_MINUTE
  4853 ;;		_fMINUTE
  4854 ;;		_disp_SECOND
  4855 ;;		_fSECOND
  4856 ;;		_disp_SW
  4857 ;;		_fSW
  4858 ;;		_disp_BEGIN
  4859 ;; This function uses a non-reentrant model
  4860 ;;
  4861                           
  4862                           	psect	text36
  4863  0023A6                     __ptext36:
  4864                           	opt callstack 0
  4865  0023A6                     _LCDPutInst:
  4866                           	opt callstack 21
  4867                           
  4868                           ;incstack = 0
  4869                           ;LCDPutInst@ch stored from wreg
  4870  0023A6  0100               	movlb	0	; () banked
  4871  0023A8  6F60               	movwf	LCDPutInst@ch& (0+255),b
  4872  0023AA                     
  4873                           ;LCD.c: 179: void LCDPutInst (unsigned char ch);LCD.c: 180: {;LCD.c: 182:     WritePort_
      +                          BBSPI (0x12, 0x00);
  4874  0023AA  0E00               	movlw	0
  4875  0023AC  6E55               	movwf	WritePort_BBSPI@a^0,c
  4876  0023AE  0E12               	movlw	18
  4877  0023B0  EC6F  F012         	call	_WritePort_BBSPI
  4878                           
  4879                           ;LCD.c: 184:     WritePort_BBSPI (0x13, ch);
  4880  0023B4  C060  F055         	movff	LCDPutInst@ch,WritePort_BBSPI@a
  4881  0023B8  0E13               	movlw	19
  4882  0023BA  EC6F  F012         	call	_WritePort_BBSPI
  4883  0023BE                     
  4884                           ;LCD.c: 185:     _delay((unsigned long)((1)*(10000000/4000.0)));
  4885  0023BE  0E04               	movlw	4
  4886  0023C0  6E57               	movwf	??_LCDPutInst^0,c
  4887  0023C2  0E3E               	movlw	62
  4888  0023C4                     u1947:
  4889  0023C4  2EE8               	decfsz	wreg,f,c
  4890  0023C6  D7FE               	bra	u1947
  4891  0023C8  2E57               	decfsz	??_LCDPutInst^0,f,c
  4892  0023CA  D7FC               	bra	u1947
  4893  0023CC                     
  4894                           ;LCD.c: 186:     WritePort_BBSPI (0x12,0x40);
  4895  0023CC  0E40               	movlw	64
  4896  0023CE  6E55               	movwf	WritePort_BBSPI@a^0,c
  4897  0023D0  0E12               	movlw	18
  4898  0023D2  EC6F  F012         	call	_WritePort_BBSPI
  4899  0023D6                     
  4900                           ;LCD.c: 188:     WritePort_BBSPI (0x12, 0x00);
  4901  0023D6  0E00               	movlw	0
  4902  0023D8  6E55               	movwf	WritePort_BBSPI@a^0,c
  4903  0023DA  0E12               	movlw	18
  4904  0023DC  EC6F  F012         	call	_WritePort_BBSPI
  4905  0023E0  0012               	return		;funcret
  4906  0023E2                     __end_of_LCDPutInst:
  4907                           	opt callstack 0
  4908                           
  4909 ;; *************** function _WritePort_BBSPI *****************
  4910 ;; Defined at:
  4911 ;;		line 144 in file "LCD.c"
  4912 ;; Parameters:    Size  Location     Type
  4913 ;;  port_add        1    wreg     unsigned char 
  4914 ;;  a               1    8[COMRAM] unsigned char 
  4915 ;; Auto vars:     Size  Location     Type
  4916 ;;  port_add        1    9[COMRAM] unsigned char 
  4917 ;; Return value:  Size  Location     Type
  4918 ;;                  1    wreg      void 
  4919 ;; Registers used:
  4920 ;;		wreg, status,2, status,0, cstack
  4921 ;; Tracked objects:
  4922 ;;		On entry : 0/0
  4923 ;;		On exit  : 0/0
  4924 ;;		Unchanged: 0/0
  4925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4926 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4927 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4929 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4930 ;;Total ram usage:        2 bytes
  4931 ;; Hardware stack levels used:    1
  4932 ;; Hardware stack levels required when called:    5
  4933 ;; This function calls:
  4934 ;;		_SendByteBBSPI
  4935 ;; This function is called by:
  4936 ;;		_LCDInit
  4937 ;;		_LCDPutChar
  4938 ;;		_LCDPutInst
  4939 ;; This function uses a non-reentrant model
  4940 ;;
  4941                           
  4942                           	psect	text37
  4943  0024DE                     __ptext37:
  4944                           	opt callstack 0
  4945  0024DE                     _WritePort_BBSPI:
  4946                           	opt callstack 20
  4947                           
  4948                           ;incstack = 0
  4949                           ;WritePort_BBSPI@port_add stored from wreg
  4950  0024DE  6E56               	movwf	WritePort_BBSPI@port_add^0,c
  4951  0024E0                     
  4952                           ;LCD.c: 144: void WritePort_BBSPI (unsigned char port_add, unsigned char a);LCD.c: 145: 
      +                          {;LCD.c: 146:     LATAbits.LATA2 = 0;
  4953  0024E0  9489               	bcf	137,2,c	;volatile
  4954  0024E2                     
  4955                           ;LCD.c: 147:     SendByteBBSPI(0x40);
  4956  0024E2  0E40               	movlw	64
  4957  0024E4  ECDE  F00F         	call	_SendByteBBSPI
  4958                           
  4959                           ;LCD.c: 148:     SendByteBBSPI(port_add);
  4960  0024E8  5056               	movf	WritePort_BBSPI@port_add^0,w,c
  4961  0024EA  ECDE  F00F         	call	_SendByteBBSPI
  4962                           
  4963                           ;LCD.c: 149:     SendByteBBSPI(a);
  4964  0024EE  5055               	movf	WritePort_BBSPI@a^0,w,c
  4965  0024F0  ECDE  F00F         	call	_SendByteBBSPI
  4966  0024F4                     
  4967                           ;LCD.c: 150:     LATAbits.LATA2 = 1;
  4968  0024F4  8489               	bsf	137,2,c	;volatile
  4969  0024F6  0012               	return		;funcret
  4970  0024F8                     __end_of_WritePort_BBSPI:
  4971                           	opt callstack 0
  4972                           
  4973 ;; *************** function _SendByteBBSPI *****************
  4974 ;; Defined at:
  4975 ;;		line 91 in file "LCD.c"
  4976 ;; Parameters:    Size  Location     Type
  4977 ;;  output          1    wreg     unsigned char 
  4978 ;; Auto vars:     Size  Location     Type
  4979 ;;  output          1    5[COMRAM] unsigned char 
  4980 ;;  input           1    7[COMRAM] unsigned char 
  4981 ;;  bitcount        1    6[COMRAM] unsigned char 
  4982 ;; Return value:  Size  Location     Type
  4983 ;;                  1    wreg      void 
  4984 ;; Registers used:
  4985 ;;		wreg, status,2, status,0
  4986 ;; Tracked objects:
  4987 ;;		On entry : 0/0
  4988 ;;		On exit  : 0/0
  4989 ;;		Unchanged: 0/0
  4990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4992 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4994 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4995 ;;Total ram usage:        3 bytes
  4996 ;; Hardware stack levels used:    1
  4997 ;; Hardware stack levels required when called:    4
  4998 ;; This function calls:
  4999 ;;		Nothing
  5000 ;; This function is called by:
  5001 ;;		_Port_BBSPIInit
  5002 ;;		_WritePort_BBSPI
  5003 ;; This function uses a non-reentrant model
  5004 ;;
  5005                           
  5006                           	psect	text38
  5007  001FBC                     __ptext38:
  5008                           	opt callstack 0
  5009  001FBC                     _SendByteBBSPI:
  5010                           	opt callstack 20
  5011                           
  5012                           ;incstack = 0
  5013                           ;SendByteBBSPI@output stored from wreg
  5014  001FBC  6E52               	movwf	SendByteBBSPI@output^0,c
  5015  001FBE                     
  5016                           ;LCD.c: 91: void SendByteBBSPI (unsigned char output);LCD.c: 92: {;LCD.c: 93:     unsign
      +                          ed char bitcount;;LCD.c: 94:     unsigned char input = output;
  5017  001FBE  C052  F054         	movff	SendByteBBSPI@output,SendByteBBSPI@input
  5018  001FC2                     
  5019                           ;LCD.c: 96:     for(bitcount=0;bitcount<8;bitcount++)
  5020  001FC2  0E00               	movlw	0
  5021  001FC4  6E53               	movwf	SendByteBBSPI@bitcount^0,c
  5022  001FC6                     l464:
  5023                           
  5024                           ;LCD.c: 97:     {;LCD.c: 99:         if(output & 0x80)
  5025  001FC6  AE52               	btfss	SendByteBBSPI@output^0,7,c
  5026  001FC8  EFE8  F00F         	goto	u1571
  5027  001FCC  EFEA  F00F         	goto	u1570
  5028  001FD0                     u1571:
  5029  001FD0  EFED  F00F         	goto	l466
  5030  001FD4                     u1570:
  5031  001FD4                     
  5032                           ;LCD.c: 100:             LATCbits.LATC5 = 1;
  5033  001FD4  8A8B               	bsf	139,5,c	;volatile
  5034  001FD6  EFEE  F00F         	goto	l467
  5035  001FDA                     l466:
  5036                           
  5037                           ;LCD.c: 102:             LATCbits.LATC5 = 0;
  5038  001FDA  9A8B               	bcf	139,5,c	;volatile
  5039  001FDC                     l467:
  5040                           
  5041                           ;LCD.c: 104:         if (LATCbits.LATC4)
  5042  001FDC  A88B               	btfss	139,4,c	;volatile
  5043  001FDE  EFF3  F00F         	goto	u1581
  5044  001FE2  EFF5  F00F         	goto	u1580
  5045  001FE6                     u1581:
  5046  001FE6  EFF9  F00F         	goto	l3601
  5047  001FEA                     u1580:
  5048  001FEA                     
  5049                           ;LCD.c: 105:             input = (input << 1) | 0x1;
  5050  001FEA  80D8               	bsf	status,0,c
  5051  001FEC  3654               	rlcf	SendByteBBSPI@input^0,f,c
  5052  001FEE  EFFC  F00F         	goto	l3603
  5053  001FF2                     l3601:
  5054                           
  5055                           ;LCD.c: 107:             input = input << 1;
  5056  001FF2  5054               	movf	SendByteBBSPI@input^0,w,c
  5057  001FF4  2454               	addwf	SendByteBBSPI@input^0,w,c
  5058  001FF6  6E54               	movwf	SendByteBBSPI@input^0,c
  5059  001FF8                     l3603:
  5060                           
  5061                           ;LCD.c: 108:         LATCbits.LATC3 = 1;
  5062  001FF8  868B               	bsf	139,3,c	;volatile
  5063  001FFA                     
  5064                           ;LCD.c: 109:         __nop();__nop();__nop();__nop();__nop();__nop();
  5065  001FFA  F000               	nop	
  5066  001FFC  F000               	nop	
  5067  001FFE  F000               	nop	
  5068  002000  F000               	nop	
  5069  002002  F000               	nop	
  5070  002004  F000               	nop	
  5071  002006                     
  5072                           ;LCD.c: 110:         __nop();__nop();__nop();__nop();__nop();__nop();
  5073  002006  F000               	nop	
  5074  002008  F000               	nop	
  5075  00200A  F000               	nop	
  5076  00200C  F000               	nop	
  5077  00200E  F000               	nop	
  5078  002010  F000               	nop	
  5079  002012                     
  5080                           ;LCD.c: 111:         LATCbits.LATC3 = 0;
  5081  002012  968B               	bcf	139,3,c	;volatile
  5082                           
  5083                           ;LCD.c: 112:         output <<= 1;
  5084  002014  90D8               	bcf	status,0,c
  5085  002016  3652               	rlcf	SendByteBBSPI@output^0,f,c
  5086  002018                     
  5087                           ;LCD.c: 113:     }
  5088  002018  2A53               	incf	SendByteBBSPI@bitcount^0,f,c
  5089  00201A  0E07               	movlw	7
  5090  00201C  6453               	cpfsgt	SendByteBBSPI@bitcount^0,c
  5091  00201E  EF13  F010         	goto	u1591
  5092  002022  EF15  F010         	goto	u1590
  5093  002026                     u1591:
  5094  002026  EFE3  F00F         	goto	l464
  5095  00202A                     u1590:
  5096  00202A  0012               	return		;funcret
  5097  00202C                     __end_of_SendByteBBSPI:
  5098                           	opt callstack 0
  5099                           
  5100 ;; *************** function _InitBBSPI *****************
  5101 ;; Defined at:
  5102 ;;		line 70 in file "LCD.c"
  5103 ;; Parameters:    Size  Location     Type
  5104 ;;		None
  5105 ;; Auto vars:     Size  Location     Type
  5106 ;;		None
  5107 ;; Return value:  Size  Location     Type
  5108 ;;                  1    wreg      void 
  5109 ;; Registers used:
  5110 ;;		None
  5111 ;; Tracked objects:
  5112 ;;		On entry : 0/0
  5113 ;;		On exit  : 0/0
  5114 ;;		Unchanged: 0/0
  5115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5117 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5119 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5120 ;;Total ram usage:        0 bytes
  5121 ;; Hardware stack levels used:    1
  5122 ;; Hardware stack levels required when called:    4
  5123 ;; This function calls:
  5124 ;;		Nothing
  5125 ;; This function is called by:
  5126 ;;		_LCDInit
  5127 ;; This function uses a non-reentrant model
  5128 ;;
  5129                           
  5130                           	psect	text39
  5131  00250A                     __ptext39:
  5132                           	opt callstack 0
  5133  00250A                     _InitBBSPI:
  5134                           	opt callstack 22
  5135  00250A                     
  5136                           ;LCD.c: 72:     TRISAbits.TRISA2 = 0;
  5137  00250A  9492               	bcf	146,2,c	;volatile
  5138                           
  5139                           ;LCD.c: 73:     TRISCbits.TRISC4 = 1;
  5140  00250C  8894               	bsf	148,4,c	;volatile
  5141                           
  5142                           ;LCD.c: 74:     TRISCbits.TRISC5 = 0;
  5143  00250E  9A94               	bcf	148,5,c	;volatile
  5144                           
  5145                           ;LCD.c: 75:     TRISCbits.TRISC3 = 0;
  5146  002510  9694               	bcf	148,3,c	;volatile
  5147                           
  5148                           ;LCD.c: 77:     LATAbits.LATA2 = 1;
  5149  002512  8489               	bsf	137,2,c	;volatile
  5150                           
  5151                           ;LCD.c: 78:     LATCbits.LATC4 = 1;
  5152  002514  888B               	bsf	139,4,c	;volatile
  5153                           
  5154                           ;LCD.c: 79:     LATCbits.LATC5 = 0;
  5155  002516  9A8B               	bcf	139,5,c	;volatile
  5156                           
  5157                           ;LCD.c: 80:     LATCbits.LATC3 = 0;
  5158  002518  968B               	bcf	139,3,c	;volatile
  5159  00251A  0012               	return		;funcret
  5160  00251C                     __end_of_InitBBSPI:
  5161                           	opt callstack 0
  5162                           
  5163 ;; *************** function _BEGIN_delay *****************
  5164 ;; Defined at:
  5165 ;;		line 26 in file "BEGIN.c"
  5166 ;; Parameters:    Size  Location     Type
  5167 ;;		None
  5168 ;; Auto vars:     Size  Location     Type
  5169 ;;  i               1    6[COMRAM] unsigned char 
  5170 ;; Return value:  Size  Location     Type
  5171 ;;                  1    wreg      void 
  5172 ;; Registers used:
  5173 ;;		wreg, status,2, status,0
  5174 ;; Tracked objects:
  5175 ;;		On entry : 0/0
  5176 ;;		On exit  : 0/0
  5177 ;;		Unchanged: 0/0
  5178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5180 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5181 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5182 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5183 ;;Total ram usage:        2 bytes
  5184 ;; Hardware stack levels used:    1
  5185 ;; Hardware stack levels required when called:    4
  5186 ;; This function calls:
  5187 ;;		Nothing
  5188 ;; This function is called by:
  5189 ;;		_disp_BEGIN
  5190 ;; This function uses a non-reentrant model
  5191 ;;
  5192                           
  5193                           	psect	text40
  5194  00243C                     __ptext40:
  5195                           	opt callstack 0
  5196  00243C                     _BEGIN_delay:
  5197                           	opt callstack 23
  5198  00243C                     
  5199                           ;BEGIN.c: 28:     unsigned char i;;BEGIN.c: 29:     for (i=0;i<25;i++)
  5200  00243C  0E00               	movlw	0
  5201  00243E  6E53               	movwf	BEGIN_delay@i^0,c
  5202  002440                     l2307:
  5203                           
  5204                           ;BEGIN.c: 30:     {_delay((unsigned long)((50)*(10000000/4000.0)));}
  5205  002440  0EA3               	movlw	163
  5206  002442  6E52               	movwf	??_BEGIN_delay^0,c
  5207  002444  0E55               	movlw	85
  5208  002446                     u1957:
  5209  002446  2EE8               	decfsz	wreg,f,c
  5210  002448  D7FE               	bra	u1957
  5211  00244A  2E52               	decfsz	??_BEGIN_delay^0,f,c
  5212  00244C  D7FC               	bra	u1957
  5213  00244E  F000               	nop	
  5214  002450  2A53               	incf	BEGIN_delay@i^0,f,c
  5215  002452  0E18               	movlw	24
  5216  002454  6453               	cpfsgt	BEGIN_delay@i^0,c
  5217  002456  EF2F  F012         	goto	u301
  5218  00245A  EF31  F012         	goto	u300
  5219  00245E                     u301:
  5220  00245E  EF20  F012         	goto	l2307
  5221  002462                     u300:
  5222  002462  0012               	return		;funcret
  5223  002464                     __end_of_BEGIN_delay:
  5224                           	opt callstack 0
  5225                           
  5226 ;; *************** function _INTERRUPT_InterruptManager *****************
  5227 ;; Defined at:
  5228 ;;		line 17 in file "interrupt.c"
  5229 ;; Parameters:    Size  Location     Type
  5230 ;;		None
  5231 ;; Auto vars:     Size  Location     Type
  5232 ;;		None
  5233 ;; Return value:  Size  Location     Type
  5234 ;;                  1    wreg      void 
  5235 ;; Registers used:
  5236 ;;		wreg, status,2, status,0, cstack
  5237 ;; Tracked objects:
  5238 ;;		On entry : 0/0
  5239 ;;		On exit  : 0/0
  5240 ;;		Unchanged: 0/0
  5241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5242 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5243 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5245 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5246 ;;Total ram usage:        0 bytes
  5247 ;; Hardware stack levels used:    1
  5248 ;; Hardware stack levels required when called:    3
  5249 ;; This function calls:
  5250 ;;		_TMR1_ISR
  5251 ;; This function is called by:
  5252 ;;		Interrupt level 2
  5253 ;; This function uses a non-reentrant model
  5254 ;;
  5255                           
  5256                           	psect	intcode
  5257  000008                     __pintcode:
  5258                           	opt callstack 0
  5259  000008                     _INTERRUPT_InterruptManager:
  5260                           	opt callstack 19
  5261                           
  5262                           ;incstack = 0
  5263  000008  825A               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  5264  00000A  ED32  F012         	call	int_func,f	;refresh shadow registers
  5265                           
  5266                           	psect	intcode_body
  5267  002464                     __pintcode_body:
  5268                           	opt callstack 19
  5269  002464                     int_func:
  5270                           	opt callstack 19
  5271  002464  0006               	pop		; remove dummy address from shadow register refresh
  5272  002466                     
  5273                           ;interrupt.c: 19:     if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
  5274  002466  A09D               	btfss	157,0,c	;volatile
  5275  002468  EF38  F012         	goto	i2u155_41
  5276  00246C  EF3A  F012         	goto	i2u155_40
  5277  002470                     i2u155_41:
  5278  002470  EF43  F012         	goto	i2l100
  5279  002474                     i2u155_40:
  5280  002474  A09E               	btfss	158,0,c	;volatile
  5281  002476  EF3F  F012         	goto	i2u156_41
  5282  00247A  EF41  F012         	goto	i2u156_40
  5283  00247E                     i2u156_41:
  5284  00247E  EF43  F012         	goto	i2l100
  5285  002482                     i2u156_40:
  5286  002482                     
  5287                           ;interrupt.c: 20:     {;interrupt.c: 21:         TMR1_ISR();
  5288  002482  ECBD  F00B         	call	_TMR1_ISR	;wreg free
  5289  002486                     i2l100:
  5290  002486  925A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  5291  002488  0011               	retfie		f
  5292  00248A                     __end_of_INTERRUPT_InterruptManager:
  5293                           	opt callstack 0
  5294                           
  5295 ;; *************** function _TMR1_ISR *****************
  5296 ;; Defined at:
  5297 ;;		line 106 in file "tmr1.c"
  5298 ;; Parameters:    Size  Location     Type
  5299 ;;		None
  5300 ;; Auto vars:     Size  Location     Type
  5301 ;;		None
  5302 ;; Return value:  Size  Location     Type
  5303 ;;                  1    wreg      void 
  5304 ;; Registers used:
  5305 ;;		wreg, status,2, status,0, cstack
  5306 ;; Tracked objects:
  5307 ;;		On entry : 0/0
  5308 ;;		On exit  : 0/0
  5309 ;;		Unchanged: 0/0
  5310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5312 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5314 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5315 ;;Total ram usage:        0 bytes
  5316 ;; Hardware stack levels used:    1
  5317 ;; Hardware stack levels required when called:    2
  5318 ;; This function calls:
  5319 ;;		i2_buttonFSMRB0
  5320 ;;		i2_readButtonRB0
  5321 ;; This function is called by:
  5322 ;;		_INTERRUPT_InterruptManager
  5323 ;; This function uses a non-reentrant model
  5324 ;;
  5325                           
  5326                           	psect	text42
  5327  00177A                     __ptext42:
  5328                           	opt callstack 0
  5329  00177A                     _TMR1_ISR:
  5330                           	opt callstack 19
  5331  00177A                     
  5332                           ;tmr1.c: 110:     PIR1bits.TMR1IF = 0;
  5333  00177A  909E               	bcf	158,0,c	;volatile
  5334  00177C                     
  5335                           ;tmr1.c: 113:     TMR1H = (timer1ReloadVal >> 8);
  5336  00177C  5059               	movf	(_timer1ReloadVal+1)^0,w,c	;volatile
  5337  00177E  6ECF               	movwf	207,c	;volatile
  5338  001780                     
  5339                           ;tmr1.c: 114:     TMR1L = (uint8_t) timer1ReloadVal;
  5340  001780  C058  FFCE         	movff	_timer1ReloadVal,4046	;volatile
  5341                           
  5342                           ;tmr1.c: 115:     timerflag = 1;
  5343  001784  0E01               	movlw	1
  5344  001786  6E38               	movwf	_timerflag^0,c
  5345                           
  5346                           ;tmr1.c: 116:     swflag = 1;
  5347  001788  0E01               	movlw	1
  5348  00178A  6E37               	movwf	_swflag^0,c
  5349  00178C                     
  5350                           ;tmr1.c: 117:     if (readButtonRB0()) {
  5351  00178C  EC80  F010         	call	i2_readButtonRB0	;wreg free
  5352  001790  504D               	movf	?i2_readButtonRB0^0,w,c
  5353  001792  104E               	iorwf	(?i2_readButtonRB0+1)^0,w,c
  5354  001794  B4D8               	btfsc	status,2,c
  5355  001796  EFCF  F00B         	goto	i2u146_41
  5356  00179A  EFD1  F00B         	goto	i2u146_40
  5357  00179E                     i2u146_41:
  5358  00179E  EF0F  F00C         	goto	i2l3485
  5359  0017A2                     i2u146_40:
  5360  0017A2                     
  5361                           ;tmr1.c: 118:         pRB0 = 1;
  5362  0017A2  0E00               	movlw	0
  5363  0017A4  6E2A               	movwf	(_pRB0+1)^0,c
  5364  0017A6  0E01               	movlw	1
  5365  0017A8  6E29               	movwf	_pRB0^0,c
  5366                           
  5367                           ;tmr1.c: 119:         access_state = 1;
  5368  0017AA  0E00               	movlw	0
  5369  0017AC  6E16               	movwf	(_access_state+1)^0,c
  5370  0017AE  0E01               	movlw	1
  5371  0017B0  6E15               	movwf	_access_state^0,c
  5372  0017B2                     
  5373                           ;tmr1.c: 120:         countMode++;
  5374  0017B2  4A25               	infsnz	_countMode^0,f,c
  5375  0017B4  2A26               	incf	(_countMode+1)^0,f,c
  5376  0017B6                     
  5377                           ;tmr1.c: 121:         if (countMode >= 100)
  5378  0017B6  BE26               	btfsc	(_countMode+1)^0,7,c
  5379  0017B8  EFE7  F00B         	goto	i2u147_41
  5380  0017BC  5026               	movf	(_countMode+1)^0,w,c
  5381  0017BE  E109               	bnz	i2u147_40
  5382  0017C0  0E64               	movlw	100
  5383  0017C2  5C25               	subwf	_countMode^0,w,c
  5384  0017C4  A0D8               	btfss	status,0,c
  5385  0017C6  EFE7  F00B         	goto	i2u147_41
  5386  0017CA  EFE9  F00B         	goto	i2u147_40
  5387  0017CE                     i2u147_41:
  5388  0017CE  EF01  F00C         	goto	i2l3481
  5389  0017D2                     i2u147_40:
  5390  0017D2                     
  5391                           ;tmr1.c: 122:         {;tmr1.c: 123:             fastMode = 1;
  5392  0017D2  0E01               	movlw	1
  5393  0017D4  6E3C               	movwf	_fastMode^0,c
  5394  0017D6                     
  5395                           ;tmr1.c: 124:             countpTime++;
  5396  0017D6  4A27               	infsnz	_countpTime^0,f,c
  5397  0017D8  2A28               	incf	(_countpTime+1)^0,f,c
  5398  0017DA                     
  5399                           ;tmr1.c: 125:             if (countpTime >= 50){
  5400  0017DA  BE28               	btfsc	(_countpTime+1)^0,7,c
  5401  0017DC  EFF9  F00B         	goto	i2u148_41
  5402  0017E0  5028               	movf	(_countpTime+1)^0,w,c
  5403  0017E2  E109               	bnz	i2u148_40
  5404  0017E4  0E32               	movlw	50
  5405  0017E6  5C27               	subwf	_countpTime^0,w,c
  5406  0017E8  A0D8               	btfss	status,0,c
  5407  0017EA  EFF9  F00B         	goto	i2u148_41
  5408  0017EE  EFFB  F00B         	goto	i2u148_40
  5409  0017F2                     i2u148_41:
  5410  0017F2  EF01  F00C         	goto	i2l3481
  5411  0017F6                     i2u148_40:
  5412  0017F6                     
  5413                           ;tmr1.c: 126:                 FastIncreaseFlag = 1;
  5414  0017F6  0E01               	movlw	1
  5415  0017F8  6E3F               	movwf	_FastIncreaseFlag^0,c
  5416                           
  5417                           ;tmr1.c: 127:                 countpTime = 0;
  5418  0017FA  0E00               	movlw	0
  5419  0017FC  6E28               	movwf	(_countpTime+1)^0,c
  5420  0017FE  0E00               	movlw	0
  5421  001800  6E27               	movwf	_countpTime^0,c
  5422  001802                     i2l3481:
  5423                           
  5424                           ;tmr1.c: 130:         if (state == 5) buttonFSMRB0();
  5425  001802  0E05               	movlw	5
  5426  001804  180D               	xorwf	_state^0,w,c
  5427  001806  100E               	iorwf	(_state+1)^0,w,c
  5428  001808  A4D8               	btfss	status,2,c
  5429  00180A  EF09  F00C         	goto	i2u149_41
  5430  00180E  EF0B  F00C         	goto	i2u149_40
  5431  001812                     i2u149_41:
  5432  001812  EF21  F00C         	goto	i2l228
  5433  001816                     i2u149_40:
  5434  001816  ECE9  F00E         	call	i2_buttonFSMRB0	;wreg free
  5435  00181A  EF21  F00C         	goto	i2l228
  5436  00181E                     i2l3485:
  5437                           
  5438                           ;tmr1.c: 133:             fastMode = 0;
  5439  00181E  0E00               	movlw	0
  5440  001820  6E3C               	movwf	_fastMode^0,c
  5441                           
  5442                           ;tmr1.c: 134:             countpTime = 0;
  5443  001822  0E00               	movlw	0
  5444  001824  6E28               	movwf	(_countpTime+1)^0,c
  5445  001826  0E00               	movlw	0
  5446  001828  6E27               	movwf	_countpTime^0,c
  5447                           
  5448                           ;tmr1.c: 135:             countMode = 0;
  5449  00182A  0E00               	movlw	0
  5450  00182C  6E26               	movwf	(_countMode+1)^0,c
  5451  00182E  0E00               	movlw	0
  5452  001830  6E25               	movwf	_countMode^0,c
  5453                           
  5454                           ;tmr1.c: 136:             pRB0 = 0;
  5455  001832  0E00               	movlw	0
  5456  001834  6E2A               	movwf	(_pRB0+1)^0,c
  5457  001836  0E00               	movlw	0
  5458  001838  6E29               	movwf	_pRB0^0,c
  5459                           
  5460                           ;tmr1.c: 137:             normalFlag = 0;
  5461  00183A  0E00               	movlw	0
  5462  00183C  6E3B               	movwf	_normalFlag^0,c
  5463                           
  5464                           ;tmr1.c: 138:             FastIncreaseFlag = 0;
  5465  00183E  0E00               	movlw	0
  5466  001840  6E3F               	movwf	_FastIncreaseFlag^0,c
  5467  001842                     i2l228:
  5468  001842  0012               	return		;funcret
  5469  001844                     __end_of_TMR1_ISR:
  5470                           	opt callstack 0
  5471                           
  5472 ;; *************** function i2_buttonFSMRB0 *****************
  5473 ;; Defined at:
  5474 ;;		line 38 in file "main.c"
  5475 ;; Parameters:    Size  Location     Type
  5476 ;;		None
  5477 ;; Auto vars:     Size  Location     Type
  5478 ;;		None
  5479 ;; Return value:  Size  Location     Type
  5480 ;;                  1    wreg      void 
  5481 ;; Registers used:
  5482 ;;		wreg, status,2, status,0, cstack
  5483 ;; Tracked objects:
  5484 ;;		On entry : 0/0
  5485 ;;		On exit  : 0/0
  5486 ;;		Unchanged: 0/0
  5487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5489 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5490 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5491 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5492 ;;Total ram usage:        2 bytes
  5493 ;; Hardware stack levels used:    1
  5494 ;; Hardware stack levels required when called:    1
  5495 ;; This function calls:
  5496 ;;		i2_readButtonRB0
  5497 ;; This function is called by:
  5498 ;;		_TMR1_ISR
  5499 ;; This function uses a non-reentrant model
  5500 ;;
  5501                           
  5502                           	psect	text43
  5503  001DD2                     __ptext43:
  5504                           	opt callstack 0
  5505  001DD2                     i2_buttonFSMRB0:
  5506                           	opt callstack 19
  5507  001DD2                     
  5508                           ;main.c: 39:     switch(buttonStateRB0){
  5509  001DD2  EF11  F00F         	goto	i2l3453
  5510  001DD6                     i2l3441:
  5511                           
  5512                           ;main.c: 41:             if (readButtonRB0()) {
  5513  001DD6  EC80  F010         	call	i2_readButtonRB0	;wreg free
  5514  001DDA  504D               	movf	?i2_readButtonRB0^0,w,c
  5515  001DDC  104E               	iorwf	(?i2_readButtonRB0+1)^0,w,c
  5516  001DDE  B4D8               	btfsc	status,2,c
  5517  001DE0  EFF4  F00E         	goto	i2u144_41
  5518  001DE4  EFF6  F00E         	goto	i2u144_40
  5519  001DE8                     i2u144_41:
  5520  001DE8  EF26  F00F         	goto	i2l1246
  5521  001DEC                     i2u144_40:
  5522  001DEC                     
  5523                           ;main.c: 42:                 buttonStateRB0 = 1;
  5524  001DEC  0E01               	movlw	1
  5525  001DEE  6E39               	movwf	_buttonStateRB0^0,c
  5526  001DF0                     
  5527                           ;main.c: 43:                 stopWatch_state = 1 - stopWatch_state;
  5528  001DF0  5011               	movf	_stopWatch_state^0,w,c
  5529  001DF2  0801               	sublw	1
  5530  001DF4  6E11               	movwf	_stopWatch_state^0,c
  5531  001DF6  5012               	movf	(_stopWatch_state+1)^0,w,c
  5532  001DF8  A0D8               	btfss	status,0,c
  5533  001DFA  2AE8               	incf	wreg,f,c
  5534  001DFC  0800               	sublw	0
  5535  001DFE  6E12               	movwf	(_stopWatch_state+1)^0,c
  5536  001E00  EF26  F00F         	goto	i2l1246
  5537  001E04                     i2l3447:
  5538                           
  5539                           ;main.c: 47:             if(!readButtonRB0()){
  5540  001E04  EC80  F010         	call	i2_readButtonRB0	;wreg free
  5541  001E08  504D               	movf	?i2_readButtonRB0^0,w,c
  5542  001E0A  104E               	iorwf	(?i2_readButtonRB0+1)^0,w,c
  5543  001E0C  A4D8               	btfss	status,2,c
  5544  001E0E  EF0B  F00F         	goto	i2u145_41
  5545  001E12  EF0D  F00F         	goto	i2u145_40
  5546  001E16                     i2u145_41:
  5547  001E16  EF26  F00F         	goto	i2l1246
  5548  001E1A                     i2u145_40:
  5549  001E1A                     
  5550                           ;main.c: 48:                 buttonStateRB0 = 0;
  5551  001E1A  0E00               	movlw	0
  5552  001E1C  6E39               	movwf	_buttonStateRB0^0,c
  5553  001E1E  EF26  F00F         	goto	i2l1246
  5554  001E22                     i2l3453:
  5555  001E22  5039               	movf	_buttonStateRB0^0,w,c
  5556  001E24  6E50               	movwf	??i2_buttonFSMRB0^0,c
  5557  001E26  6A51               	clrf	(??i2_buttonFSMRB0+1)^0,c
  5558                           
  5559                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5560                           ; Switch size 1, requested type "simple"
  5561                           ; Number of cases is 1, Range of values is 0 to 0
  5562                           ; switch strategies available:
  5563                           ; Name         Instructions Cycles
  5564                           ; simple_byte            4     3 (average)
  5565                           ;	Chosen strategy is simple_byte
  5566  001E28  5051               	movf	(??i2_buttonFSMRB0+1)^0,w,c
  5567  001E2A  0A00               	xorlw	0	; case 0
  5568  001E2C  B4D8               	btfsc	status,2,c
  5569  001E2E  EF1B  F00F         	goto	i2l4181
  5570  001E32  EF26  F00F         	goto	i2l1246
  5571  001E36                     i2l4181:
  5572                           
  5573                           ; Switch size 1, requested type "simple"
  5574                           ; Number of cases is 2, Range of values is 0 to 1
  5575                           ; switch strategies available:
  5576                           ; Name         Instructions Cycles
  5577                           ; simple_byte            7     4 (average)
  5578                           ;	Chosen strategy is simple_byte
  5579  001E36  5050               	movf	??i2_buttonFSMRB0^0,w,c
  5580  001E38  0A00               	xorlw	0	; case 0
  5581  001E3A  B4D8               	btfsc	status,2,c
  5582  001E3C  EFEB  F00E         	goto	i2l3441
  5583  001E40  0A01               	xorlw	1	; case 1
  5584  001E42  B4D8               	btfsc	status,2,c
  5585  001E44  EF02  F00F         	goto	i2l3447
  5586  001E48  EF26  F00F         	goto	i2l1246
  5587  001E4C                     i2l1246:
  5588  001E4C  0012               	return		;funcret
  5589  001E4E                     __end_ofi2_buttonFSMRB0:
  5590                           	opt callstack 0
  5591                           
  5592 ;; *************** function i2_readButtonRB0 *****************
  5593 ;; Defined at:
  5594 ;;		line 10 in file "Button.c"
  5595 ;; Parameters:    Size  Location     Type
  5596 ;;		None
  5597 ;; Auto vars:     Size  Location     Type
  5598 ;;		None
  5599 ;; Return value:  Size  Location     Type
  5600 ;;                  2    0[COMRAM] int 
  5601 ;; Registers used:
  5602 ;;		wreg, status,2, status,0
  5603 ;; Tracked objects:
  5604 ;;		On entry : 0/0
  5605 ;;		On exit  : 0/0
  5606 ;;		Unchanged: 0/0
  5607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5608 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5609 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5610 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5611 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5612 ;;Total ram usage:        3 bytes
  5613 ;; Hardware stack levels used:    1
  5614 ;; This function calls:
  5615 ;;		Nothing
  5616 ;; This function is called by:
  5617 ;;		_TMR1_ISR
  5618 ;;		i2_buttonFSMRB0
  5619 ;; This function uses a non-reentrant model
  5620 ;;
  5621                           
  5622                           	psect	text44
  5623  002100                     __ptext44:
  5624                           	opt callstack 0
  5625  002100                     i2_readButtonRB0:
  5626                           	opt callstack 20
  5627  002100                     
  5628                           ;Button.c: 11:     firstReadRB0 = secondReadRB0;
  5629  002100  C02D  F02F         	movff	_secondReadRB0,_firstReadRB0
  5630  002104  C02E  F030         	movff	_secondReadRB0+1,_firstReadRB0+1
  5631                           
  5632                           ;Button.c: 12:     secondReadRB0 = thirdReadRB0;
  5633  002108  C02B  F02D         	movff	_thirdReadRB0,_secondReadRB0
  5634  00210C  C02C  F02E         	movff	_thirdReadRB0+1,_secondReadRB0+1
  5635  002110                     
  5636                           ;Button.c: 13:     thirdReadRB0 = PORTBbits.RB0;
  5637  002110  B081               	btfsc	129,0,c	;volatile
  5638  002112  EF8D  F010         	goto	i2u124_41
  5639  002116  EF91  F010         	goto	i2u124_40
  5640  00211A                     i2u124_41:
  5641  00211A  6A4F               	clrf	??i2_readButtonRB0^0,c
  5642  00211C  2A4F               	incf	??i2_readButtonRB0^0,f,c
  5643  00211E  EF92  F010         	goto	i2u124_48
  5644  002122                     i2u124_40:
  5645  002122  6A4F               	clrf	??i2_readButtonRB0^0,c
  5646  002124                     i2u124_48:
  5647  002124  504F               	movf	??i2_readButtonRB0^0,w,c
  5648  002126  6E2B               	movwf	_thirdReadRB0^0,c
  5649  002128  6A2C               	clrf	(_thirdReadRB0+1)^0,c
  5650  00212A                     
  5651                           ;Button.c: 14:     if (firstReadRB0 == thirdReadRB0 )
  5652  00212A  502B               	movf	_thirdReadRB0^0,w,c
  5653  00212C  182F               	xorwf	_firstReadRB0^0,w,c
  5654  00212E  E107               	bnz	i2u125_41
  5655  002130  502C               	movf	(_thirdReadRB0+1)^0,w,c
  5656  002132  1830               	xorwf	(_firstReadRB0+1)^0,w,c
  5657  002134  A4D8               	btfss	status,2,c
  5658  002136  EF9F  F010         	goto	i2u125_41
  5659  00213A  EFA1  F010         	goto	i2u125_40
  5660  00213E                     i2u125_41:
  5661  00213E  EFB0  F010         	goto	i2l3291
  5662  002142                     i2u125_40:
  5663  002142                     
  5664                           ;Button.c: 15:         if (firstReadRB0 == 0) return 1;
  5665  002142  502F               	movf	_firstReadRB0^0,w,c
  5666  002144  1030               	iorwf	(_firstReadRB0+1)^0,w,c
  5667  002146  A4D8               	btfss	status,2,c
  5668  002148  EFA8  F010         	goto	i2u126_41
  5669  00214C  EFAA  F010         	goto	i2u126_40
  5670  002150                     i2u126_41:
  5671  002150  EFB0  F010         	goto	i2l3291
  5672  002154                     i2u126_40:
  5673  002154  0E00               	movlw	0
  5674  002156  6E4E               	movwf	(?i2_readButtonRB0+1)^0,c
  5675  002158  0E01               	movlw	1
  5676  00215A  6E4D               	movwf	?i2_readButtonRB0^0,c
  5677  00215C  EFB4  F010         	goto	i2l575
  5678  002160                     i2l3291:
  5679                           
  5680                           ;Button.c: 16:     return 0;
  5681  002160  0E00               	movlw	0
  5682  002162  6E4E               	movwf	(?i2_readButtonRB0+1)^0,c
  5683  002164  0E00               	movlw	0
  5684  002166  6E4D               	movwf	?i2_readButtonRB0^0,c
  5685  002168                     i2l575:
  5686  002168  0012               	return		;funcret
  5687  00216A                     __end_ofi2_readButtonRB0:
  5688                           	opt callstack 0
  5689                           
  5690                           	psect	rparam
  5691  0000                     
  5692                           	psect	temp
  5693  00005A                     btemp:
  5694                           	opt callstack 0
  5695  00005A                     	ds	1
  5696  0000                     int$flags	set	btemp
  5697  0000                     wtemp8	set	btemp+1
  5698  0000                     ttemp5	set	btemp+1
  5699  0000                     ttemp6	set	btemp+4
  5700  0000                     ttemp7	set	btemp+8
  5701                           tosu	equ	0xFFF
  5702                           tosh	equ	0xFFE
  5703                           tosl	equ	0xFFD
  5704                           stkptr	equ	0xFFC
  5705                           pclatu	equ	0xFFB
  5706                           pclath	equ	0xFFA
  5707                           pcl	equ	0xFF9
  5708                           tblptru	equ	0xFF8
  5709                           tblptrh	equ	0xFF7
  5710                           tblptrl	equ	0xFF6
  5711                           tablat	equ	0xFF5
  5712                           prodh	equ	0xFF4
  5713                           prodl	equ	0xFF3
  5714                           indf0	equ	0xFEF
  5715                           postinc0	equ	0xFEE
  5716                           postdec0	equ	0xFED
  5717                           preinc0	equ	0xFEC
  5718                           plusw0	equ	0xFEB
  5719                           fsr0h	equ	0xFEA
  5720                           fsr0l	equ	0xFE9
  5721                           wreg	equ	0xFE8
  5722                           indf1	equ	0xFE7
  5723                           postinc1	equ	0xFE6
  5724                           postdec1	equ	0xFE5
  5725                           preinc1	equ	0xFE4
  5726                           plusw1	equ	0xFE3
  5727                           fsr1h	equ	0xFE2
  5728                           fsr1l	equ	0xFE1
  5729                           bsr	equ	0xFE0
  5730                           indf2	equ	0xFDF
  5731                           postinc2	equ	0xFDE
  5732                           postdec2	equ	0xFDD
  5733                           preinc2	equ	0xFDC
  5734                           plusw2	equ	0xFDB
  5735                           fsr2h	equ	0xFDA
  5736                           fsr2l	equ	0xFD9
  5737                           status	equ	0xFD8


Data Sizes:
    Strings     175
    Constant    0
    Data        15
    BSS         65
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     11      89
    BANK0           160      6      10
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    LCDPutStr@ptr	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_30(CODE[17]), STR_29(CODE[17]), STR_28(CODE[17]), STR_27(CODE[21]), 
		 -> STR_26(CODE[17]), STR_25(CODE[5]), STR_24(CODE[5]), STR_23(CODE[17]), 
		 -> STR_22(CODE[18]), STR_21(CODE[17]), STR_20(CODE[5]), STR_19(CODE[3]), 
		 -> STR_18(CODE[5]), STR_17(CODE[17]), STR_16(CODE[18]), STR_15(CODE[17]), 
		 -> STR_14(CODE[5]), STR_13(CODE[3]), STR_12(CODE[5]), STR_11(CODE[17]), 
		 -> STR_10(CODE[16]), STR_9(CODE[17]), STR_8(CODE[5]), STR_7(CODE[3]), 
		 -> STR_6(CODE[5]), STR_5(CODE[17]), STR_4(CODE[17]), STR_3(CODE[17]), 
		 -> STR_2(CODE[5]), STR_1(CODE[5]), 


Critical Paths under _main in COMRAM

    _buttonFSMRB0->_readButtonRB0
    _buttonFSMRA5->_readButtonRA5
    _fSW->_LCDPutInst
    _disp_SW->_LCDPutChar
    _disp_SW->_LCDPutInst
    _disp_SW->___awmod
    _fSECOND->_LCDPutInst
    _disp_SECOND->_LCDPutChar
    _disp_SECOND->_LCDPutInst
    _disp_SECOND->___awmod
    _modify_SEC->___awmod
    _fMINUTE->_LCDPutInst
    _disp_MINUTE->_LCDPutChar
    _disp_MINUTE->_LCDPutInst
    _disp_MINUTE->___awmod
    _modify_MIN->___awmod
    _fHOUR->_LCDPutInst
    _disp_HOUR->_LCDPutChar
    _disp_HOUR->_LCDPutInst
    _disp_HOUR->___awmod
    _modify_HOUR->___awmod
    _fCLOCK->_LCDPutInst
    _count_Clock->_LCDPutInst
    _disp_CLOCK->_LCDPutChar
    _disp_CLOCK->_LCDPutInst
    _disp_CLOCK->___awmod
    _disp_BEGIN->_LCDPutInst
    _LCDPutStr->_LCDPutChar
    _LCDPutChar->_WritePort_BBSPI
    _LCDInit->_LCDPutInst
    _Port_BBSPIInit->_SendByteBBSPI
    _LCDPutInst->_WritePort_BBSPI
    _WritePort_BBSPI->_SendByteBBSPI

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR1_ISR->i2_buttonFSMRB0
    i2_buttonFSMRB0->i2_readButtonRB0

Critical Paths under _main in BANK0

    _main->_FSM
    _disp_SW->___awdiv
    _disp_SECOND->___awdiv
    _disp_MINUTE->___awdiv
    _disp_HOUR->___awdiv
    _disp_CLOCK->___awdiv
    _disp_BEGIN->_LCDPutStr
    _LCDInit->_LCDPutInst

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  105591
                                _FSM
                  _SYSTEM_Initialize
                       _buttonFSMRA5
                       _buttonFSMRB0
 ---------------------------------------------------------------------------------
 (1) _buttonFSMRB0                                         2     2      0       0
                                              8 COMRAM     2     2      0
                      _readButtonRB0
 ---------------------------------------------------------------------------------
 (2) _readButtonRB0                                        3     1      2       0
                                              5 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _buttonFSMRA5                                         2     2      0       0
                                              8 COMRAM     2     2      0
                      _readButtonRA5
 ---------------------------------------------------------------------------------
 (2) _readButtonRA5                                        3     1      2       0
                                              5 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _FSM                                                  2     2      0  105591
                                              4 BANK0      2     2      0
                             _fBEGIN
                             _fCLOCK
                              _fHOUR
                            _fMINUTE
                            _fSECOND
                                _fSW
 ---------------------------------------------------------------------------------
 (2) _fSW                                                  0     0      0   16912
                         _LCDPutInst
                          _LCDPutStr
                     _count_Clock_SW
                            _disp_SW
 ---------------------------------------------------------------------------------
 (3) _disp_SW                                              0     0      0   12065
                         _LCDPutChar
                         _LCDPutInst
                          _LCDPutStr
                            ___awdiv
                            ___awmod
                    _start_stopWatch
 ---------------------------------------------------------------------------------
 (4) _start_stopWatch                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _count_Clock_SW                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _fSECOND                                              0     0      0   19944
                         _LCDPutInst
                          _LCDPutStr
                        _disp_SECOND
 ---------------------------------------------------------------------------------
 (3) _disp_SECOND                                          0     0      0   15097
                         _LCDPutChar
                         _LCDPutInst
                          _LCDPutStr
                            ___awdiv
                            ___awmod
                         _modify_SEC
 ---------------------------------------------------------------------------------
 (4) _modify_SEC                                           0     0      0    3032
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) _fMINUTE                                              0     0      0   19944
                         _LCDPutInst
                          _LCDPutStr
                        _disp_MINUTE
 ---------------------------------------------------------------------------------
 (3) _disp_MINUTE                                          0     0      0   15097
                         _LCDPutChar
                         _LCDPutInst
                          _LCDPutStr
                            ___awdiv
                            ___awmod
                         _modify_MIN
 ---------------------------------------------------------------------------------
 (4) _modify_MIN                                           0     0      0    3032
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) _fHOUR                                                0     0      0   19944
                         _LCDPutInst
                          _LCDPutStr
                          _disp_HOUR
 ---------------------------------------------------------------------------------
 (3) _disp_HOUR                                            0     0      0   15097
                         _LCDPutChar
                         _LCDPutInst
                          _LCDPutStr
                            ___awdiv
                            ___awmod
                        _modify_HOUR
 ---------------------------------------------------------------------------------
 (4) _modify_HOUR                                          0     0      0    3032
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) _fCLOCK                                               0     0      0   21759
                         _LCDPutInst
                          _LCDPutStr
                        _count_Clock
 ---------------------------------------------------------------------------------
 (3) _count_Clock                                          0     0      0   16912
                         _LCDPutInst
                          _LCDPutStr
                         _disp_CLOCK
 ---------------------------------------------------------------------------------
 (4) _disp_CLOCK                                           0     0      0   12065
                         _LCDPutChar
                         _LCDPutInst
                          _LCDPutStr
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    3032
                                              5 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    3145
                                              5 COMRAM     4     0      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _fBEGIN                                               0     0      0    7088
                         _disp_BEGIN
 ---------------------------------------------------------------------------------
 (3) _disp_BEGIN                                           0     0      0    7088
                        _BEGIN_delay
                            _LCDInit
                         _LCDPutInst
                          _LCDPutStr
 ---------------------------------------------------------------------------------
 (4) _LCDPutStr                                            2     0      2    3806
                                              0 BANK0      2     0      2
                         _LCDPutChar
 ---------------------------------------------------------------------------------
 (5) _LCDPutChar                                           1     1      0    1041
                                             10 COMRAM     1     1      0
                    _WritePort_BBSPI
 ---------------------------------------------------------------------------------
 (4) _LCDInit                                              0     0      0    2211
                          _InitBBSPI
                         _LCDPutInst
                     _Port_BBSPIInit
                    _WritePort_BBSPI
 ---------------------------------------------------------------------------------
 (5) _Port_BBSPIInit                                       1     1      0     160
                                              8 COMRAM     1     1      0
                      _SendByteBBSPI
 ---------------------------------------------------------------------------------
 (4) _LCDPutInst                                           2     2      0    1041
                                             10 COMRAM     1     1      0
                                              0 BANK0      1     1      0
                    _WritePort_BBSPI
 ---------------------------------------------------------------------------------
 (6) _WritePort_BBSPI                                      2     1      1    1010
                                              8 COMRAM     2     1      1
                      _SendByteBBSPI
 ---------------------------------------------------------------------------------
 (7) _SendByteBBSPI                                        3     3      0     138
                                              5 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (5) _InitBBSPI                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _BEGIN_delay                                          2     2      0      30
                                              5 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _INTERRUPT_InterruptManager                           0     0      0       0
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0       0
                     i2_buttonFSMRB0
                    i2_readButtonRB0
 ---------------------------------------------------------------------------------
 (11) i2_buttonFSMRB0                                      2     2      0       0
                                              3 COMRAM     2     2      0
                    i2_readButtonRB0
 ---------------------------------------------------------------------------------
 (11) i2_readButtonRB0                                     3     1      2       0
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _FSM
     _fBEGIN
       _disp_BEGIN
         _BEGIN_delay
         _LCDInit
           _InitBBSPI
           _LCDPutInst
             _WritePort_BBSPI
               _SendByteBBSPI
           _Port_BBSPIInit
             _SendByteBBSPI
           _WritePort_BBSPI
             _SendByteBBSPI
         _LCDPutInst
           _WritePort_BBSPI
             _SendByteBBSPI
         _LCDPutStr
           _LCDPutChar
             _WritePort_BBSPI
               _SendByteBBSPI
     _fCLOCK
       _LCDPutInst
         _WritePort_BBSPI
           _SendByteBBSPI
       _LCDPutStr
         _LCDPutChar
           _WritePort_BBSPI
             _SendByteBBSPI
       _count_Clock
         _LCDPutInst
           _WritePort_BBSPI
             _SendByteBBSPI
         _LCDPutStr
           _LCDPutChar
             _WritePort_BBSPI
               _SendByteBBSPI
         _disp_CLOCK
           _LCDPutChar
             _WritePort_BBSPI
               _SendByteBBSPI
           _LCDPutInst
             _WritePort_BBSPI
               _SendByteBBSPI
           _LCDPutStr
             _LCDPutChar
               _WritePort_BBSPI
                 _SendByteBBSPI
           ___awdiv
           ___awmod
     _fHOUR
       _LCDPutInst
         _WritePort_BBSPI
           _SendByteBBSPI
       _LCDPutStr
         _LCDPutChar
           _WritePort_BBSPI
             _SendByteBBSPI
       _disp_HOUR
         _LCDPutChar
           _WritePort_BBSPI
             _SendByteBBSPI
         _LCDPutInst
           _WritePort_BBSPI
             _SendByteBBSPI
         _LCDPutStr
           _LCDPutChar
             _WritePort_BBSPI
               _SendByteBBSPI
         ___awdiv
         ___awmod
         _modify_HOUR
           ___awmod
     _fMINUTE
       _LCDPutInst
         _WritePort_BBSPI
           _SendByteBBSPI
       _LCDPutStr
         _LCDPutChar
           _WritePort_BBSPI
             _SendByteBBSPI
       _disp_MINUTE
         _LCDPutChar
           _WritePort_BBSPI
             _SendByteBBSPI
         _LCDPutInst
           _WritePort_BBSPI
             _SendByteBBSPI
         _LCDPutStr
           _LCDPutChar
             _WritePort_BBSPI
               _SendByteBBSPI
         ___awdiv
         ___awmod
         _modify_MIN
           ___awmod
     _fSECOND
       _LCDPutInst
         _WritePort_BBSPI
           _SendByteBBSPI
       _LCDPutStr
         _LCDPutChar
           _WritePort_BBSPI
             _SendByteBBSPI
       _disp_SECOND
         _LCDPutChar
           _WritePort_BBSPI
             _SendByteBBSPI
         _LCDPutInst
           _WritePort_BBSPI
             _SendByteBBSPI
         _LCDPutStr
           _LCDPutChar
             _WritePort_BBSPI
               _SendByteBBSPI
         ___awdiv
         ___awmod
         _modify_SEC
           ___awmod
     _fSW
       _LCDPutInst
         _WritePort_BBSPI
           _SendByteBBSPI
       _LCDPutStr
         _LCDPutChar
           _WritePort_BBSPI
             _SendByteBBSPI
       _count_Clock_SW
       _disp_SW
         _LCDPutChar
           _WritePort_BBSPI
             _SendByteBBSPI
         _LCDPutInst
           _WritePort_BBSPI
             _SendByteBBSPI
         _LCDPutStr
           _LCDPutChar
             _WritePort_BBSPI
               _SendByteBBSPI
         ___awdiv
         ___awmod
         _start_stopWatch
   _SYSTEM_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR1_Initialize
       _TMR1_StartTimer
   _buttonFSMRA5
     _readButtonRA5
   _buttonFSMRB0
     _readButtonRB0

 _INTERRUPT_InterruptManager (ROOT)
   _TMR1_ISR
     i2_buttonFSMRB0
       i2_readButtonRB0
     i2_readButtonRB0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      6       A       5        6.3%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E      B      59       1       94.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      63      32        0.0%
DATA                 0      0      63       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Mon Sep 30 09:41:11 2019

                        ?_LCDPutChar 004D                                   l93 253C  
                       ___awdiv@sign 0061                          ?_LCDPutInst 004D  
              SendByteBBSPI@bitcount 0053                                  l203 24A6  
                                l206 2546                                  l350 2508  
                                l353 2532                                  l257 240E  
                                l461 251A                                  l470 202A  
                                l464 1FC6                                  l473 24DC  
                                l466 1FDA                                  l482 23E0  
                                l458 23A4                                  l467 1FDC  
                                l476 24F6                                  l580 20FE  
                                l902 1F40                                  l479 243A  
                                l575 2094                                  l488 2364  
                                l682 1778                                  l674 1C42  
                                l669 16AA                                  l792 1FBA  
                                l787 227C                                  l779 14D0  
                                l897 2220                                  l889 1370  
                                l998 11EA                                  l999 1210  
                                _FSM 1CD2                                  u300 2462  
                                u301 245E                                  u500 19B2  
                                u260 1C54                                  u501 19AE  
                                u261 1C50                                  u270 1C74  
                                u271 1C70                                  u280 1C9C  
                                u281 1C98                                  u290 1CC4  
                                u291 1CC0                                  u460 191A  
                                u461 1916                                  u470 193A  
                                u471 1936                                  u480 1962  
                                u481 195E                                  u490 198A  
                                u491 1986                                  u930 19D2  
                                u931 19CE                                  u940 19EC  
                                u941 19E8                                  u950 1A06  
                                u951 1A02                                  u960 1A24  
                                u961 1A20                                  u970 1A3A  
                                u971 1A36                                  u980 1A5E  
                                u981 1A5A                                  u990 2234  
                                u991 2230                                  _fSW 1A70  
                    _timer1ReloadVal 0058                         ___awmod@sign 0057  
            __size_of_count_Clock_SW 00B6                                  wreg 000FE8  
               __size_of_BEGIN_delay 0028                      __end_of_LCDInit 23A6  
                       __CFG_LVP$OFF 000000                                 ?_FSM 004D  
                               ?_fSW 004D                         __CFG_WDT$OFF 000000  
                               l1012 1EC6                                 l1102 15D2  
                               l1007 21C4                                 l1123 1B0E  
                               l1116 19BA                                 l1108 1CCC  
                               l1117 19BE                                 l1109 1CD0  
                               l1236 1BA8                                 l2301 243C  
                               l1246 1DD0                                 l2311 2544  
                               l4001 1F1A                                 l1257 1D54  
                               l1362 2462                                 l2307 2440  
                               l3051 2234                                 l4003 1F22  
                               l4011 1E60                                 l1612 1A6E  
                               l2309 2450                                 l1357 2324  
                               l1365 2542                                 l3053 2244  
                               l3061 21C6                                 l4005 1F2A  
                               l4021 1E98                                 l4013 1E66  
                               l2501 1946                                 l3301 206E  
                               l2095 250A                                 l3055 2254  
                               l3071 221C                                 l3063 21D8  
                               l4007 1F3C                                 l4023 1EA0  
                               l4015 1E74                                 l2511 1992  
                               l2503 1962                                 l4031 1A70  
                               l3311 2096                                 l3303 2080  
                               l3057 2274                                 l3049 2222  
                               l3065 21E8                                 l3081 21BC  
                               l3073 216A                                 l4025 1EA8  
                               l4017 1E88                                 l4009 1E4E  
                               l2513 1996                                 l2505 196A  
                               l2281 1C44                                 l4041 1AB2  
                               l4033 1A82                                 l3313 20A6  
                               l3059 2278                                 l3067 21F8  
                               l3083 21C0                                 l3075 217C  
                               l4019 1E90                                 l4027 1EB0  
                               l2515 19B2                                 l2507 196E  
                               l2291 1C80                                 l2283 1C54  
                               l4051 1AE4                                 l4043 1ABA  
                               l4035 1A88                                 l3323 20F6  
                               l3315 20C0                                 l3307 208C  
                               l3069 2218                                 l3077 218C  
                               l4029 1EC2                                 l2509 198A  
                               l2293 1C9C                                 l2285 1C58  
                               l4053 1AF6                                 l4045 1AC2  
                               l4037 1A96                                 l4061 1CD2  
                               l3317 20D8                                 l3501 1DA6  
                               l3079 219C                                 l2295 1CA4  
                               l2287 1C74                                 l4055 1B06  
                               l4047 1ACA                                 l4039 1AAA  
                               l4071 1CF6                                 l4063 1CD6  
                               l2551 2536                                 l3319 20EA  
                               l3511 1B2A                                 l3601 1FF2  
                               l2297 1CA8                                 l2289 1C7C  
                               l4057 1B0A                                 l4049 1AD2  
                               l4073 1CFE                                 l4065 1CDE  
                               l2553 253A                                 l2561 24A0  
                               l3521 1B60                                 l3513 1B36  
                               l3611 2000                                 l3603 1FF8  
                               l4059 253E                                 l2491 190A  
                               l2299 1CC4                                 l4067 1CE6  
                               l2563 24A2                                 l2555 248A  
                               l3523 1B76                                 l3515 1B3A  
                               l3507 1B10                                 l4091 24B4  
                               l4083 24A8                                 l3621 200A  
                               l3613 2002                                 l3605 1FFA  
                               l3701 18E8                                 l2493 191A  
                               l4069 1CEE                                 l4077 1D06  
                               l2549 2534                                 l2581 23E2  
                               l2557 2496                                 l3517 1B3E  
                               l3509 1B14                                 l4093 24B8  
                               l4085 24AC                                 l3631 2018  
                               l3623 200C                                 l3615 2004  
                               l3607 1FFC                                 l3711 236A  
                               l1599 1908                                 l3703 18F8  
                               l2495 191E                                 l2591 252A  
                               l2583 23EE                                 l2559 249E  
                               l3519 1B54                                 l3527 1B7E  
                               l3295 202C                                 l4175 1DBA  
                               l4087 24AE                                 l3633 201A  
                               l3625 200E                                 l3617 2006  
                               l3609 1FFE                                 l3721 237C  
                               l3713 236C                                 l3641 2412  
                               l3705 1900                                 l3801 13BE  
                               l2497 193A                                 l2585 2408  
                               l4177 1B92                                 l3297 203C  
                               l4089 24B0                                 l3627 2010  
                               l3619 2008                                 l3635 24E0  
                               l3651 23BE                                 l3643 24C6  
                               l3731 239E                                 l3723 2386  
                               l3715 236E                                 l3811 142E  
                               l3803 13C4                                 l2499 1942  
                               l4179 1D1E                                 l2587 240A  
                               l3299 2056                                 l3491 1D70  
                               l3629 2012                                 l3637 24E2  
                               l3653 23CC                                 l3645 24C8  
                               l3725 238C                                 l3717 2370  
                               l3709 2366                                 l3661 233E  
                               l3741 1620                                 l3733 15D4  
                               l3821 148E                                 l3813 1434  
                               l3805 13D2                                 l3901 11F8  
                               l2589 240C                                 l3493 1D74  
                               l3591 1FC2                                 l3639 24F4  
                               l3655 23D6                                 l3647 24DA  
                               l3727 2392                                 l3719 2376  
                               l3663 2344                                 l3671 1860  
                               l3751 1680                                 l3743 1626  
                               l3735 15DA                                 l3823 14B8  
                               l3815 1450                                 l3807 13E4  
                               l3831 1226                                 l3903 11FE  
                               l3911 1502                                 l3495 1D88  
                               l3487 1D56                                 l3649 23AA  
                               l3729 2398                                 l3657 2326  
                               l3681 1886                                 l3673 1864  
                               l3665 1844                                 l3753 169C  
                               l3745 1642                                 l3737 15E8  
                               l3761 16DC                                 l3825 14BE  
                               l3817 146C                                 l3809 1420  
                               l3841 1264                                 l3833 122A  
                               l3921 1562                                 l3913 151E  
                               l3905 14D2                                 l3497 1D9E  
                               l3489 1D5A                                 l3659 232A  
                               l3691 18BC                                 l3683 1898  
                               l3675 1872                                 l3667 184A  
                               l2971 19D2                                 l3747 165E  
                               l3739 1604                                 l3771 1710  
                               l3763 16E4                                 l3755 16AC  
                               l3819 1472                                 l3851 12C2  
                               l3843 1272                                 l3835 1246  
                               l3827 1212                                 l3931 15CE  
                               l3923 157E                                 l3915 1524  
                               l3907 14D8                                 l3597 1FD4  
                               l3589 1FBE                                 l3941 22F6  
                               l3933 22D2                                 l3693 18D2  
                               l3685 18A0                                 l3677 187A  
                               l3669 1858                                 l2981 1A06  
                               l2973 19DA                                 l3749 1664  
                               l3781 175C                                 l3773 172C  
                               l3765 16E8                                 l3757 16BC  
                               l3861 134A                                 l3853 12FE  
                               l3845 128E                                 l3837 1256  
                               l3829 1222                                 l3925 159A  
                               l3917 1540                                 l3909 14E6  
                               l2789 24F8                                 l3599 1FEA  
                               l3943 2304                                 l3935 22E4  
                               l3695 18DA                                 l3687 18A8  
                               l3679 187E                                 l2991 1A42  
                               l2983 1A0E                                 l2975 19DE  
                               l2967 19C0                                 l3783 1760  
                               l3775 1734                                 l3767 1704  
                               l3759 16C0                                 l3951 1BBC  
                               l3791 1382                                 l3863 135E  
                               l3855 130C                                 l3847 12AA  
                               l3839 125E                                 l3871 10C6  
                               l3927 15AE                                 l3919 155C  
                               l3945 230A                                 l3937 22E8  
                               l3697 18DC                                 l3689 18B6  
                               l2993 1A48                                 l2985 1A16  
                               l2977 19EC                                 l2969 19C4  
                               l3785 1764                                 l3777 1738  
                               l3769 170C                                 l3953 1BDC  
                               l3961 1C2C                                 l3793 1386  
                               l3865 136C                                 l3857 1312  
                               l3849 12B0                                 l3881 1104  
                               l3873 10CA                                 l3929 15BC  
                               l3947 2318                                 l3939 22F0  
                               l3699 18E2                                 l2987 1A24  
                               l2995 1A4E                                 l2979 19F4  
                               l3787 176A                                 l3779 1754  
                               l3963 1C3E                                 l3955 1BE2  
                               l3795 138A                                 l3971 1F68  
                               l3859 132E                                 l3891 116C  
                               l3883 1112                                 l3875 10E6  
                               l3867 10B2                                 l2997 1A5E  
                               l2989 1A3A                                 l3957 1BF0  
                               l3949 1BAA                                 l3797 13A6  
                               l3789 1372                                 l3981 1F9C  
                               l3973 1F7C                                 l3965 1F42  
                               l3893 1188                                 l3885 112E  
                               l3877 10F6                                 l3869 10C2  
                               l2999 1A66                                 l3959 1BF6  
                               l3799 13B6                                 l3975 1F84  
                               l3967 1F54                                 l3983 1FA4  
                               l3991 1EE0                                 l3895 118E  
                               l3887 114A                                 l3879 10FE  
                               l3985 1FB6                                 l3977 1F8C  
                               l3969 1F5A                                 l3993 1EEE  
                               l3897 11A0                                 l3889 1150  
                               l3979 1F94                                 l3995 1F02  
                               l3987 1EC8                                 l3899 11DC  
                               l3997 1F0A                                 l3989 1EDA  
                               l3999 1F12                                 STR_1 1023  
                               STR_2 1023                                 STR_3 106D  
                               STR_4 108F                                 STR_5 107E  
                               STR_6 1023                                 STR_7 1025  
                       ?_count_Clock 004D                                 STR_8 1023  
                               STR_9 107E                                 u1000 2244  
                               u1001 2240                                 u1010 2254  
                               u1011 2250                                 u1020 21D8  
                               u1021 21D4                                 u1030 21E8  
                               u1031 21E4                                 u1040 21F8  
                               u1041 21F4                                 u1050 217C  
                               u1051 2178                                 u1060 218C  
                               u1300 20B8                                 u1061 2188  
                               u1301 20B0                                 u1070 219C  
                               u1310 20D8                                 u1071 2198  
                               u1311 20D4                                 u1320 20EA  
                               u1321 20E6                                 u1308 20BA  
                               u1500 1D70                                 u1501 1D6C  
                               _LATA 000F89                                 u1270 204E  
                               u1510 1D9E                                 _LATB 000F8A  
                               u1271 2046                                 u1511 1D9A  
                               _LATC 000F8B                                 u1600 2364  
                               u1520 1B2A                                 u1280 206E  
                               _LATD 000F8C                                 u1601 2360  
                               u1521 1B26                                 u1281 206A  
                               _LATE 000F8D                                 u1610 1858  
                               u1530 1B54                                 u1290 2080  
                               u1611 1854                                 u1531 1B50  
                               u1291 207C                                 u1620 1872  
                               u1700 172C                                 u1540 1B76  
                               u1621 186E                                 u1701 1728  
                               u1541 1B72                                 u1630 1898  
                               u1710 1754                                 u1278 2050  
                               u1631 1894                                 u1711 1750  
                               u1640 18B6                                 u1720 1382  
                               u1800 11A0                                 u1641 18B2  
                               u1721 137E                                 u1801 119C  
                               u1570 1FD4                                 u1650 18D2  
                               u1730 13A6                                 u1810 15CE  
                               u1571 1FD0                                 u1651 18CE  
                               u1731 13A2                                 u1811 15CA  
                               u1580 1FEA                                 u1820 22E4  
                               u1660 18F8                                 u1740 13E4  
                               u1900 1EC2                                 u1581 1FE6  
                               u1821 22E0                                 u1661 18F4  
                               u1741 13E0                                 u1901 1EBE  
                               u1590 202A                                 u1670 16BC  
                               u1830 1BBC                                 u1750 1222  
                               u1910 1A82                                 u1591 2026  
                               u1671 16B8                                 u1831 1BB8  
                               u1751 121E                                 u1911 1A7E  
                               u1680 16DC                                 u1840 1C3E  
                               u1760 1246                                 u1920 1AE4  
                               u1681 16D8                                 u1841 1C3A  
                               u1761 1242                                 u1921 1AE0  
                               u1690 1704                                 u1850 1F54  
                               u1770 12C2                                 u1930 1AF6  
                               u1691 1700                                 u1851 1F50  
                               u1771 12BE                                 u1931 1AF2  
                               u1860 1FB6                                 u1780 10C2  
                               u1861 1FB2                                 u1781 10BE  
                               u1870 1EDA                                 u1790 10E6  
                               u1871 1ED6                                 u1791 10E2  
                               u1880 1F3C                                 u1881 1F38  
                               u1890 1E60                                 u1947 23C4  
                               u1891 1E5C                                 u1957 2446  
                               _TMR1 000FCE                                 _pRB0 0029  
                               _main 24A8                                 _hour 0023  
                               fsr1l 000FE1                                 btemp 005A  
                   ?_WritePort_BBSPI 0055                                 start 000E  
                 __size_of_LCDPutStr 0040                        __CFG_IESO$OFF 000000  
                      __CFG_MCLRE$ON 000000                         ___param_bank 000000  
                    __end_of_fMINUTE 1F42                      __end_of_fSECOND 1EC8  
                              ??_FSM 0064             __size_of_start_stopWatch 008E  
                              ??_fSW 0058       __size_of_OSCILLATOR_Initialize 000A  
      __end_of_OSCILLATOR_Initialize 2534                                ?_main 004D  
                    __end_of___awdiv 190A                                STR_10 10A0  
                              STR_11 108F                                STR_20 1023  
                              STR_12 1023                                STR_13 1025  
                              STR_21 107E                                STR_14 1023  
                              STR_30 103A                                STR_22 1016  
                              STR_15 107E                                STR_23 108F  
                              STR_24 1023                                STR_16 1028  
                              STR_25 1023                                STR_17 108F  
                              STR_18 1023                                STR_26 105C  
                              STR_19 1025                                STR_27 1001  
                              STR_28 108F                      __end_of___awmod 1A70  
                              STR_29 104B                      _TMR1_StartTimer 2544  
                    ___awdiv@divisor 0054                                _T1CON 000FCD  
                              i2l100 2486                                i2l228 1842  
                              i2l575 2168                      ___awdiv@counter 0060  
                              _TMR1H 000FCF                                _TMR1L 000FCE  
                              _TRISA 000F92                                _TRISB 000F93  
                              _TRISC 000F94                                _TRISD 000F95  
                              _TRISE 000F96                        __CFG_PWRT$OFF 000000  
                              _fHOUR 1F42                       __CFG_FCMEN$OFF 000000  
                    __end_of_disp_SW 15D4                     __end_of_TMR1_ISR 1844  
            __size_of_Port_BBSPIInit 001A                                _count 000B  
                              _state 000D              __end_of_TMR1_Initialize 24A8  
                     __CFG_BOREN$OFF 000000                                tablat 000FF5  
                __size_of_LCDPutChar 002C                  __size_of_LCDPutInst 003C  
                              ttemp5 005B                                ttemp6 005E  
                              ttemp7 0062                                status 000FD8  
                              wtemp8 005B                         ?_modify_HOUR 004D  
                       _access_state 0015                      __initialization 227E  
                       __end_of_main 24C4          ?_INTERRUPT_InterruptManager 004D  
                     __CFG_OSC$HSPLL 000000                               ??_main 0058  
                      __activetblptr 000003               __size_of_readButtonRB0 006A  
             __size_of_readButtonRA5 006A                            ??_LCDInit 0058  
                       LCDPutChar@ch 0057                    __end_of_LCDPutStr 2366  
                             ?_fHOUR 004D                        ?_buttonFSMRB0 004D  
                      ?_buttonFSMRA5 004D                               _ADCON1 000FC1  
                 __size_of_InitBBSPI 0012                     ___awdiv@dividend 0052  
                       LCDPutInst@ch 0060                 __size_of_disp_MINUTE 0160  
               __size_of_disp_SECOND 0160                               i2l1246 1E4C  
                             i2l3281 2110                               i2l3441 1DD6  
                             i2l3291 2160                               i2l3283 212A  
                             i2l3443 1DEC                               i2l3285 2142  
                             i2l4181 1E36                               i2l3445 1DF0  
                             i2l3453 1E22                               i2l3461 177C  
                             i2l3287 2154                               i2l3279 2100  
                             i2l3447 1E04                               i2l3439 1DD2  
                             i2l3471 17B6                               i2l3463 1780  
                             i2l3449 1E1A                               i2l3473 17D2  
                             i2l3481 1802                               i2l3465 178C  
                             i2l3483 1816                               i2l3475 17D6  
                             i2l3467 17A2                               i2l3459 177A  
                             i2l3555 2466                               i2l3477 17DA  
                             i2l3469 17B2                               i2l3485 181E  
                             i2l3557 2474                               i2l3479 17F6  
                             i2l3559 2482                               _OSCCON 000FD3  
                       LCDPutStr@ptr 0060                            ??_fMINUTE 0058  
                          ??_fSECOND 0058                               _fBEGIN 253E  
                             _fCLOCK 1BAA                       __CFG_XINST$OFF 000000  
                        MINUTE@count 0007              __end_of_TMR1_StartTimer 2548  
                        SECOND@count 0003                            ??___awdiv 0056  
                          ??___awmod 0056                               clear_0 22C2  
                   ___awdiv@quotient 0062                               _minute 0021  
                             _second 001F                      ___awmod@divisor 0054  
                    ___awmod@counter 0056                            ??_disp_SW 0058  
                             _swflag 0037                      MINUTE@blinkflag 0005  
                   ??i2_buttonFSMRB0 0050                    ??_start_stopWatch 0052  
                     _count_Clock_SW 190A                         __pdataCOMRAM 0040  
             Port_BBSPIInit@port_dir 0055                       ??_buttonFSMRB0 0055  
                     ??_buttonFSMRA5 0055                         __mediumconst 0000  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8        __size_of_INTERRUPT_Initialize 000A  
                   ?_TMR1_Initialize 004D                    _SYSTEM_Initialize 24F8  
                         __accesstop 0060              __end_of__initialization 22C8  
               __size_of_count_Clock 00CE                   ?_SYSTEM_Initialize 004D  
                      _readButtonRB0 202C                        _readButtonRA5 2096  
                      ___rparam_used 000001               __size_of_SendByteBBSPI 0070  
                      __end_of_fHOUR 1FBC                       __pcstackCOMRAM 004D  
                    SECOND@blinkflag 0001                         __pidataBANK0 2548  
                ??_SYSTEM_Initialize 0052                            ?_TMR1_ISR 004D  
                  __end_of_InitBBSPI 251C                         ??_LCDPutChar 0057  
                       ??_LCDPutInst 0057             __size_ofi2_readButtonRB0 006A  
             __end_of_count_Clock_SW 19C0                   __size_of_disp_HOUR 0160  
                            ??_fHOUR 0058                       _Port_BBSPIInit 24C4  
                         _checkBegin 0068            __end_of_SYSTEM_Initialize 250A  
                         _checkClock 004A                           __pbssBANK0 0066  
                     ?_readButtonRB0 0052                       ?_readButtonRA5 0052  
                 __end_of_LCDPutChar 243C                           __pnvCOMRAM 0058  
                 __end_of_LCDPutInst 23E2                              ?_fBEGIN 004D  
                            ?_fCLOCK 004D                 __size_of_modify_HOUR 005C  
                   ?_TMR1_StartTimer 004D                           ??_TMR1_ISR 0052  
                         _disp_BEGIN 22D2                           _disp_CLOCK 15D4  
                    ?_count_Clock_SW 004D                        ??_BEGIN_delay 0052  
             __end_of_Port_BBSPIInit 24DE                              _LCDInit 2366  
                      _SendByteBBSPI 1FBC                              _OSCTUNE 000F9B  
                       BEGIN_delay@i 0053                     WritePort_BBSPI@a 0055  
                            _fMINUTE 1EC8                              _fSECOND 1E4E  
                    __size_of_fBEGIN 0006                      __size_of_fCLOCK 009A  
                         _countpTime 0027                              __Hparam 0000  
                  __end_of_disp_HOUR 14D2                              __Lparam 0000  
               __end_of_buttonFSMRB0 1DD2                 __end_of_buttonFSMRA5 1BAA  
                            ___awdiv 1844                              ___awmod 19C0  
           __size_of_WritePort_BBSPI 001A                         __psmallconst 1000  
                            _checkHr 0048                              _checkSc 0044  
                            _checkSw 0042                              __pcinit 227E  
                     _stopWatch_flag 004C                              __ramtop 1000  
                            __ptext0 24A8                              __ptext1 1D56  
                            __ptext2 202C                              __ptext3 1B10  
                            __ptext4 2096                              __ptext5 24F8  
                            __ptext6 248A                              __ptext7 2544  
                            __ptext8 23E2                              __ptext9 252A  
                            _disp_SW 14D2                         __size_of_FSM 0084  
                          _T1CONbits 000FCD                       ?_SendByteBBSPI 004D  
                    ?_Port_BBSPIInit 004D                         __size_of_fSW 00A0  
              _OSCILLATOR_Initialize 252A                              _sw_10ms 001B  
                   ___awmod@dividend 0052             ??_PIN_MANAGER_Initialize 0052  
                  ??i2_readButtonRB0 004F                           _modify_MIN 21C6  
                         _modify_SEC 216A           __size_of_SYSTEM_Initialize 0012  
                          _LCDPutStr 2326                  __end_of_BEGIN_delay 2464  
                     __pintcode_body 2464                           _secondFlag 003E  
               end_of_initialization 22C8                      ??_readButtonRB0 0054  
                    ??_readButtonRA5 0054                              int_func 2464  
                         _normalFlag 003B                      _start_stopWatch 1C44  
                            postdec1 000FE5                              postinc0 000FEE  
                        ?_disp_BEGIN 004D                          ?_disp_CLOCK 004D  
                          _PORTAbits 000F80                            _PORTBbits 000F81  
                          _TRISAbits 000F92                            _TRISBbits 000F93  
                          _TRISCbits 000F94                            _TRISFbits 000F97  
                      ??_disp_MINUTE 0058                        ??_disp_SECOND 0058  
                         ?_LCDPutStr 0060                  SendByteBBSPI@output 0052  
                     __end_of_fBEGIN 2544                       __end_of_fCLOCK 1C44  
       __end_of_INTERRUPT_Initialize 253E                        __pidataCOMRAM 251C  
                       _firstReadRB0 002F                         _firstReadRA5 0035  
                  __size_of_TMR1_ISR 00CA                      ??_SendByteBBSPI 0052  
                      _secondReadRB0 002D                        _secondReadRA5 0033  
             ?_OSCILLATOR_Initialize 004D                            _InitBBSPI 250A  
                        _BEGIN_delay 243C                    ??_WritePort_BBSPI 0056  
                start_initialization 227E                          ?_modify_MIN 004D  
                        ?_modify_SEC 004D                          __end_of_FSM 1D56  
    __size_of_PIN_MANAGER_Initialize 002E                          __end_of_fSW 1B10  
                      ??_count_Clock 0058                __size_of_buttonFSMRB0 007C  
              __size_of_buttonFSMRA5 009A                  __size_of_disp_BEGIN 0054  
                __end_of_disp_MINUTE 1372                  __end_of_disp_SECOND 1212  
            __end_of_start_stopWatch 1CD2                  __size_of_disp_CLOCK 00D8  
                           ??_fBEGIN 0058                             ??_fCLOCK 0058  
           __size_of_TMR1_Initialize 001E                     ??_count_Clock_SW 0052  
                        __pdataBANK0 0068                     _FastIncreaseFlag 003F  
                         ?_InitBBSPI 004D                       _buttonStateRB0 0039  
                     _buttonStateRA5 003A                             ?_LCDInit 004D  
                        __pbssCOMRAM 0001                        __pcstackBANK0 0060  
                       _buttonFSMRB0 1D56                         _buttonFSMRA5 1B10  
                        ??_LCDPutStr 0058              __size_ofi2_buttonFSMRB0 007C  
                          _beginFlag 000F                             ?_fMINUTE 004D  
                           ?_fSECOND 004D                  __end_of_count_Clock 177A  
                      ??_modify_HOUR 0058               _PIN_MANAGER_Initialize 23E2  
                __size_of_modify_MIN 005C                  __size_of_modify_SEC 005C  
                          __pintcode 0008                            _blinkflag 0009  
                           ?___awdiv 0052                             ?___awmod 0052  
                    i2_readButtonRB0 2100                            _disp_HOUR 1372  
                   ??_Port_BBSPIInit 0055         ??_INTERRUPT_InterruptManager 0052  
                           ?_disp_SW 004D                            _count10ms 001D  
                        __smallconst 1000             __size_of_TMR1_StartTimer 0004  
                          _countMode 0025                            _firstTime 0040  
                     __size_of_fHOUR 007A                          _disp_MINUTE 1212  
                        _disp_SECOND 10B2                          _clock_state 0013  
               _INTERRUPT_Initialize 2534                             _LATAbits 000F89  
                           _LATCbits 000F8B                     ?_start_stopWatch 004D  
                           _LATFbits 000F8E                             _IPR1bits 000F9F  
                           _PIE1bits 000F9D                             i2u124_40 2122  
                           i2u124_41 211A                             i2u125_40 2142  
                           i2u124_48 2124                             i2u125_41 213E  
                           i2u126_40 2154                             i2u126_41 2150  
__size_of_INTERRUPT_InterruptManager 2482                             i2u144_40 1DEC  
                           i2u144_41 1DE8                             i2u145_40 1E1A  
                           i2u145_41 1E16                             i2u146_40 17A2  
                           i2u146_41 179E                             i2u147_40 17D2  
                           i2u155_40 2474                             i2u147_41 17CE  
                           i2u155_41 2470                             i2u148_40 17F6  
                           i2u156_40 2482                             i2u148_41 17F2  
                           i2u156_41 247E                             i2u149_40 1816  
                           i2u149_41 1812                             _PIR1bits 000F9E  
                           _RCONbits 000FD0                             _TMR1_ISR 177A  
                         ?_disp_HOUR 004D                            _timerflag 0038  
                __end_of_modify_HOUR 227E                         ??_disp_BEGIN 0058  
                       ??_disp_CLOCK 0058                    ??_TMR1_Initialize 0052  
                        ??_InitBBSPI 0052                   SendByteBBSPI@input 0054  
                          _sw_minute 0017                            _sw_second 0019  
                          _sw_preVal 0066                     __size_of_LCDInit 0040  
                       _secondSWFlag 003D                          _INTCON2bits 000FF1  
                          copy_data0 22AA                ?_INTERRUPT_Initialize 004D  
                        _count_Clock 16AC                __end_of_readButtonRB0 2096  
              __end_of_readButtonRA5 2100                   __end_of_disp_BEGIN 2326  
                 __end_of_disp_CLOCK 16AC              __end_ofi2_readButtonRB0 216A  
                   __size_of_fMINUTE 007A                     __size_of_fSECOND 007A  
                           __Hrparam 0000                             __Lrparam 0000  
                    _WritePort_BBSPI 24DE              ??_OSCILLATOR_Initialize 0052  
                   __size_of___awdiv 00C6                     __size_of___awmod 00B0  
                   __size_of_disp_SW 0102                         ?_BEGIN_delay 004D  
                           _checkMin 0046                         ??_modify_MIN 0058  
                       ??_modify_SEC 0058                             _fastMode 003C  
                    _stopWatch_state 0011                             __ptext10 2534  
                           __ptext11 1CD2                             __ptext20 1212  
                           __ptext12 1A70                             __ptext21 21C6  
                           __ptext13 14D2                             __ptext30 253E  
                           __ptext22 1F42                             __ptext14 1C44  
                           __ptext31 22D2                             __ptext23 1372  
                           __ptext15 190A                             __ptext40 243C  
                           __ptext32 2326                             __ptext24 2222  
                           __ptext16 1E4E                             __ptext33 2410  
                           __ptext25 1BAA                             __ptext17 10B2  
                           __ptext42 177A                             __ptext34 2366  
                           __ptext26 16AC                             __ptext18 216A  
                           __ptext43 1DD2                             __ptext35 24C4  
                           __ptext27 15D4                             __ptext19 1EC8  
                           __ptext44 2100                             __ptext36 23A6  
                           __ptext28 19C0                             __ptext37 24DE  
                           __ptext29 1844                             __ptext38 1FBC  
                           __ptext39 250A                       i2_buttonFSMRB0 1DD2  
                  ??_TMR1_StartTimer 0052                        __size_of_main 001C  
                        _modify_HOUR 2222                   __end_of_modify_MIN 2222  
                 __end_of_modify_SEC 21C6                             int$flags 005A  
                        ??_disp_HOUR 0058   __end_of_INTERRUPT_InterruptManager 248A  
         _INTERRUPT_InterruptManager 0008                           _LCDPutChar 2410  
                         _LCDPutInst 23A6                __end_of_SendByteBBSPI 202C  
                       _thirdReadRB0 002B                         _thirdReadRA5 0031  
                         _INTCONbits 000FF2               __end_ofi2_buttonFSMRB0 1E4E  
             ??_INTERRUPT_Initialize 0052                             intlevel2 0000  
            ?_PIN_MANAGER_Initialize 004D              __end_of_WritePort_BBSPI 24F8  
                   ?i2_readButtonRB0 004D              WritePort_BBSPI@port_add 0056  
                       ?_disp_MINUTE 004D                         ?_disp_SECOND 004D  
                    ?i2_buttonFSMRB0 004D       __end_of_PIN_MANAGER_Initialize 2410  
                    _TMR1_Initialize 248A  
